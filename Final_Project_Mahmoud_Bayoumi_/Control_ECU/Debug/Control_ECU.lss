
Control_ECU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002644  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000024  00800060  00002644  000026d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000d  00800084  00800084  000026fc  2**0
                  ALLOC
  3 .stab         00002b44  00000000  00000000  000026fc  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001602  00000000  00000000  00005240  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00006842  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00006982  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00006af2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0000873b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  00009626  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000a3d4  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000a534  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000a7c1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000af8f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 5b 0e 	jmp	0x1cb6	; 0x1cb6 <__vector_3>
      10:	0c 94 8e 0e 	jmp	0x1d1c	; 0x1d1c <__vector_4>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 c2 0d 	jmp	0x1b84	; 0x1b84 <__vector_6>
      1c:	0c 94 f5 0d 	jmp	0x1bea	; 0x1bea <__vector_7>
      20:	0c 94 28 0e 	jmp	0x1c50	; 0x1c50 <__vector_8>
      24:	0c 94 8f 0d 	jmp	0x1b1e	; 0x1b1e <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 5c 0d 	jmp	0x1ab8	; 0x1ab8 <__vector_19>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e4 e4       	ldi	r30, 0x44	; 68
      68:	f6 e2       	ldi	r31, 0x26	; 38
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a4 38       	cpi	r26, 0x84	; 132
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a4 e8       	ldi	r26, 0x84	; 132
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a1 39       	cpi	r26, 0x91	; 145
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 f1 05 	call	0xbe2	; 0xbe2 <main>
      8a:	0c 94 20 13 	jmp	0x2640	; 0x2640 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 e9 12 	jmp	0x25d2	; 0x25d2 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 05 13 	jmp	0x260a	; 0x260a <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 f5 12 	jmp	0x25ea	; 0x25ea <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 11 13 	jmp	0x2622	; 0x2622 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 f5 12 	jmp	0x25ea	; 0x25ea <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 11 13 	jmp	0x2622	; 0x2622 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 e9 12 	jmp	0x25d2	; 0x25d2 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 05 13 	jmp	0x260a	; 0x260a <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 f5 12 	jmp	0x25ea	; 0x25ea <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 11 13 	jmp	0x2622	; 0x2622 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 f5 12 	jmp	0x25ea	; 0x25ea <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 11 13 	jmp	0x2622	; 0x2622 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 f5 12 	jmp	0x25ea	; 0x25ea <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 11 13 	jmp	0x2622	; 0x2622 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 f9 12 	jmp	0x25f2	; 0x25f2 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 15 13 	jmp	0x262a	; 0x262a <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__pack_f+0x178>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__pack_f+0x172>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__pack_f+0x17c>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__pack_f+0x114>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__pack_f+0x76>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__pack_f+0xca>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__pack_f+0x86>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__pack_f+0x7e>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__pack_f+0x9c>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__pack_f+0x94>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__pack_f+0xbe>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__pack_f+0xee>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__pack_f+0xf6>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__pack_f+0xf6>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__pack_f+0x10e>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__pack_f+0x162>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__pack_f+0x172>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__pack_f+0x144>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__pack_f+0x154>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__pack_f+0x14c>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__pack_f+0x162>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__pack_f+0x164>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__pack_f+0x17c>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <DcMotor_init>:
 * 1. Setup the DC Motor pins directions by use the GPIO driver.
 * 2. Setup the DC Motor state ( STOP - CLOCKWISE - COUNTER CLOCKWISE)
 */

void DcMotor_init(void)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
	/* Configure the direction for IN1 and IN2 pins as output pins */
	GPIO_setupPinDirection(DcMotor_PORT_ID,DcMotor_IN1_PIN_ID,PIN_OUTPUT);
     b4e:	83 e0       	ldi	r24, 0x03	; 3
     b50:	62 e0       	ldi	r22, 0x02	; 2
     b52:	41 e0       	ldi	r20, 0x01	; 1
     b54:	0e 94 1e 0a 	call	0x143c	; 0x143c <GPIO_setupPinDirection>
	GPIO_setupPinDirection(DcMotor_PORT_ID,DcMotor_IN2_PIN_ID,PIN_OUTPUT);
     b58:	83 e0       	ldi	r24, 0x03	; 3
     b5a:	63 e0       	ldi	r22, 0x03	; 3
     b5c:	41 e0       	ldi	r20, 0x01	; 1
     b5e:	0e 94 1e 0a 	call	0x143c	; 0x143c <GPIO_setupPinDirection>
	GPIO_writePin(DcMotor_PORT_ID,DcMotor_IN1_PIN_ID,LOGIC_LOW);
     b62:	83 e0       	ldi	r24, 0x03	; 3
     b64:	62 e0       	ldi	r22, 0x02	; 2
     b66:	40 e0       	ldi	r20, 0x00	; 0
     b68:	0e 94 09 0b 	call	0x1612	; 0x1612 <GPIO_writePin>
	GPIO_writePin(DcMotor_PORT_ID,DcMotor_IN2_PIN_ID,LOGIC_LOW);
     b6c:	83 e0       	ldi	r24, 0x03	; 3
     b6e:	63 e0       	ldi	r22, 0x03	; 3
     b70:	40 e0       	ldi	r20, 0x00	; 0
     b72:	0e 94 09 0b 	call	0x1612	; 0x1612 <GPIO_writePin>
}
     b76:	cf 91       	pop	r28
     b78:	df 91       	pop	r29
     b7a:	08 95       	ret

00000b7c <DcMotor_Rotate>:
 * Description :
 * Function responsible for rotate the DC Motor CLOCKWISE or COUNTER CLOCKWISE or STOP the motor based on the state input state value.
 */

void DcMotor_Rotate(uint8 Direction)
{
     b7c:	df 93       	push	r29
     b7e:	cf 93       	push	r28
     b80:	0f 92       	push	r0
     b82:	cd b7       	in	r28, 0x3d	; 61
     b84:	de b7       	in	r29, 0x3e	; 62
     b86:	89 83       	std	Y+1, r24	; 0x01
	if(Direction == Motor_STOP){
     b88:	89 81       	ldd	r24, Y+1	; 0x01
     b8a:	88 23       	and	r24, r24
     b8c:	59 f4       	brne	.+22     	; 0xba4 <DcMotor_Rotate+0x28>
		GPIO_writePin(DcMotor_PORT_ID,DcMotor_IN1_PIN_ID,LOGIC_LOW);
     b8e:	83 e0       	ldi	r24, 0x03	; 3
     b90:	62 e0       	ldi	r22, 0x02	; 2
     b92:	40 e0       	ldi	r20, 0x00	; 0
     b94:	0e 94 09 0b 	call	0x1612	; 0x1612 <GPIO_writePin>
		GPIO_writePin(DcMotor_PORT_ID,DcMotor_IN2_PIN_ID,LOGIC_LOW);
     b98:	83 e0       	ldi	r24, 0x03	; 3
     b9a:	63 e0       	ldi	r22, 0x03	; 3
     b9c:	40 e0       	ldi	r20, 0x00	; 0
     b9e:	0e 94 09 0b 	call	0x1612	; 0x1612 <GPIO_writePin>
     ba2:	1b c0       	rjmp	.+54     	; 0xbda <DcMotor_Rotate+0x5e>
	}
	else if (Direction == Motor_CW)
     ba4:	89 81       	ldd	r24, Y+1	; 0x01
     ba6:	81 30       	cpi	r24, 0x01	; 1
     ba8:	59 f4       	brne	.+22     	; 0xbc0 <DcMotor_Rotate+0x44>
	{
		GPIO_writePin(DcMotor_PORT_ID,DcMotor_IN1_PIN_ID,LOGIC_HIGH);
     baa:	83 e0       	ldi	r24, 0x03	; 3
     bac:	62 e0       	ldi	r22, 0x02	; 2
     bae:	41 e0       	ldi	r20, 0x01	; 1
     bb0:	0e 94 09 0b 	call	0x1612	; 0x1612 <GPIO_writePin>
		GPIO_writePin(DcMotor_PORT_ID,DcMotor_IN2_PIN_ID,LOGIC_LOW);
     bb4:	83 e0       	ldi	r24, 0x03	; 3
     bb6:	63 e0       	ldi	r22, 0x03	; 3
     bb8:	40 e0       	ldi	r20, 0x00	; 0
     bba:	0e 94 09 0b 	call	0x1612	; 0x1612 <GPIO_writePin>
     bbe:	0d c0       	rjmp	.+26     	; 0xbda <DcMotor_Rotate+0x5e>
	}
	else if (Direction == Motor_C_CW)
     bc0:	89 81       	ldd	r24, Y+1	; 0x01
     bc2:	82 30       	cpi	r24, 0x02	; 2
     bc4:	51 f4       	brne	.+20     	; 0xbda <DcMotor_Rotate+0x5e>
		{
		GPIO_writePin(DcMotor_PORT_ID,DcMotor_IN1_PIN_ID,LOGIC_LOW);
     bc6:	83 e0       	ldi	r24, 0x03	; 3
     bc8:	62 e0       	ldi	r22, 0x02	; 2
     bca:	40 e0       	ldi	r20, 0x00	; 0
     bcc:	0e 94 09 0b 	call	0x1612	; 0x1612 <GPIO_writePin>
		GPIO_writePin(DcMotor_PORT_ID,DcMotor_IN2_PIN_ID,LOGIC_HIGH);
     bd0:	83 e0       	ldi	r24, 0x03	; 3
     bd2:	63 e0       	ldi	r22, 0x03	; 3
     bd4:	41 e0       	ldi	r20, 0x01	; 1
     bd6:	0e 94 09 0b 	call	0x1612	; 0x1612 <GPIO_writePin>
		}
}
     bda:	0f 90       	pop	r0
     bdc:	cf 91       	pop	r28
     bde:	df 91       	pop	r29
     be0:	08 95       	ret

00000be2 <main>:
 */

#include "MC2_Function.h"

int main (void)
{
     be2:	df 93       	push	r29
     be4:	cf 93       	push	r28
     be6:	cd b7       	in	r28, 0x3d	; 61
     be8:	de b7       	in	r29, 0x3e	; 62
     bea:	60 97       	sbiw	r28, 0x10	; 16
     bec:	0f b6       	in	r0, 0x3f	; 63
     bee:	f8 94       	cli
     bf0:	de bf       	out	0x3e, r29	; 62
     bf2:	0f be       	out	0x3f, r0	; 63
     bf4:	cd bf       	out	0x3d, r28	; 61

	uint8 Create_Flag=0;
     bf6:	1a 82       	std	Y+2, r1	; 0x02
	uint8 New_Flag=0;
     bf8:	19 82       	std	Y+1, r1	; 0x01

	Buzzer_Init();
     bfa:	0e 94 59 09 	call	0x12b2	; 0x12b2 <Buzzer_Init>
	DcMotor_init();
     bfe:	0e 94 a3 05 	call	0xb46	; 0xb46 <DcMotor_init>
	TWI_Config Config_eepromm = {0x01,0x02};
     c02:	81 e0       	ldi	r24, 0x01	; 1
     c04:	8b 83       	std	Y+3, r24	; 0x03
     c06:	82 e0       	ldi	r24, 0x02	; 2
     c08:	8c 83       	std	Y+4, r24	; 0x04
	TWI_init(&Config_eepromm);
     c0a:	ce 01       	movw	r24, r28
     c0c:	03 96       	adiw	r24, 0x03	; 3
     c0e:	0e 94 f9 10 	call	0x21f2	; 0x21f2 <TWI_init>
	UART_ConfigType UART_config = { 9600 , Eight_BIT , Disabled ,OneBIT };
     c12:	ce 01       	movw	r24, r28
     c14:	05 96       	adiw	r24, 0x05	; 5
     c16:	9d 87       	std	Y+13, r25	; 0x0d
     c18:	8c 87       	std	Y+12, r24	; 0x0c
     c1a:	ea e6       	ldi	r30, 0x6A	; 106
     c1c:	f0 e0       	ldi	r31, 0x00	; 0
     c1e:	ff 87       	std	Y+15, r31	; 0x0f
     c20:	ee 87       	std	Y+14, r30	; 0x0e
     c22:	f7 e0       	ldi	r31, 0x07	; 7
     c24:	f8 8b       	std	Y+16, r31	; 0x10
     c26:	ee 85       	ldd	r30, Y+14	; 0x0e
     c28:	ff 85       	ldd	r31, Y+15	; 0x0f
     c2a:	00 80       	ld	r0, Z
     c2c:	8e 85       	ldd	r24, Y+14	; 0x0e
     c2e:	9f 85       	ldd	r25, Y+15	; 0x0f
     c30:	01 96       	adiw	r24, 0x01	; 1
     c32:	9f 87       	std	Y+15, r25	; 0x0f
     c34:	8e 87       	std	Y+14, r24	; 0x0e
     c36:	ec 85       	ldd	r30, Y+12	; 0x0c
     c38:	fd 85       	ldd	r31, Y+13	; 0x0d
     c3a:	00 82       	st	Z, r0
     c3c:	8c 85       	ldd	r24, Y+12	; 0x0c
     c3e:	9d 85       	ldd	r25, Y+13	; 0x0d
     c40:	01 96       	adiw	r24, 0x01	; 1
     c42:	9d 87       	std	Y+13, r25	; 0x0d
     c44:	8c 87       	std	Y+12, r24	; 0x0c
     c46:	98 89       	ldd	r25, Y+16	; 0x10
     c48:	91 50       	subi	r25, 0x01	; 1
     c4a:	98 8b       	std	Y+16, r25	; 0x10
     c4c:	e8 89       	ldd	r30, Y+16	; 0x10
     c4e:	ee 23       	and	r30, r30
     c50:	51 f7       	brne	.-44     	; 0xc26 <main+0x44>
	UART_init(&UART_config);
     c52:	ce 01       	movw	r24, r28
     c54:	05 96       	adiw	r24, 0x05	; 5
     c56:	0e 94 8e 11 	call	0x231c	; 0x231c <UART_init>

	while(1)
	{
		if (Create_Flag==0)
     c5a:	8a 81       	ldd	r24, Y+2	; 0x02
     c5c:	88 23       	and	r24, r24
     c5e:	21 f4       	brne	.+8      	; 0xc68 <main+0x86>
		{
			ReceiveNewPassword();
     c60:	0e 94 99 07 	call	0xf32	; 0xf32 <ReceiveNewPassword>
			Create_Flag =1 ;
     c64:	81 e0       	ldi	r24, 0x01	; 1
     c66:	8a 83       	std	Y+2, r24	; 0x02
		}
		if (New_Flag==0)
     c68:	89 81       	ldd	r24, Y+1	; 0x01
     c6a:	88 23       	and	r24, r24
     c6c:	b1 f7       	brne	.-20     	; 0xc5a <main+0x78>
		{
			MenuOperationControl();
     c6e:	0e 94 41 09 	call	0x1282	; 0x1282 <MenuOperationControl>
     c72:	f3 cf       	rjmp	.-26     	; 0xc5a <main+0x78>

00000c74 <DCMotor_Processing>:
 * 3 : if the g_ticks incremented up to 643(18 Seconds), Change The Flag value to 2
 * 4 : if the g_ticks incremented up to 1102(33 Seconds), Change The Flag value to 0
 */

void DCMotor_Processing (void)
{
     c74:	df 93       	push	r29
     c76:	cf 93       	push	r28
     c78:	cd b7       	in	r28, 0x3d	; 61
     c7a:	de b7       	in	r29, 0x3e	; 62

	g_ticks++;
     c7c:	80 91 86 00 	lds	r24, 0x0086
     c80:	90 91 87 00 	lds	r25, 0x0087
     c84:	01 96       	adiw	r24, 0x01	; 1
     c86:	90 93 87 00 	sts	0x0087, r25
     c8a:	80 93 86 00 	sts	0x0086, r24
	if (g_ticks == NUMBER_OF_OverFlow_DcMotorStart_PER_15_SECOND)
     c8e:	80 91 86 00 	lds	r24, 0x0086
     c92:	90 91 87 00 	lds	r25, 0x0087
     c96:	21 e0       	ldi	r18, 0x01	; 1
     c98:	88 3c       	cpi	r24, 0xC8	; 200
     c9a:	92 07       	cpc	r25, r18
     c9c:	19 f4       	brne	.+6      	; 0xca4 <DCMotor_Processing+0x30>
	{
		DCMotor_Timer_Flags =1;
     c9e:	81 e0       	ldi	r24, 0x01	; 1
     ca0:	80 93 89 00 	sts	0x0089, r24
	}

	if (g_ticks == NUMBER_OF_OverFlow_DcMotorOverallTime_PER_18_SECOND)
     ca4:	80 91 86 00 	lds	r24, 0x0086
     ca8:	90 91 87 00 	lds	r25, 0x0087
     cac:	22 e0       	ldi	r18, 0x02	; 2
     cae:	86 32       	cpi	r24, 0x26	; 38
     cb0:	92 07       	cpc	r25, r18
     cb2:	19 f4       	brne	.+6      	; 0xcba <DCMotor_Processing+0x46>
	{
		DCMotor_Timer_Flags =2;
     cb4:	82 e0       	ldi	r24, 0x02	; 2
     cb6:	80 93 89 00 	sts	0x0089, r24
	}

	if (g_ticks == NUMBER_OF_OverFlow_DcMotorOverallTime_PER_33_SECOND)
     cba:	80 91 86 00 	lds	r24, 0x0086
     cbe:	90 91 87 00 	lds	r25, 0x0087
     cc2:	23 e0       	ldi	r18, 0x03	; 3
     cc4:	8e 3e       	cpi	r24, 0xEE	; 238
     cc6:	92 07       	cpc	r25, r18
     cc8:	31 f4       	brne	.+12     	; 0xcd6 <DCMotor_Processing+0x62>
	{
		DCMotor_Timer_Flags = 0;
     cca:	10 92 89 00 	sts	0x0089, r1
		g_ticks = 0;
     cce:	10 92 87 00 	sts	0x0087, r1
     cd2:	10 92 86 00 	sts	0x0086, r1
	}
}
     cd6:	cf 91       	pop	r28
     cd8:	df 91       	pop	r29
     cda:	08 95       	ret

00000cdc <Buzzer_Processing_Time>:
 * 1 : Increment g_tick
 * 2 : if the g_tick incremented up to 1838(60 Seconds), Change The Flag value to 1
 */

void Buzzer_Processing_Time (void)
{
     cdc:	df 93       	push	r29
     cde:	cf 93       	push	r28
     ce0:	cd b7       	in	r28, 0x3d	; 61
     ce2:	de b7       	in	r29, 0x3e	; 62
	g_tick++;
     ce4:	80 91 84 00 	lds	r24, 0x0084
     ce8:	90 91 85 00 	lds	r25, 0x0085
     cec:	01 96       	adiw	r24, 0x01	; 1
     cee:	90 93 85 00 	sts	0x0085, r25
     cf2:	80 93 84 00 	sts	0x0084, r24

	if (g_tick == NUMBER_OF_OverFlow_BuzzerOverallTime_PER_60_SECOND)
     cf6:	80 91 84 00 	lds	r24, 0x0084
     cfa:	90 91 85 00 	lds	r25, 0x0085
     cfe:	8e 31       	cpi	r24, 0x1E	; 30
     d00:	91 05       	cpc	r25, r1
     d02:	21 f4       	brne	.+8      	; 0xd0c <Buzzer_Processing_Time+0x30>
	{
		Buzzer_Timer_Flag =1;
     d04:	81 e0       	ldi	r24, 0x01	; 1
     d06:	80 93 88 00 	sts	0x0088, r24
     d0a:	0d c0       	rjmp	.+26     	; 0xd26 <Buzzer_Processing_Time+0x4a>

	}
	else if (g_tick > NUMBER_OF_OverFlow_BuzzerOverallTime_PER_60_SECOND)
     d0c:	80 91 84 00 	lds	r24, 0x0084
     d10:	90 91 85 00 	lds	r25, 0x0085
     d14:	8f 31       	cpi	r24, 0x1F	; 31
     d16:	91 05       	cpc	r25, r1
     d18:	30 f0       	brcs	.+12     	; 0xd26 <Buzzer_Processing_Time+0x4a>
	{
		Buzzer_Timer_Flag =0;
     d1a:	10 92 88 00 	sts	0x0088, r1
		g_tick = 0;
     d1e:	10 92 85 00 	sts	0x0085, r1
     d22:	10 92 84 00 	sts	0x0084, r1
	}
}
     d26:	cf 91       	pop	r28
     d28:	df 91       	pop	r29
     d2a:	08 95       	ret

00000d2c <StorePassword>:
/*
 * Description: Function to Store The Password into EEPROM
 */

void StorePassword (uint8 *StorePass_Ptr)
{
     d2c:	df 93       	push	r29
     d2e:	cf 93       	push	r28
     d30:	cd b7       	in	r28, 0x3d	; 61
     d32:	de b7       	in	r29, 0x3e	; 62
     d34:	61 97       	sbiw	r28, 0x11	; 17
     d36:	0f b6       	in	r0, 0x3f	; 63
     d38:	f8 94       	cli
     d3a:	de bf       	out	0x3e, r29	; 62
     d3c:	0f be       	out	0x3f, r0	; 63
     d3e:	cd bf       	out	0x3d, r28	; 61
     d40:	99 8b       	std	Y+17, r25	; 0x11
     d42:	88 8b       	std	Y+16, r24	; 0x10
	uint8 i;

	for (i=0 ; i<ArrSize ; i++ )
     d44:	1f 86       	std	Y+15, r1	; 0x0f
     d46:	85 c0       	rjmp	.+266    	; 0xe52 <StorePassword+0x126>
	{
		EEPROM_writeByte( i , StorePass_Ptr[i]);
     d48:	8f 85       	ldd	r24, Y+15	; 0x0f
     d4a:	48 2f       	mov	r20, r24
     d4c:	50 e0       	ldi	r21, 0x00	; 0
     d4e:	8f 85       	ldd	r24, Y+15	; 0x0f
     d50:	28 2f       	mov	r18, r24
     d52:	30 e0       	ldi	r19, 0x00	; 0
     d54:	88 89       	ldd	r24, Y+16	; 0x10
     d56:	99 89       	ldd	r25, Y+17	; 0x11
     d58:	fc 01       	movw	r30, r24
     d5a:	e2 0f       	add	r30, r18
     d5c:	f3 1f       	adc	r31, r19
     d5e:	20 81       	ld	r18, Z
     d60:	ca 01       	movw	r24, r20
     d62:	62 2f       	mov	r22, r18
     d64:	0e 94 7d 09 	call	0x12fa	; 0x12fa <EEPROM_writeByte>
     d68:	80 e0       	ldi	r24, 0x00	; 0
     d6a:	90 e0       	ldi	r25, 0x00	; 0
     d6c:	a0 e2       	ldi	r26, 0x20	; 32
     d6e:	b1 e4       	ldi	r27, 0x41	; 65
     d70:	8b 87       	std	Y+11, r24	; 0x0b
     d72:	9c 87       	std	Y+12, r25	; 0x0c
     d74:	ad 87       	std	Y+13, r26	; 0x0d
     d76:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     d78:	6b 85       	ldd	r22, Y+11	; 0x0b
     d7a:	7c 85       	ldd	r23, Y+12	; 0x0c
     d7c:	8d 85       	ldd	r24, Y+13	; 0x0d
     d7e:	9e 85       	ldd	r25, Y+14	; 0x0e
     d80:	20 e0       	ldi	r18, 0x00	; 0
     d82:	30 e0       	ldi	r19, 0x00	; 0
     d84:	4a ef       	ldi	r20, 0xFA	; 250
     d86:	54 e4       	ldi	r21, 0x44	; 68
     d88:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d8c:	dc 01       	movw	r26, r24
     d8e:	cb 01       	movw	r24, r22
     d90:	8f 83       	std	Y+7, r24	; 0x07
     d92:	98 87       	std	Y+8, r25	; 0x08
     d94:	a9 87       	std	Y+9, r26	; 0x09
     d96:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     d98:	6f 81       	ldd	r22, Y+7	; 0x07
     d9a:	78 85       	ldd	r23, Y+8	; 0x08
     d9c:	89 85       	ldd	r24, Y+9	; 0x09
     d9e:	9a 85       	ldd	r25, Y+10	; 0x0a
     da0:	20 e0       	ldi	r18, 0x00	; 0
     da2:	30 e0       	ldi	r19, 0x00	; 0
     da4:	40 e8       	ldi	r20, 0x80	; 128
     da6:	5f e3       	ldi	r21, 0x3F	; 63
     da8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     dac:	88 23       	and	r24, r24
     dae:	2c f4       	brge	.+10     	; 0xdba <StorePassword+0x8e>
		__ticks = 1;
     db0:	81 e0       	ldi	r24, 0x01	; 1
     db2:	90 e0       	ldi	r25, 0x00	; 0
     db4:	9e 83       	std	Y+6, r25	; 0x06
     db6:	8d 83       	std	Y+5, r24	; 0x05
     db8:	3f c0       	rjmp	.+126    	; 0xe38 <StorePassword+0x10c>
	else if (__tmp > 65535)
     dba:	6f 81       	ldd	r22, Y+7	; 0x07
     dbc:	78 85       	ldd	r23, Y+8	; 0x08
     dbe:	89 85       	ldd	r24, Y+9	; 0x09
     dc0:	9a 85       	ldd	r25, Y+10	; 0x0a
     dc2:	20 e0       	ldi	r18, 0x00	; 0
     dc4:	3f ef       	ldi	r19, 0xFF	; 255
     dc6:	4f e7       	ldi	r20, 0x7F	; 127
     dc8:	57 e4       	ldi	r21, 0x47	; 71
     dca:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     dce:	18 16       	cp	r1, r24
     dd0:	4c f5       	brge	.+82     	; 0xe24 <StorePassword+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     dd2:	6b 85       	ldd	r22, Y+11	; 0x0b
     dd4:	7c 85       	ldd	r23, Y+12	; 0x0c
     dd6:	8d 85       	ldd	r24, Y+13	; 0x0d
     dd8:	9e 85       	ldd	r25, Y+14	; 0x0e
     dda:	20 e0       	ldi	r18, 0x00	; 0
     ddc:	30 e0       	ldi	r19, 0x00	; 0
     dde:	40 e2       	ldi	r20, 0x20	; 32
     de0:	51 e4       	ldi	r21, 0x41	; 65
     de2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     de6:	dc 01       	movw	r26, r24
     de8:	cb 01       	movw	r24, r22
     dea:	bc 01       	movw	r22, r24
     dec:	cd 01       	movw	r24, r26
     dee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     df2:	dc 01       	movw	r26, r24
     df4:	cb 01       	movw	r24, r22
     df6:	9e 83       	std	Y+6, r25	; 0x06
     df8:	8d 83       	std	Y+5, r24	; 0x05
     dfa:	0f c0       	rjmp	.+30     	; 0xe1a <StorePassword+0xee>
     dfc:	88 ec       	ldi	r24, 0xC8	; 200
     dfe:	90 e0       	ldi	r25, 0x00	; 0
     e00:	9c 83       	std	Y+4, r25	; 0x04
     e02:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     e04:	8b 81       	ldd	r24, Y+3	; 0x03
     e06:	9c 81       	ldd	r25, Y+4	; 0x04
     e08:	01 97       	sbiw	r24, 0x01	; 1
     e0a:	f1 f7       	brne	.-4      	; 0xe08 <StorePassword+0xdc>
     e0c:	9c 83       	std	Y+4, r25	; 0x04
     e0e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e10:	8d 81       	ldd	r24, Y+5	; 0x05
     e12:	9e 81       	ldd	r25, Y+6	; 0x06
     e14:	01 97       	sbiw	r24, 0x01	; 1
     e16:	9e 83       	std	Y+6, r25	; 0x06
     e18:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e1a:	8d 81       	ldd	r24, Y+5	; 0x05
     e1c:	9e 81       	ldd	r25, Y+6	; 0x06
     e1e:	00 97       	sbiw	r24, 0x00	; 0
     e20:	69 f7       	brne	.-38     	; 0xdfc <StorePassword+0xd0>
     e22:	14 c0       	rjmp	.+40     	; 0xe4c <StorePassword+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     e24:	6f 81       	ldd	r22, Y+7	; 0x07
     e26:	78 85       	ldd	r23, Y+8	; 0x08
     e28:	89 85       	ldd	r24, Y+9	; 0x09
     e2a:	9a 85       	ldd	r25, Y+10	; 0x0a
     e2c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e30:	dc 01       	movw	r26, r24
     e32:	cb 01       	movw	r24, r22
     e34:	9e 83       	std	Y+6, r25	; 0x06
     e36:	8d 83       	std	Y+5, r24	; 0x05
     e38:	8d 81       	ldd	r24, Y+5	; 0x05
     e3a:	9e 81       	ldd	r25, Y+6	; 0x06
     e3c:	9a 83       	std	Y+2, r25	; 0x02
     e3e:	89 83       	std	Y+1, r24	; 0x01
     e40:	89 81       	ldd	r24, Y+1	; 0x01
     e42:	9a 81       	ldd	r25, Y+2	; 0x02
     e44:	01 97       	sbiw	r24, 0x01	; 1
     e46:	f1 f7       	brne	.-4      	; 0xe44 <StorePassword+0x118>
     e48:	9a 83       	std	Y+2, r25	; 0x02
     e4a:	89 83       	std	Y+1, r24	; 0x01

void StorePassword (uint8 *StorePass_Ptr)
{
	uint8 i;

	for (i=0 ; i<ArrSize ; i++ )
     e4c:	8f 85       	ldd	r24, Y+15	; 0x0f
     e4e:	8f 5f       	subi	r24, 0xFF	; 255
     e50:	8f 87       	std	Y+15, r24	; 0x0f
     e52:	8f 85       	ldd	r24, Y+15	; 0x0f
     e54:	85 30       	cpi	r24, 0x05	; 5
     e56:	08 f4       	brcc	.+2      	; 0xe5a <StorePassword+0x12e>
     e58:	77 cf       	rjmp	.-274    	; 0xd48 <StorePassword+0x1c>
	{
		EEPROM_writeByte( i , StorePass_Ptr[i]);
		_delay_ms(10);
	}
}
     e5a:	61 96       	adiw	r28, 0x11	; 17
     e5c:	0f b6       	in	r0, 0x3f	; 63
     e5e:	f8 94       	cli
     e60:	de bf       	out	0x3e, r29	; 62
     e62:	0f be       	out	0x3f, r0	; 63
     e64:	cd bf       	out	0x3d, r28	; 61
     e66:	cf 91       	pop	r28
     e68:	df 91       	pop	r29
     e6a:	08 95       	ret

00000e6c <ReadPassword>:
/*
 * Description: Function to Read The Password from EEPROM
 */

void ReadPassword (uint8 *StorePass_Ptr)
{
     e6c:	df 93       	push	r29
     e6e:	cf 93       	push	r28
     e70:	00 d0       	rcall	.+0      	; 0xe72 <ReadPassword+0x6>
     e72:	0f 92       	push	r0
     e74:	cd b7       	in	r28, 0x3d	; 61
     e76:	de b7       	in	r29, 0x3e	; 62
     e78:	9b 83       	std	Y+3, r25	; 0x03
     e7a:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i;

	for (i=0 ; i<ArrSize ; i++ )
     e7c:	19 82       	std	Y+1, r1	; 0x01
     e7e:	11 c0       	rjmp	.+34     	; 0xea2 <ReadPassword+0x36>
	{
		EEPROM_readByte( i, &StorePass_Ptr[i]);
     e80:	89 81       	ldd	r24, Y+1	; 0x01
     e82:	48 2f       	mov	r20, r24
     e84:	50 e0       	ldi	r21, 0x00	; 0
     e86:	89 81       	ldd	r24, Y+1	; 0x01
     e88:	28 2f       	mov	r18, r24
     e8a:	30 e0       	ldi	r19, 0x00	; 0
     e8c:	8a 81       	ldd	r24, Y+2	; 0x02
     e8e:	9b 81       	ldd	r25, Y+3	; 0x03
     e90:	28 0f       	add	r18, r24
     e92:	39 1f       	adc	r19, r25
     e94:	ca 01       	movw	r24, r20
     e96:	b9 01       	movw	r22, r18
     e98:	0e 94 be 09 	call	0x137c	; 0x137c <EEPROM_readByte>

void ReadPassword (uint8 *StorePass_Ptr)
{
	uint8 i;

	for (i=0 ; i<ArrSize ; i++ )
     e9c:	89 81       	ldd	r24, Y+1	; 0x01
     e9e:	8f 5f       	subi	r24, 0xFF	; 255
     ea0:	89 83       	std	Y+1, r24	; 0x01
     ea2:	89 81       	ldd	r24, Y+1	; 0x01
     ea4:	85 30       	cpi	r24, 0x05	; 5
     ea6:	60 f3       	brcs	.-40     	; 0xe80 <ReadPassword+0x14>
	{
		EEPROM_readByte( i, &StorePass_Ptr[i]);
	}
}
     ea8:	0f 90       	pop	r0
     eaa:	0f 90       	pop	r0
     eac:	0f 90       	pop	r0
     eae:	cf 91       	pop	r28
     eb0:	df 91       	pop	r29
     eb2:	08 95       	ret

00000eb4 <PasswordCompareStore>:
 * 2 : Choose one of Two Password
 * 3 : Call StorePassword Function to Store The Chosen Password in The EEPROM
 */

uint8 PasswordCompareStore (uint8  PasswordSize , uint8 * Password1 , uint8 * Password2 )
{
     eb4:	df 93       	push	r29
     eb6:	cf 93       	push	r28
     eb8:	cd b7       	in	r28, 0x3d	; 61
     eba:	de b7       	in	r29, 0x3e	; 62
     ebc:	27 97       	sbiw	r28, 0x07	; 7
     ebe:	0f b6       	in	r0, 0x3f	; 63
     ec0:	f8 94       	cli
     ec2:	de bf       	out	0x3e, r29	; 62
     ec4:	0f be       	out	0x3f, r0	; 63
     ec6:	cd bf       	out	0x3d, r28	; 61
     ec8:	8a 83       	std	Y+2, r24	; 0x02
     eca:	7c 83       	std	Y+4, r23	; 0x04
     ecc:	6b 83       	std	Y+3, r22	; 0x03
     ece:	5e 83       	std	Y+6, r21	; 0x06
     ed0:	4d 83       	std	Y+5, r20	; 0x05
	uint8 i = 0;
     ed2:	19 82       	std	Y+1, r1	; 0x01

	for ( i=0; i<ArrSize ; i++ )
     ed4:	19 82       	std	Y+1, r1	; 0x01
     ed6:	1a c0       	rjmp	.+52     	; 0xf0c <PasswordCompareStore+0x58>
	{
		if (Password1 [i] != Password2[i])
     ed8:	89 81       	ldd	r24, Y+1	; 0x01
     eda:	28 2f       	mov	r18, r24
     edc:	30 e0       	ldi	r19, 0x00	; 0
     ede:	8b 81       	ldd	r24, Y+3	; 0x03
     ee0:	9c 81       	ldd	r25, Y+4	; 0x04
     ee2:	fc 01       	movw	r30, r24
     ee4:	e2 0f       	add	r30, r18
     ee6:	f3 1f       	adc	r31, r19
     ee8:	40 81       	ld	r20, Z
     eea:	89 81       	ldd	r24, Y+1	; 0x01
     eec:	28 2f       	mov	r18, r24
     eee:	30 e0       	ldi	r19, 0x00	; 0
     ef0:	8d 81       	ldd	r24, Y+5	; 0x05
     ef2:	9e 81       	ldd	r25, Y+6	; 0x06
     ef4:	fc 01       	movw	r30, r24
     ef6:	e2 0f       	add	r30, r18
     ef8:	f3 1f       	adc	r31, r19
     efa:	80 81       	ld	r24, Z
     efc:	48 17       	cp	r20, r24
     efe:	19 f0       	breq	.+6      	; 0xf06 <PasswordCompareStore+0x52>
		{
			return NewPasswordNotMatch;
     f00:	83 e1       	ldi	r24, 0x13	; 19
     f02:	8f 83       	std	Y+7, r24	; 0x07
     f04:	0c c0       	rjmp	.+24     	; 0xf1e <PasswordCompareStore+0x6a>

uint8 PasswordCompareStore (uint8  PasswordSize , uint8 * Password1 , uint8 * Password2 )
{
	uint8 i = 0;

	for ( i=0; i<ArrSize ; i++ )
     f06:	89 81       	ldd	r24, Y+1	; 0x01
     f08:	8f 5f       	subi	r24, 0xFF	; 255
     f0a:	89 83       	std	Y+1, r24	; 0x01
     f0c:	89 81       	ldd	r24, Y+1	; 0x01
     f0e:	85 30       	cpi	r24, 0x05	; 5
     f10:	18 f3       	brcs	.-58     	; 0xed8 <PasswordCompareStore+0x24>
		if (Password1 [i] != Password2[i])
		{
			return NewPasswordNotMatch;
		}
	}
	StorePassword( Password1);
     f12:	8b 81       	ldd	r24, Y+3	; 0x03
     f14:	9c 81       	ldd	r25, Y+4	; 0x04
     f16:	0e 94 96 06 	call	0xd2c	; 0xd2c <StorePassword>

	return NewPasswordMatch;
     f1a:	82 e1       	ldi	r24, 0x12	; 18
     f1c:	8f 83       	std	Y+7, r24	; 0x07
     f1e:	8f 81       	ldd	r24, Y+7	; 0x07
}
     f20:	27 96       	adiw	r28, 0x07	; 7
     f22:	0f b6       	in	r0, 0x3f	; 63
     f24:	f8 94       	cli
     f26:	de bf       	out	0x3e, r29	; 62
     f28:	0f be       	out	0x3f, r0	; 63
     f2a:	cd bf       	out	0x3d, r28	; 61
     f2c:	cf 91       	pop	r28
     f2e:	df 91       	pop	r29
     f30:	08 95       	ret

00000f32 <ReceiveNewPassword>:
 * 5 : If Password Didn't Match, Send to HMI Microcontroller value indicates that.
 * 6 : Repeat.
 */

void ReceiveNewPassword (void)
{
     f32:	0f 93       	push	r16
     f34:	1f 93       	push	r17
     f36:	df 93       	push	r29
     f38:	cf 93       	push	r28
     f3a:	cd b7       	in	r28, 0x3d	; 61
     f3c:	de b7       	in	r29, 0x3e	; 62
     f3e:	2c 97       	sbiw	r28, 0x0c	; 12
     f40:	0f b6       	in	r0, 0x3f	; 63
     f42:	f8 94       	cli
     f44:	de bf       	out	0x3e, r29	; 62
     f46:	0f be       	out	0x3f, r0	; 63
     f48:	cd bf       	out	0x3d, r28	; 61
	uint8 i,ReceivePasswordConfirm=0;
     f4a:	19 82       	std	Y+1, r1	; 0x01
	uint8 Password1[ArrSize];
	uint8 Password2[ArrSize];

	for (i= 0 ; i<ArrSize ; i++)
     f4c:	1a 82       	std	Y+2, r1	; 0x02
     f4e:	0f c0       	rjmp	.+30     	; 0xf6e <ReceiveNewPassword+0x3c>
	{
		Password1 [i] = UART_recieveByte();
     f50:	8a 81       	ldd	r24, Y+2	; 0x02
     f52:	08 2f       	mov	r16, r24
     f54:	10 e0       	ldi	r17, 0x00	; 0
     f56:	0e 94 4c 12 	call	0x2498	; 0x2498 <UART_recieveByte>
     f5a:	28 2f       	mov	r18, r24
     f5c:	ce 01       	movw	r24, r28
     f5e:	03 96       	adiw	r24, 0x03	; 3
     f60:	fc 01       	movw	r30, r24
     f62:	e0 0f       	add	r30, r16
     f64:	f1 1f       	adc	r31, r17
     f66:	20 83       	st	Z, r18
{
	uint8 i,ReceivePasswordConfirm=0;
	uint8 Password1[ArrSize];
	uint8 Password2[ArrSize];

	for (i= 0 ; i<ArrSize ; i++)
     f68:	8a 81       	ldd	r24, Y+2	; 0x02
     f6a:	8f 5f       	subi	r24, 0xFF	; 255
     f6c:	8a 83       	std	Y+2, r24	; 0x02
     f6e:	8a 81       	ldd	r24, Y+2	; 0x02
     f70:	85 30       	cpi	r24, 0x05	; 5
     f72:	70 f3       	brcs	.-36     	; 0xf50 <ReceiveNewPassword+0x1e>
	{
		Password1 [i] = UART_recieveByte();
	}

	for (i= 0 ; i<ArrSize ; i++)
     f74:	1a 82       	std	Y+2, r1	; 0x02
     f76:	0f c0       	rjmp	.+30     	; 0xf96 <ReceiveNewPassword+0x64>
	{
		Password2[i] = UART_recieveByte();
     f78:	8a 81       	ldd	r24, Y+2	; 0x02
     f7a:	08 2f       	mov	r16, r24
     f7c:	10 e0       	ldi	r17, 0x00	; 0
     f7e:	0e 94 4c 12 	call	0x2498	; 0x2498 <UART_recieveByte>
     f82:	28 2f       	mov	r18, r24
     f84:	ce 01       	movw	r24, r28
     f86:	08 96       	adiw	r24, 0x08	; 8
     f88:	fc 01       	movw	r30, r24
     f8a:	e0 0f       	add	r30, r16
     f8c:	f1 1f       	adc	r31, r17
     f8e:	20 83       	st	Z, r18
	for (i= 0 ; i<ArrSize ; i++)
	{
		Password1 [i] = UART_recieveByte();
	}

	for (i= 0 ; i<ArrSize ; i++)
     f90:	8a 81       	ldd	r24, Y+2	; 0x02
     f92:	8f 5f       	subi	r24, 0xFF	; 255
     f94:	8a 83       	std	Y+2, r24	; 0x02
     f96:	8a 81       	ldd	r24, Y+2	; 0x02
     f98:	85 30       	cpi	r24, 0x05	; 5
     f9a:	70 f3       	brcs	.-36     	; 0xf78 <ReceiveNewPassword+0x46>
	{
		Password2[i] = UART_recieveByte();
	}

	ReceivePasswordConfirm = PasswordCompareStore(ArrSize,Password1,Password2);
     f9c:	9e 01       	movw	r18, r28
     f9e:	2d 5f       	subi	r18, 0xFD	; 253
     fa0:	3f 4f       	sbci	r19, 0xFF	; 255
     fa2:	ae 01       	movw	r20, r28
     fa4:	48 5f       	subi	r20, 0xF8	; 248
     fa6:	5f 4f       	sbci	r21, 0xFF	; 255
     fa8:	85 e0       	ldi	r24, 0x05	; 5
     faa:	b9 01       	movw	r22, r18
     fac:	0e 94 5a 07 	call	0xeb4	; 0xeb4 <PasswordCompareStore>
     fb0:	89 83       	std	Y+1, r24	; 0x01

	if (ReceivePasswordConfirm == NewPasswordMatch)
     fb2:	89 81       	ldd	r24, Y+1	; 0x01
     fb4:	82 31       	cpi	r24, 0x12	; 18
     fb6:	21 f4       	brne	.+8      	; 0xfc0 <ReceiveNewPassword+0x8e>
	{
		UART_sendByte(NewPasswordMatch);
     fb8:	82 e1       	ldi	r24, 0x12	; 18
     fba:	0e 94 35 12 	call	0x246a	; 0x246a <UART_sendByte>
     fbe:	0b c0       	rjmp	.+22     	; 0xfd6 <ReceiveNewPassword+0xa4>
	}
	else if (ReceivePasswordConfirm == NewPasswordNotMatch)
     fc0:	89 81       	ldd	r24, Y+1	; 0x01
     fc2:	83 31       	cpi	r24, 0x13	; 19
     fc4:	41 f4       	brne	.+16     	; 0xfd6 <ReceiveNewPassword+0xa4>
	{
		UART_sendByte(NewPasswordNotMatch);
     fc6:	83 e1       	ldi	r24, 0x13	; 19
     fc8:	0e 94 35 12 	call	0x246a	; 0x246a <UART_sendByte>

		return ReceiveNewPassword_Ptr();
     fcc:	e0 91 68 00 	lds	r30, 0x0068
     fd0:	f0 91 69 00 	lds	r31, 0x0069
     fd4:	09 95       	icall
	}

}
     fd6:	2c 96       	adiw	r28, 0x0c	; 12
     fd8:	0f b6       	in	r0, 0x3f	; 63
     fda:	f8 94       	cli
     fdc:	de bf       	out	0x3e, r29	; 62
     fde:	0f be       	out	0x3f, r0	; 63
     fe0:	cd bf       	out	0x3d, r28	; 61
     fe2:	cf 91       	pop	r28
     fe4:	df 91       	pop	r29
     fe6:	1f 91       	pop	r17
     fe8:	0f 91       	pop	r16
     fea:	08 95       	ret

00000fec <PasswordCompare>:
 * 4 : If the Password didn't Match, Return value to indicate that the Password is Wrong
 * 5 : If the Password didn't Match more than 3 times, Return value to Start the Buzzer
 */

uint8 PasswordCompare (uint8  PasswordSize , uint8 * Password1 )
{
     fec:	df 93       	push	r29
     fee:	cf 93       	push	r28
     ff0:	cd b7       	in	r28, 0x3d	; 61
     ff2:	de b7       	in	r29, 0x3e	; 62
     ff4:	2a 97       	sbiw	r28, 0x0a	; 10
     ff6:	0f b6       	in	r0, 0x3f	; 63
     ff8:	f8 94       	cli
     ffa:	de bf       	out	0x3e, r29	; 62
     ffc:	0f be       	out	0x3f, r0	; 63
     ffe:	cd bf       	out	0x3d, r28	; 61
    1000:	8f 83       	std	Y+7, r24	; 0x07
    1002:	79 87       	std	Y+9, r23	; 0x09
    1004:	68 87       	std	Y+8, r22	; 0x08
	uint8 i;
	static uint8 counter=0;
	uint8 SavedPassword[ArrSize];

	ReadPassword(SavedPassword);
    1006:	ce 01       	movw	r24, r28
    1008:	02 96       	adiw	r24, 0x02	; 2
    100a:	0e 94 36 07 	call	0xe6c	; 0xe6c <ReadPassword>

	for ( i=0; i<ArrSize ; i++ )
    100e:	19 82       	std	Y+1, r1	; 0x01
    1010:	28 c0       	rjmp	.+80     	; 0x1062 <PasswordCompare+0x76>
	{
		if (SavedPassword[i] != Password1[i])
    1012:	89 81       	ldd	r24, Y+1	; 0x01
    1014:	28 2f       	mov	r18, r24
    1016:	30 e0       	ldi	r19, 0x00	; 0
    1018:	ce 01       	movw	r24, r28
    101a:	02 96       	adiw	r24, 0x02	; 2
    101c:	fc 01       	movw	r30, r24
    101e:	e2 0f       	add	r30, r18
    1020:	f3 1f       	adc	r31, r19
    1022:	40 81       	ld	r20, Z
    1024:	89 81       	ldd	r24, Y+1	; 0x01
    1026:	28 2f       	mov	r18, r24
    1028:	30 e0       	ldi	r19, 0x00	; 0
    102a:	88 85       	ldd	r24, Y+8	; 0x08
    102c:	99 85       	ldd	r25, Y+9	; 0x09
    102e:	fc 01       	movw	r30, r24
    1030:	e2 0f       	add	r30, r18
    1032:	f3 1f       	adc	r31, r19
    1034:	80 81       	ld	r24, Z
    1036:	48 17       	cp	r20, r24
    1038:	89 f0       	breq	.+34     	; 0x105c <PasswordCompare+0x70>
		{
			counter++;
    103a:	80 91 8a 00 	lds	r24, 0x008A
    103e:	8f 5f       	subi	r24, 0xFF	; 255
    1040:	80 93 8a 00 	sts	0x008A, r24
			if (counter ==3)
    1044:	80 91 8a 00 	lds	r24, 0x008A
    1048:	83 30       	cpi	r24, 0x03	; 3
    104a:	29 f4       	brne	.+10     	; 0x1056 <PasswordCompare+0x6a>
			{
				counter =0;
    104c:	10 92 8a 00 	sts	0x008A, r1

				return AlarmCheck;
    1050:	81 e1       	ldi	r24, 0x11	; 17
    1052:	8a 87       	std	Y+10, r24	; 0x0a
    1054:	0b c0       	rjmp	.+22     	; 0x106c <PasswordCompare+0x80>
			}
			return NotMatchedPassword;
    1056:	88 e0       	ldi	r24, 0x08	; 8
    1058:	8a 87       	std	Y+10, r24	; 0x0a
    105a:	08 c0       	rjmp	.+16     	; 0x106c <PasswordCompare+0x80>
	static uint8 counter=0;
	uint8 SavedPassword[ArrSize];

	ReadPassword(SavedPassword);

	for ( i=0; i<ArrSize ; i++ )
    105c:	89 81       	ldd	r24, Y+1	; 0x01
    105e:	8f 5f       	subi	r24, 0xFF	; 255
    1060:	89 83       	std	Y+1, r24	; 0x01
    1062:	89 81       	ldd	r24, Y+1	; 0x01
    1064:	85 30       	cpi	r24, 0x05	; 5
    1066:	a8 f2       	brcs	.-86     	; 0x1012 <PasswordCompare+0x26>
				return AlarmCheck;
			}
			return NotMatchedPassword;
		}
	}
	return MatchedPassword;
    1068:	89 e0       	ldi	r24, 0x09	; 9
    106a:	8a 87       	std	Y+10, r24	; 0x0a
    106c:	8a 85       	ldd	r24, Y+10	; 0x0a
}
    106e:	2a 96       	adiw	r28, 0x0a	; 10
    1070:	0f b6       	in	r0, 0x3f	; 63
    1072:	f8 94       	cli
    1074:	de bf       	out	0x3e, r29	; 62
    1076:	0f be       	out	0x3f, r0	; 63
    1078:	cd bf       	out	0x3d, r28	; 61
    107a:	cf 91       	pop	r28
    107c:	df 91       	pop	r29
    107e:	08 95       	ret

00001080 <ReceiveComparePassword>:
 * 2 : Send The Password to PasswordCompare Function
 * 3 : Returns a value that indicates weather the Password is Correct or Wrong or Alarm
 */

uint8 ReceiveComparePassword (void)
{
    1080:	0f 93       	push	r16
    1082:	1f 93       	push	r17
    1084:	df 93       	push	r29
    1086:	cf 93       	push	r28
    1088:	cd b7       	in	r28, 0x3d	; 61
    108a:	de b7       	in	r29, 0x3e	; 62
    108c:	27 97       	sbiw	r28, 0x07	; 7
    108e:	0f b6       	in	r0, 0x3f	; 63
    1090:	f8 94       	cli
    1092:	de bf       	out	0x3e, r29	; 62
    1094:	0f be       	out	0x3f, r0	; 63
    1096:	cd bf       	out	0x3d, r28	; 61
	uint8 i;
	uint8 PasswordCheck[ArrSize];
	uint8 ErrorCounter = 0;
    1098:	19 82       	std	Y+1, r1	; 0x01

	for ( i=0; i<ArrSize ; i++ )
    109a:	1a 82       	std	Y+2, r1	; 0x02
    109c:	0f c0       	rjmp	.+30     	; 0x10bc <ReceiveComparePassword+0x3c>
	{
		PasswordCheck[i] =UART_recieveByte();
    109e:	8a 81       	ldd	r24, Y+2	; 0x02
    10a0:	08 2f       	mov	r16, r24
    10a2:	10 e0       	ldi	r17, 0x00	; 0
    10a4:	0e 94 4c 12 	call	0x2498	; 0x2498 <UART_recieveByte>
    10a8:	28 2f       	mov	r18, r24
    10aa:	ce 01       	movw	r24, r28
    10ac:	03 96       	adiw	r24, 0x03	; 3
    10ae:	fc 01       	movw	r30, r24
    10b0:	e0 0f       	add	r30, r16
    10b2:	f1 1f       	adc	r31, r17
    10b4:	20 83       	st	Z, r18
{
	uint8 i;
	uint8 PasswordCheck[ArrSize];
	uint8 ErrorCounter = 0;

	for ( i=0; i<ArrSize ; i++ )
    10b6:	8a 81       	ldd	r24, Y+2	; 0x02
    10b8:	8f 5f       	subi	r24, 0xFF	; 255
    10ba:	8a 83       	std	Y+2, r24	; 0x02
    10bc:	8a 81       	ldd	r24, Y+2	; 0x02
    10be:	85 30       	cpi	r24, 0x05	; 5
    10c0:	70 f3       	brcs	.-36     	; 0x109e <ReceiveComparePassword+0x1e>
	{
		PasswordCheck[i] =UART_recieveByte();
	}
	ErrorCounter = PasswordCompare(ArrSize,PasswordCheck);
    10c2:	9e 01       	movw	r18, r28
    10c4:	2d 5f       	subi	r18, 0xFD	; 253
    10c6:	3f 4f       	sbci	r19, 0xFF	; 255
    10c8:	85 e0       	ldi	r24, 0x05	; 5
    10ca:	b9 01       	movw	r22, r18
    10cc:	0e 94 f6 07 	call	0xfec	; 0xfec <PasswordCompare>
    10d0:	89 83       	std	Y+1, r24	; 0x01

	return ErrorCounter;
    10d2:	89 81       	ldd	r24, Y+1	; 0x01
}
    10d4:	27 96       	adiw	r28, 0x07	; 7
    10d6:	0f b6       	in	r0, 0x3f	; 63
    10d8:	f8 94       	cli
    10da:	de bf       	out	0x3e, r29	; 62
    10dc:	0f be       	out	0x3f, r0	; 63
    10de:	cd bf       	out	0x3d, r28	; 61
    10e0:	cf 91       	pop	r28
    10e2:	df 91       	pop	r29
    10e4:	1f 91       	pop	r17
    10e6:	0f 91       	pop	r16
    10e8:	08 95       	ret

000010ea <OperationControl>:
 * 2 : If Password is Correct, Rotate The DC Motor Clockwise for 15 Seconds, Stop DC Motor for 3Seconds, Rotate The DC Motor Counter Clockwise for 15 Seconds
 * 3 : if Password isn't Correct more than 3 time start the Buzzer for 60 Seconds
 */

void OperationControl (void)
{
    10ea:	df 93       	push	r29
    10ec:	cf 93       	push	r28
    10ee:	cd b7       	in	r28, 0x3d	; 61
    10f0:	de b7       	in	r29, 0x3e	; 62
    10f2:	6d 97       	sbiw	r28, 0x1d	; 29
    10f4:	0f b6       	in	r0, 0x3f	; 63
    10f6:	f8 94       	cli
    10f8:	de bf       	out	0x3e, r29	; 62
    10fa:	0f be       	out	0x3f, r0	; 63
    10fc:	cd bf       	out	0x3d, r28	; 61
		 * 3 : Normal port operation, OC1A/OC1B disconnected.
		 * 4 : In case of Timer1, Choose Channel A or B
		 * 5 : Initial value = 0
		 * 6 : Final value = 255
		*/
	Timer_Config Motor_timer_configc = { CTC, T_F_CPU_1024, NormalMatchMode, 'A', 0, 255};
    10fe:	ce 01       	movw	r24, r28
    1100:	02 96       	adiw	r24, 0x02	; 2
    1102:	9d 8b       	std	Y+21, r25	; 0x15
    1104:	8c 8b       	std	Y+20, r24	; 0x14
    1106:	ea e7       	ldi	r30, 0x7A	; 122
    1108:	f0 e0       	ldi	r31, 0x00	; 0
    110a:	ff 8b       	std	Y+23, r31	; 0x17
    110c:	ee 8b       	std	Y+22, r30	; 0x16
    110e:	f9 e0       	ldi	r31, 0x09	; 9
    1110:	f8 8f       	std	Y+24, r31	; 0x18
    1112:	ee 89       	ldd	r30, Y+22	; 0x16
    1114:	ff 89       	ldd	r31, Y+23	; 0x17
    1116:	00 80       	ld	r0, Z
    1118:	8e 89       	ldd	r24, Y+22	; 0x16
    111a:	9f 89       	ldd	r25, Y+23	; 0x17
    111c:	01 96       	adiw	r24, 0x01	; 1
    111e:	9f 8b       	std	Y+23, r25	; 0x17
    1120:	8e 8b       	std	Y+22, r24	; 0x16
    1122:	ec 89       	ldd	r30, Y+20	; 0x14
    1124:	fd 89       	ldd	r31, Y+21	; 0x15
    1126:	00 82       	st	Z, r0
    1128:	8c 89       	ldd	r24, Y+20	; 0x14
    112a:	9d 89       	ldd	r25, Y+21	; 0x15
    112c:	01 96       	adiw	r24, 0x01	; 1
    112e:	9d 8b       	std	Y+21, r25	; 0x15
    1130:	8c 8b       	std	Y+20, r24	; 0x14
    1132:	98 8d       	ldd	r25, Y+24	; 0x18
    1134:	91 50       	subi	r25, 0x01	; 1
    1136:	98 8f       	std	Y+24, r25	; 0x18
    1138:	e8 8d       	ldd	r30, Y+24	; 0x18
    113a:	ee 23       	and	r30, r30
    113c:	51 f7       	brne	.-44     	; 0x1112 <OperationControl+0x28>
		 * 3 : Set OC1A/OC1B on compare match (Set output to high level)
		 * 4 : Select Channel A
		 * 5 : Set initial timer value to zero
		 * 6 : Compare value = 62500
	*/
	Timer_Config Buzzer_timer_config = { CTC, T_F_CPU_256, SetCompareMatch, 'A', 0, 62500};
    113e:	ce 01       	movw	r24, r28
    1140:	0b 96       	adiw	r24, 0x0b	; 11
    1142:	9a 8f       	std	Y+26, r25	; 0x1a
    1144:	89 8f       	std	Y+25, r24	; 0x19
    1146:	e1 e7       	ldi	r30, 0x71	; 113
    1148:	f0 e0       	ldi	r31, 0x00	; 0
    114a:	fc 8f       	std	Y+28, r31	; 0x1c
    114c:	eb 8f       	std	Y+27, r30	; 0x1b
    114e:	f9 e0       	ldi	r31, 0x09	; 9
    1150:	fd 8f       	std	Y+29, r31	; 0x1d
    1152:	eb 8d       	ldd	r30, Y+27	; 0x1b
    1154:	fc 8d       	ldd	r31, Y+28	; 0x1c
    1156:	00 80       	ld	r0, Z
    1158:	8b 8d       	ldd	r24, Y+27	; 0x1b
    115a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    115c:	01 96       	adiw	r24, 0x01	; 1
    115e:	9c 8f       	std	Y+28, r25	; 0x1c
    1160:	8b 8f       	std	Y+27, r24	; 0x1b
    1162:	e9 8d       	ldd	r30, Y+25	; 0x19
    1164:	fa 8d       	ldd	r31, Y+26	; 0x1a
    1166:	00 82       	st	Z, r0
    1168:	89 8d       	ldd	r24, Y+25	; 0x19
    116a:	9a 8d       	ldd	r25, Y+26	; 0x1a
    116c:	01 96       	adiw	r24, 0x01	; 1
    116e:	9a 8f       	std	Y+26, r25	; 0x1a
    1170:	89 8f       	std	Y+25, r24	; 0x19
    1172:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1174:	91 50       	subi	r25, 0x01	; 1
    1176:	9d 8f       	std	Y+29, r25	; 0x1d
    1178:	ed 8d       	ldd	r30, Y+29	; 0x1d
    117a:	ee 23       	and	r30, r30
    117c:	51 f7       	brne	.-44     	; 0x1152 <OperationControl+0x68>

	sei();		/*Enable Interrupts*/
    117e:	78 94       	sei

	ReceivePasswordCheck=ReceiveComparePassword();
    1180:	0e 94 40 08 	call	0x1080	; 0x1080 <ReceiveComparePassword>
    1184:	89 83       	std	Y+1, r24	; 0x01

	if(ReceivePasswordCheck == MatchedPassword)
    1186:	89 81       	ldd	r24, Y+1	; 0x01
    1188:	89 30       	cpi	r24, 0x09	; 9
    118a:	51 f5       	brne	.+84     	; 0x11e0 <OperationControl+0xf6>
	{
		UART_sendByte(ReceivePasswordCheck);
    118c:	89 81       	ldd	r24, Y+1	; 0x01
    118e:	0e 94 35 12 	call	0x246a	; 0x246a <UART_sendByte>

		/*DC Motor Timer0 Call back*/
		Timer0_setCallBack(DCMotor_Processing);
    1192:	8a e3       	ldi	r24, 0x3A	; 58
    1194:	96 e0       	ldi	r25, 0x06	; 6
    1196:	0e 94 87 10 	call	0x210e	; 0x210e <Timer0_setCallBack>

		/*
		 * Timer Type : Timer0
		 * DC Motor Timer0 initialization
		 */
		Timer_Init(Timer0,&Motor_timer_configc);
    119a:	9e 01       	movw	r18, r28
    119c:	2e 5f       	subi	r18, 0xFE	; 254
    119e:	3f 4f       	sbci	r19, 0xFF	; 255
    11a0:	80 e0       	ldi	r24, 0x00	; 0
    11a2:	b9 01       	movw	r22, r18
    11a4:	0e 94 c1 0e 	call	0x1d82	; 0x1d82 <Timer_Init>

		DcMotor_Rotate(Motor_CW);
    11a8:	81 e0       	ldi	r24, 0x01	; 1
    11aa:	0e 94 be 05 	call	0xb7c	; 0xb7c <DcMotor_Rotate>
		while (DCMotor_Timer_Flags == 0);
    11ae:	80 91 89 00 	lds	r24, 0x0089
    11b2:	88 23       	and	r24, r24
    11b4:	e1 f3       	breq	.-8      	; 0x11ae <OperationControl+0xc4>

		DcMotor_Rotate(Motor_STOP);
    11b6:	80 e0       	ldi	r24, 0x00	; 0
    11b8:	0e 94 be 05 	call	0xb7c	; 0xb7c <DcMotor_Rotate>
		while (DCMotor_Timer_Flags == 1);
    11bc:	80 91 89 00 	lds	r24, 0x0089
    11c0:	81 30       	cpi	r24, 0x01	; 1
    11c2:	e1 f3       	breq	.-8      	; 0x11bc <OperationControl+0xd2>

		DcMotor_Rotate(Motor_C_CW);
    11c4:	82 e0       	ldi	r24, 0x02	; 2
    11c6:	0e 94 be 05 	call	0xb7c	; 0xb7c <DcMotor_Rotate>
		while (DCMotor_Timer_Flags == 2);
    11ca:	80 91 89 00 	lds	r24, 0x0089
    11ce:	82 30       	cpi	r24, 0x02	; 2
    11d0:	e1 f3       	breq	.-8      	; 0x11ca <OperationControl+0xe0>

		DcMotor_Rotate(Motor_STOP);
    11d2:	80 e0       	ldi	r24, 0x00	; 0
    11d4:	0e 94 be 05 	call	0xb7c	; 0xb7c <DcMotor_Rotate>

		/*DC Motor Timer0 deactivate*/
		Timer_DeInit(Timer0);
    11d8:	80 e0       	ldi	r24, 0x00	; 0
    11da:	0e 94 bd 10 	call	0x217a	; 0x217a <Timer_DeInit>
    11de:	26 c0       	rjmp	.+76     	; 0x122c <OperationControl+0x142>

		return;
	}
	else if (ReceivePasswordCheck == NotMatchedPassword)
    11e0:	89 81       	ldd	r24, Y+1	; 0x01
    11e2:	88 30       	cpi	r24, 0x08	; 8
    11e4:	21 f4       	brne	.+8      	; 0x11ee <OperationControl+0x104>
	{
		UART_sendByte(ReceivePasswordCheck);
    11e6:	89 81       	ldd	r24, Y+1	; 0x01
    11e8:	0e 94 35 12 	call	0x246a	; 0x246a <UART_sendByte>
    11ec:	1f c0       	rjmp	.+62     	; 0x122c <OperationControl+0x142>

		return;
	}
	else if (ReceivePasswordCheck== AlarmCheck)
    11ee:	89 81       	ldd	r24, Y+1	; 0x01
    11f0:	81 31       	cpi	r24, 0x11	; 17
    11f2:	d9 f4       	brne	.+54     	; 0x122a <OperationControl+0x140>
	{
		UART_sendByte(ReceivePasswordCheck);
    11f4:	89 81       	ldd	r24, Y+1	; 0x01
    11f6:	0e 94 35 12 	call	0x246a	; 0x246a <UART_sendByte>

		/*Buzzer Timer1 Call back*/
		Timer1_setCallBack(Buzzer_Processing_Time);
    11fa:	8e e6       	ldi	r24, 0x6E	; 110
    11fc:	96 e0       	ldi	r25, 0x06	; 6
    11fe:	0e 94 99 10 	call	0x2132	; 0x2132 <Timer1_setCallBack>

		/*
		 * Timer Type : Timer1
		 * Buzzer Timer1 initialization
		 */
		Timer_Init(Timer1,&Buzzer_timer_config);
    1202:	9e 01       	movw	r18, r28
    1204:	25 5f       	subi	r18, 0xF5	; 245
    1206:	3f 4f       	sbci	r19, 0xFF	; 255
    1208:	81 e0       	ldi	r24, 0x01	; 1
    120a:	b9 01       	movw	r22, r18
    120c:	0e 94 c1 0e 	call	0x1d82	; 0x1d82 <Timer_Init>

		Buzzer_Start();
    1210:	0e 94 65 09 	call	0x12ca	; 0x12ca <Buzzer_Start>
		while ( Buzzer_Timer_Flag != 1 );
    1214:	80 91 88 00 	lds	r24, 0x0088
    1218:	81 30       	cpi	r24, 0x01	; 1
    121a:	e1 f7       	brne	.-8      	; 0x1214 <OperationControl+0x12a>
		Buzzer_Stop();
    121c:	0e 94 71 09 	call	0x12e2	; 0x12e2 <Buzzer_Stop>

		/*Buzzer Timer1 deactivate*/
		Timer_DeInit(Timer1);
    1220:	81 e0       	ldi	r24, 0x01	; 1
    1222:	0e 94 bd 10 	call	0x217a	; 0x217a <Timer_DeInit>
		Buzzer_Timer_Flag =0;
    1226:	10 92 88 00 	sts	0x0088, r1
	}
	cli();		/*Disable Interrupts*/
    122a:	f8 94       	cli
}
    122c:	6d 96       	adiw	r28, 0x1d	; 29
    122e:	0f b6       	in	r0, 0x3f	; 63
    1230:	f8 94       	cli
    1232:	de bf       	out	0x3e, r29	; 62
    1234:	0f be       	out	0x3f, r0	; 63
    1236:	cd bf       	out	0x3d, r28	; 61
    1238:	cf 91       	pop	r28
    123a:	df 91       	pop	r29
    123c:	08 95       	ret

0000123e <ChangePasswordOperation>:
 * 3: if Password is Correct, Create new Password
 * 4: if Password isn't Correct, Do nothing
 */

void ChangePasswordOperation (void)
{
    123e:	df 93       	push	r29
    1240:	cf 93       	push	r28
    1242:	0f 92       	push	r0
    1244:	cd b7       	in	r28, 0x3d	; 61
    1246:	de b7       	in	r29, 0x3e	; 62
	uint8 ChangePassowrdCheck ;


	ChangePassowrdCheck = ReceiveComparePassword();
    1248:	0e 94 40 08 	call	0x1080	; 0x1080 <ReceiveComparePassword>
    124c:	89 83       	std	Y+1, r24	; 0x01
	if (ChangePassowrdCheck ==MatchedPassword)
    124e:	89 81       	ldd	r24, Y+1	; 0x01
    1250:	89 30       	cpi	r24, 0x09	; 9
    1252:	31 f4       	brne	.+12     	; 0x1260 <ChangePasswordOperation+0x22>
	{
		UART_sendByte(ChangePassowrdCheck);
    1254:	89 81       	ldd	r24, Y+1	; 0x01
    1256:	0e 94 35 12 	call	0x246a	; 0x246a <UART_sendByte>
		ReceiveNewPassword();
    125a:	0e 94 99 07 	call	0xf32	; 0xf32 <ReceiveNewPassword>
    125e:	0d c0       	rjmp	.+26     	; 0x127a <ChangePasswordOperation+0x3c>

	}
	else if (ChangePassowrdCheck == NotMatchedPassword)
    1260:	89 81       	ldd	r24, Y+1	; 0x01
    1262:	88 30       	cpi	r24, 0x08	; 8
    1264:	21 f4       	brne	.+8      	; 0x126e <ChangePasswordOperation+0x30>
	{
		UART_sendByte(ChangePassowrdCheck);
    1266:	89 81       	ldd	r24, Y+1	; 0x01
    1268:	0e 94 35 12 	call	0x246a	; 0x246a <UART_sendByte>
    126c:	06 c0       	rjmp	.+12     	; 0x127a <ChangePasswordOperation+0x3c>

		return;
	}
	else if (ChangePassowrdCheck == AlarmCheck)
    126e:	89 81       	ldd	r24, Y+1	; 0x01
    1270:	81 31       	cpi	r24, 0x11	; 17
    1272:	19 f4       	brne	.+6      	; 0x127a <ChangePasswordOperation+0x3c>
	{
		UART_sendByte(ChangePassowrdCheck);
    1274:	89 81       	ldd	r24, Y+1	; 0x01
    1276:	0e 94 35 12 	call	0x246a	; 0x246a <UART_sendByte>
		return;
	}
}
    127a:	0f 90       	pop	r0
    127c:	cf 91       	pop	r28
    127e:	df 91       	pop	r29
    1280:	08 95       	ret

00001282 <MenuOperationControl>:
 * 3 : if MenuChangingPassword was sent, Call ChangePasswordOperation Function
 */


void MenuOperationControl (void)
{
    1282:	df 93       	push	r29
    1284:	cf 93       	push	r28
    1286:	0f 92       	push	r0
    1288:	cd b7       	in	r28, 0x3d	; 61
    128a:	de b7       	in	r29, 0x3e	; 62
	uint8 MainMenuState=0;
    128c:	19 82       	std	Y+1, r1	; 0x01

	MainMenuState = UART_recieveByte();
    128e:	0e 94 4c 12 	call	0x2498	; 0x2498 <UART_recieveByte>
    1292:	89 83       	std	Y+1, r24	; 0x01

	if (MainMenuState == MenuDoorStatus)
    1294:	89 81       	ldd	r24, Y+1	; 0x01
    1296:	87 30       	cpi	r24, 0x07	; 7
    1298:	19 f4       	brne	.+6      	; 0x12a0 <MenuOperationControl+0x1e>
	{
		OperationControl();
    129a:	0e 94 75 08 	call	0x10ea	; 0x10ea <OperationControl>
    129e:	05 c0       	rjmp	.+10     	; 0x12aa <MenuOperationControl+0x28>


	}
	else if (MainMenuState == MenuChangingPassword)
    12a0:	89 81       	ldd	r24, Y+1	; 0x01
    12a2:	86 30       	cpi	r24, 0x06	; 6
    12a4:	11 f4       	brne	.+4      	; 0x12aa <MenuOperationControl+0x28>
	{
		ChangePasswordOperation();
    12a6:	0e 94 1f 09 	call	0x123e	; 0x123e <ChangePasswordOperation>

	}
}
    12aa:	0f 90       	pop	r0
    12ac:	cf 91       	pop	r28
    12ae:	df 91       	pop	r29
    12b0:	08 95       	ret

000012b2 <Buzzer_Init>:
 *      Author: The Bayoumi
 */
#include "gpio.h"

void Buzzer_Init (void)
{
    12b2:	df 93       	push	r29
    12b4:	cf 93       	push	r28
    12b6:	cd b7       	in	r28, 0x3d	; 61
    12b8:	de b7       	in	r29, 0x3e	; 62
	GPIO_setupPinDirection(PORTC_ID, PIN2_ID, PIN_OUTPUT);
    12ba:	82 e0       	ldi	r24, 0x02	; 2
    12bc:	62 e0       	ldi	r22, 0x02	; 2
    12be:	41 e0       	ldi	r20, 0x01	; 1
    12c0:	0e 94 1e 0a 	call	0x143c	; 0x143c <GPIO_setupPinDirection>
	return;
}
    12c4:	cf 91       	pop	r28
    12c6:	df 91       	pop	r29
    12c8:	08 95       	ret

000012ca <Buzzer_Start>:

void Buzzer_Start (void)
{
    12ca:	df 93       	push	r29
    12cc:	cf 93       	push	r28
    12ce:	cd b7       	in	r28, 0x3d	; 61
    12d0:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(PORTC_ID, PIN2_ID, LOGIC_HIGH);
    12d2:	82 e0       	ldi	r24, 0x02	; 2
    12d4:	62 e0       	ldi	r22, 0x02	; 2
    12d6:	41 e0       	ldi	r20, 0x01	; 1
    12d8:	0e 94 09 0b 	call	0x1612	; 0x1612 <GPIO_writePin>

	return;
}
    12dc:	cf 91       	pop	r28
    12de:	df 91       	pop	r29
    12e0:	08 95       	ret

000012e2 <Buzzer_Stop>:

void Buzzer_Stop (void)
{
    12e2:	df 93       	push	r29
    12e4:	cf 93       	push	r28
    12e6:	cd b7       	in	r28, 0x3d	; 61
    12e8:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(PORTC_ID, PIN2_ID, LOGIC_LOW);
    12ea:	82 e0       	ldi	r24, 0x02	; 2
    12ec:	62 e0       	ldi	r22, 0x02	; 2
    12ee:	40 e0       	ldi	r20, 0x00	; 0
    12f0:	0e 94 09 0b 	call	0x1612	; 0x1612 <GPIO_writePin>

	return;
}
    12f4:	cf 91       	pop	r28
    12f6:	df 91       	pop	r29
    12f8:	08 95       	ret

000012fa <EEPROM_writeByte>:
 *******************************************************************************/
#include "external_eeprom.h"
#include "twi.h"

uint8 EEPROM_writeByte(uint16 u16addr, uint8 u8data)
{
    12fa:	df 93       	push	r29
    12fc:	cf 93       	push	r28
    12fe:	00 d0       	rcall	.+0      	; 0x1300 <EEPROM_writeByte+0x6>
    1300:	00 d0       	rcall	.+0      	; 0x1302 <EEPROM_writeByte+0x8>
    1302:	cd b7       	in	r28, 0x3d	; 61
    1304:	de b7       	in	r29, 0x3e	; 62
    1306:	9a 83       	std	Y+2, r25	; 0x02
    1308:	89 83       	std	Y+1, r24	; 0x01
    130a:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
    130c:	0e 94 27 11 	call	0x224e	; 0x224e <TWI_start>
    if (TWI_getStatus() != TWI_START)
    1310:	0e 94 7f 11 	call	0x22fe	; 0x22fe <TWI_getStatus>
    1314:	88 30       	cpi	r24, 0x08	; 8
    1316:	11 f0       	breq	.+4      	; 0x131c <EEPROM_writeByte+0x22>
        return ERROR;
    1318:	1c 82       	std	Y+4, r1	; 0x04
    131a:	28 c0       	rjmp	.+80     	; 0x136c <EEPROM_writeByte+0x72>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_writeByte((uint8)(0xA0 | ((u16addr & 0x0700)>>7)));
    131c:	89 81       	ldd	r24, Y+1	; 0x01
    131e:	9a 81       	ldd	r25, Y+2	; 0x02
    1320:	80 70       	andi	r24, 0x00	; 0
    1322:	97 70       	andi	r25, 0x07	; 7
    1324:	88 0f       	add	r24, r24
    1326:	89 2f       	mov	r24, r25
    1328:	88 1f       	adc	r24, r24
    132a:	99 0b       	sbc	r25, r25
    132c:	91 95       	neg	r25
    132e:	80 6a       	ori	r24, 0xA0	; 160
    1330:	0e 94 42 11 	call	0x2284	; 0x2284 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
    1334:	0e 94 7f 11 	call	0x22fe	; 0x22fe <TWI_getStatus>
    1338:	88 31       	cpi	r24, 0x18	; 24
    133a:	11 f0       	breq	.+4      	; 0x1340 <EEPROM_writeByte+0x46>
        return ERROR; 
    133c:	1c 82       	std	Y+4, r1	; 0x04
    133e:	16 c0       	rjmp	.+44     	; 0x136c <EEPROM_writeByte+0x72>
		 
    /* Send the required memory location address */
    TWI_writeByte((uint8)(u16addr));
    1340:	89 81       	ldd	r24, Y+1	; 0x01
    1342:	0e 94 42 11 	call	0x2284	; 0x2284 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    1346:	0e 94 7f 11 	call	0x22fe	; 0x22fe <TWI_getStatus>
    134a:	88 32       	cpi	r24, 0x28	; 40
    134c:	11 f0       	breq	.+4      	; 0x1352 <EEPROM_writeByte+0x58>
        return ERROR;
    134e:	1c 82       	std	Y+4, r1	; 0x04
    1350:	0d c0       	rjmp	.+26     	; 0x136c <EEPROM_writeByte+0x72>
		
    /* write byte to eeprom */
    TWI_writeByte(u8data);
    1352:	8b 81       	ldd	r24, Y+3	; 0x03
    1354:	0e 94 42 11 	call	0x2284	; 0x2284 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    1358:	0e 94 7f 11 	call	0x22fe	; 0x22fe <TWI_getStatus>
    135c:	88 32       	cpi	r24, 0x28	; 40
    135e:	11 f0       	breq	.+4      	; 0x1364 <EEPROM_writeByte+0x6a>
        return ERROR;
    1360:	1c 82       	std	Y+4, r1	; 0x04
    1362:	04 c0       	rjmp	.+8      	; 0x136c <EEPROM_writeByte+0x72>

    /* Send the Stop Bit */
    TWI_stop();
    1364:	0e 94 37 11 	call	0x226e	; 0x226e <TWI_stop>
	
    return SUCCESS;
    1368:	81 e0       	ldi	r24, 0x01	; 1
    136a:	8c 83       	std	Y+4, r24	; 0x04
    136c:	8c 81       	ldd	r24, Y+4	; 0x04
}
    136e:	0f 90       	pop	r0
    1370:	0f 90       	pop	r0
    1372:	0f 90       	pop	r0
    1374:	0f 90       	pop	r0
    1376:	cf 91       	pop	r28
    1378:	df 91       	pop	r29
    137a:	08 95       	ret

0000137c <EEPROM_readByte>:

uint8 EEPROM_readByte(uint16 u16addr, uint8 *u8data)
{
    137c:	df 93       	push	r29
    137e:	cf 93       	push	r28
    1380:	00 d0       	rcall	.+0      	; 0x1382 <EEPROM_readByte+0x6>
    1382:	00 d0       	rcall	.+0      	; 0x1384 <EEPROM_readByte+0x8>
    1384:	0f 92       	push	r0
    1386:	cd b7       	in	r28, 0x3d	; 61
    1388:	de b7       	in	r29, 0x3e	; 62
    138a:	9a 83       	std	Y+2, r25	; 0x02
    138c:	89 83       	std	Y+1, r24	; 0x01
    138e:	7c 83       	std	Y+4, r23	; 0x04
    1390:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
    1392:	0e 94 27 11 	call	0x224e	; 0x224e <TWI_start>
    if (TWI_getStatus() != TWI_START)
    1396:	0e 94 7f 11 	call	0x22fe	; 0x22fe <TWI_getStatus>
    139a:	88 30       	cpi	r24, 0x08	; 8
    139c:	11 f0       	breq	.+4      	; 0x13a2 <EEPROM_readByte+0x26>
        return ERROR;
    139e:	1d 82       	std	Y+5, r1	; 0x05
    13a0:	44 c0       	rjmp	.+136    	; 0x142a <EEPROM_readByte+0xae>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_writeByte((uint8)((0xA0) | ((u16addr & 0x0700)>>7)));
    13a2:	89 81       	ldd	r24, Y+1	; 0x01
    13a4:	9a 81       	ldd	r25, Y+2	; 0x02
    13a6:	80 70       	andi	r24, 0x00	; 0
    13a8:	97 70       	andi	r25, 0x07	; 7
    13aa:	88 0f       	add	r24, r24
    13ac:	89 2f       	mov	r24, r25
    13ae:	88 1f       	adc	r24, r24
    13b0:	99 0b       	sbc	r25, r25
    13b2:	91 95       	neg	r25
    13b4:	80 6a       	ori	r24, 0xA0	; 160
    13b6:	0e 94 42 11 	call	0x2284	; 0x2284 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
    13ba:	0e 94 7f 11 	call	0x22fe	; 0x22fe <TWI_getStatus>
    13be:	88 31       	cpi	r24, 0x18	; 24
    13c0:	11 f0       	breq	.+4      	; 0x13c6 <EEPROM_readByte+0x4a>
        return ERROR;
    13c2:	1d 82       	std	Y+5, r1	; 0x05
    13c4:	32 c0       	rjmp	.+100    	; 0x142a <EEPROM_readByte+0xae>
		
    /* Send the required memory location address */
    TWI_writeByte((uint8)(u16addr));
    13c6:	89 81       	ldd	r24, Y+1	; 0x01
    13c8:	0e 94 42 11 	call	0x2284	; 0x2284 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    13cc:	0e 94 7f 11 	call	0x22fe	; 0x22fe <TWI_getStatus>
    13d0:	88 32       	cpi	r24, 0x28	; 40
    13d2:	11 f0       	breq	.+4      	; 0x13d8 <EEPROM_readByte+0x5c>
        return ERROR;
    13d4:	1d 82       	std	Y+5, r1	; 0x05
    13d6:	29 c0       	rjmp	.+82     	; 0x142a <EEPROM_readByte+0xae>
		
    /* Send the Repeated Start Bit */
    TWI_start();
    13d8:	0e 94 27 11 	call	0x224e	; 0x224e <TWI_start>
    if (TWI_getStatus() != TWI_REP_START)
    13dc:	0e 94 7f 11 	call	0x22fe	; 0x22fe <TWI_getStatus>
    13e0:	80 31       	cpi	r24, 0x10	; 16
    13e2:	11 f0       	breq	.+4      	; 0x13e8 <EEPROM_readByte+0x6c>
        return ERROR;
    13e4:	1d 82       	std	Y+5, r1	; 0x05
    13e6:	21 c0       	rjmp	.+66     	; 0x142a <EEPROM_readByte+0xae>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=1 (Read) */
    TWI_writeByte((uint8)((0xA0) | ((u16addr & 0x0700)>>7) | 1));
    13e8:	89 81       	ldd	r24, Y+1	; 0x01
    13ea:	9a 81       	ldd	r25, Y+2	; 0x02
    13ec:	80 70       	andi	r24, 0x00	; 0
    13ee:	97 70       	andi	r25, 0x07	; 7
    13f0:	88 0f       	add	r24, r24
    13f2:	89 2f       	mov	r24, r25
    13f4:	88 1f       	adc	r24, r24
    13f6:	99 0b       	sbc	r25, r25
    13f8:	91 95       	neg	r25
    13fa:	81 6a       	ori	r24, 0xA1	; 161
    13fc:	0e 94 42 11 	call	0x2284	; 0x2284 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_R_ACK)
    1400:	0e 94 7f 11 	call	0x22fe	; 0x22fe <TWI_getStatus>
    1404:	80 34       	cpi	r24, 0x40	; 64
    1406:	11 f0       	breq	.+4      	; 0x140c <EEPROM_readByte+0x90>
        return ERROR;
    1408:	1d 82       	std	Y+5, r1	; 0x05
    140a:	0f c0       	rjmp	.+30     	; 0x142a <EEPROM_readByte+0xae>

    /* Read Byte from Memory without send ACK */
    *u8data = TWI_readByteWithNACK();
    140c:	0e 94 6c 11 	call	0x22d8	; 0x22d8 <TWI_readByteWithNACK>
    1410:	eb 81       	ldd	r30, Y+3	; 0x03
    1412:	fc 81       	ldd	r31, Y+4	; 0x04
    1414:	80 83       	st	Z, r24
    if (TWI_getStatus() != TWI_MR_DATA_NACK)
    1416:	0e 94 7f 11 	call	0x22fe	; 0x22fe <TWI_getStatus>
    141a:	88 35       	cpi	r24, 0x58	; 88
    141c:	11 f0       	breq	.+4      	; 0x1422 <EEPROM_readByte+0xa6>
        return ERROR;
    141e:	1d 82       	std	Y+5, r1	; 0x05
    1420:	04 c0       	rjmp	.+8      	; 0x142a <EEPROM_readByte+0xae>

    /* Send the Stop Bit */
    TWI_stop();
    1422:	0e 94 37 11 	call	0x226e	; 0x226e <TWI_stop>

    return SUCCESS;
    1426:	81 e0       	ldi	r24, 0x01	; 1
    1428:	8d 83       	std	Y+5, r24	; 0x05
    142a:	8d 81       	ldd	r24, Y+5	; 0x05
}
    142c:	0f 90       	pop	r0
    142e:	0f 90       	pop	r0
    1430:	0f 90       	pop	r0
    1432:	0f 90       	pop	r0
    1434:	0f 90       	pop	r0
    1436:	cf 91       	pop	r28
    1438:	df 91       	pop	r29
    143a:	08 95       	ret

0000143c <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    143c:	df 93       	push	r29
    143e:	cf 93       	push	r28
    1440:	00 d0       	rcall	.+0      	; 0x1442 <GPIO_setupPinDirection+0x6>
    1442:	00 d0       	rcall	.+0      	; 0x1444 <GPIO_setupPinDirection+0x8>
    1444:	0f 92       	push	r0
    1446:	cd b7       	in	r28, 0x3d	; 61
    1448:	de b7       	in	r29, 0x3e	; 62
    144a:	89 83       	std	Y+1, r24	; 0x01
    144c:	6a 83       	std	Y+2, r22	; 0x02
    144e:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1450:	8a 81       	ldd	r24, Y+2	; 0x02
    1452:	88 30       	cpi	r24, 0x08	; 8
    1454:	08 f0       	brcs	.+2      	; 0x1458 <GPIO_setupPinDirection+0x1c>
    1456:	d5 c0       	rjmp	.+426    	; 0x1602 <GPIO_setupPinDirection+0x1c6>
    1458:	89 81       	ldd	r24, Y+1	; 0x01
    145a:	84 30       	cpi	r24, 0x04	; 4
    145c:	08 f0       	brcs	.+2      	; 0x1460 <GPIO_setupPinDirection+0x24>
    145e:	d1 c0       	rjmp	.+418    	; 0x1602 <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    1460:	89 81       	ldd	r24, Y+1	; 0x01
    1462:	28 2f       	mov	r18, r24
    1464:	30 e0       	ldi	r19, 0x00	; 0
    1466:	3d 83       	std	Y+5, r19	; 0x05
    1468:	2c 83       	std	Y+4, r18	; 0x04
    146a:	8c 81       	ldd	r24, Y+4	; 0x04
    146c:	9d 81       	ldd	r25, Y+5	; 0x05
    146e:	81 30       	cpi	r24, 0x01	; 1
    1470:	91 05       	cpc	r25, r1
    1472:	09 f4       	brne	.+2      	; 0x1476 <GPIO_setupPinDirection+0x3a>
    1474:	43 c0       	rjmp	.+134    	; 0x14fc <GPIO_setupPinDirection+0xc0>
    1476:	2c 81       	ldd	r18, Y+4	; 0x04
    1478:	3d 81       	ldd	r19, Y+5	; 0x05
    147a:	22 30       	cpi	r18, 0x02	; 2
    147c:	31 05       	cpc	r19, r1
    147e:	2c f4       	brge	.+10     	; 0x148a <GPIO_setupPinDirection+0x4e>
    1480:	8c 81       	ldd	r24, Y+4	; 0x04
    1482:	9d 81       	ldd	r25, Y+5	; 0x05
    1484:	00 97       	sbiw	r24, 0x00	; 0
    1486:	71 f0       	breq	.+28     	; 0x14a4 <GPIO_setupPinDirection+0x68>
    1488:	bc c0       	rjmp	.+376    	; 0x1602 <GPIO_setupPinDirection+0x1c6>
    148a:	2c 81       	ldd	r18, Y+4	; 0x04
    148c:	3d 81       	ldd	r19, Y+5	; 0x05
    148e:	22 30       	cpi	r18, 0x02	; 2
    1490:	31 05       	cpc	r19, r1
    1492:	09 f4       	brne	.+2      	; 0x1496 <GPIO_setupPinDirection+0x5a>
    1494:	5f c0       	rjmp	.+190    	; 0x1554 <GPIO_setupPinDirection+0x118>
    1496:	8c 81       	ldd	r24, Y+4	; 0x04
    1498:	9d 81       	ldd	r25, Y+5	; 0x05
    149a:	83 30       	cpi	r24, 0x03	; 3
    149c:	91 05       	cpc	r25, r1
    149e:	09 f4       	brne	.+2      	; 0x14a2 <GPIO_setupPinDirection+0x66>
    14a0:	85 c0       	rjmp	.+266    	; 0x15ac <GPIO_setupPinDirection+0x170>
    14a2:	af c0       	rjmp	.+350    	; 0x1602 <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    14a4:	8b 81       	ldd	r24, Y+3	; 0x03
    14a6:	81 30       	cpi	r24, 0x01	; 1
    14a8:	a1 f4       	brne	.+40     	; 0x14d2 <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    14aa:	aa e3       	ldi	r26, 0x3A	; 58
    14ac:	b0 e0       	ldi	r27, 0x00	; 0
    14ae:	ea e3       	ldi	r30, 0x3A	; 58
    14b0:	f0 e0       	ldi	r31, 0x00	; 0
    14b2:	80 81       	ld	r24, Z
    14b4:	48 2f       	mov	r20, r24
    14b6:	8a 81       	ldd	r24, Y+2	; 0x02
    14b8:	28 2f       	mov	r18, r24
    14ba:	30 e0       	ldi	r19, 0x00	; 0
    14bc:	81 e0       	ldi	r24, 0x01	; 1
    14be:	90 e0       	ldi	r25, 0x00	; 0
    14c0:	02 2e       	mov	r0, r18
    14c2:	02 c0       	rjmp	.+4      	; 0x14c8 <GPIO_setupPinDirection+0x8c>
    14c4:	88 0f       	add	r24, r24
    14c6:	99 1f       	adc	r25, r25
    14c8:	0a 94       	dec	r0
    14ca:	e2 f7       	brpl	.-8      	; 0x14c4 <GPIO_setupPinDirection+0x88>
    14cc:	84 2b       	or	r24, r20
    14ce:	8c 93       	st	X, r24
    14d0:	98 c0       	rjmp	.+304    	; 0x1602 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    14d2:	aa e3       	ldi	r26, 0x3A	; 58
    14d4:	b0 e0       	ldi	r27, 0x00	; 0
    14d6:	ea e3       	ldi	r30, 0x3A	; 58
    14d8:	f0 e0       	ldi	r31, 0x00	; 0
    14da:	80 81       	ld	r24, Z
    14dc:	48 2f       	mov	r20, r24
    14de:	8a 81       	ldd	r24, Y+2	; 0x02
    14e0:	28 2f       	mov	r18, r24
    14e2:	30 e0       	ldi	r19, 0x00	; 0
    14e4:	81 e0       	ldi	r24, 0x01	; 1
    14e6:	90 e0       	ldi	r25, 0x00	; 0
    14e8:	02 2e       	mov	r0, r18
    14ea:	02 c0       	rjmp	.+4      	; 0x14f0 <GPIO_setupPinDirection+0xb4>
    14ec:	88 0f       	add	r24, r24
    14ee:	99 1f       	adc	r25, r25
    14f0:	0a 94       	dec	r0
    14f2:	e2 f7       	brpl	.-8      	; 0x14ec <GPIO_setupPinDirection+0xb0>
    14f4:	80 95       	com	r24
    14f6:	84 23       	and	r24, r20
    14f8:	8c 93       	st	X, r24
    14fa:	83 c0       	rjmp	.+262    	; 0x1602 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    14fc:	8b 81       	ldd	r24, Y+3	; 0x03
    14fe:	81 30       	cpi	r24, 0x01	; 1
    1500:	a1 f4       	brne	.+40     	; 0x152a <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    1502:	a7 e3       	ldi	r26, 0x37	; 55
    1504:	b0 e0       	ldi	r27, 0x00	; 0
    1506:	e7 e3       	ldi	r30, 0x37	; 55
    1508:	f0 e0       	ldi	r31, 0x00	; 0
    150a:	80 81       	ld	r24, Z
    150c:	48 2f       	mov	r20, r24
    150e:	8a 81       	ldd	r24, Y+2	; 0x02
    1510:	28 2f       	mov	r18, r24
    1512:	30 e0       	ldi	r19, 0x00	; 0
    1514:	81 e0       	ldi	r24, 0x01	; 1
    1516:	90 e0       	ldi	r25, 0x00	; 0
    1518:	02 2e       	mov	r0, r18
    151a:	02 c0       	rjmp	.+4      	; 0x1520 <GPIO_setupPinDirection+0xe4>
    151c:	88 0f       	add	r24, r24
    151e:	99 1f       	adc	r25, r25
    1520:	0a 94       	dec	r0
    1522:	e2 f7       	brpl	.-8      	; 0x151c <GPIO_setupPinDirection+0xe0>
    1524:	84 2b       	or	r24, r20
    1526:	8c 93       	st	X, r24
    1528:	6c c0       	rjmp	.+216    	; 0x1602 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    152a:	a7 e3       	ldi	r26, 0x37	; 55
    152c:	b0 e0       	ldi	r27, 0x00	; 0
    152e:	e7 e3       	ldi	r30, 0x37	; 55
    1530:	f0 e0       	ldi	r31, 0x00	; 0
    1532:	80 81       	ld	r24, Z
    1534:	48 2f       	mov	r20, r24
    1536:	8a 81       	ldd	r24, Y+2	; 0x02
    1538:	28 2f       	mov	r18, r24
    153a:	30 e0       	ldi	r19, 0x00	; 0
    153c:	81 e0       	ldi	r24, 0x01	; 1
    153e:	90 e0       	ldi	r25, 0x00	; 0
    1540:	02 2e       	mov	r0, r18
    1542:	02 c0       	rjmp	.+4      	; 0x1548 <GPIO_setupPinDirection+0x10c>
    1544:	88 0f       	add	r24, r24
    1546:	99 1f       	adc	r25, r25
    1548:	0a 94       	dec	r0
    154a:	e2 f7       	brpl	.-8      	; 0x1544 <GPIO_setupPinDirection+0x108>
    154c:	80 95       	com	r24
    154e:	84 23       	and	r24, r20
    1550:	8c 93       	st	X, r24
    1552:	57 c0       	rjmp	.+174    	; 0x1602 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    1554:	8b 81       	ldd	r24, Y+3	; 0x03
    1556:	81 30       	cpi	r24, 0x01	; 1
    1558:	a1 f4       	brne	.+40     	; 0x1582 <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    155a:	a4 e3       	ldi	r26, 0x34	; 52
    155c:	b0 e0       	ldi	r27, 0x00	; 0
    155e:	e4 e3       	ldi	r30, 0x34	; 52
    1560:	f0 e0       	ldi	r31, 0x00	; 0
    1562:	80 81       	ld	r24, Z
    1564:	48 2f       	mov	r20, r24
    1566:	8a 81       	ldd	r24, Y+2	; 0x02
    1568:	28 2f       	mov	r18, r24
    156a:	30 e0       	ldi	r19, 0x00	; 0
    156c:	81 e0       	ldi	r24, 0x01	; 1
    156e:	90 e0       	ldi	r25, 0x00	; 0
    1570:	02 2e       	mov	r0, r18
    1572:	02 c0       	rjmp	.+4      	; 0x1578 <GPIO_setupPinDirection+0x13c>
    1574:	88 0f       	add	r24, r24
    1576:	99 1f       	adc	r25, r25
    1578:	0a 94       	dec	r0
    157a:	e2 f7       	brpl	.-8      	; 0x1574 <GPIO_setupPinDirection+0x138>
    157c:	84 2b       	or	r24, r20
    157e:	8c 93       	st	X, r24
    1580:	40 c0       	rjmp	.+128    	; 0x1602 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    1582:	a4 e3       	ldi	r26, 0x34	; 52
    1584:	b0 e0       	ldi	r27, 0x00	; 0
    1586:	e4 e3       	ldi	r30, 0x34	; 52
    1588:	f0 e0       	ldi	r31, 0x00	; 0
    158a:	80 81       	ld	r24, Z
    158c:	48 2f       	mov	r20, r24
    158e:	8a 81       	ldd	r24, Y+2	; 0x02
    1590:	28 2f       	mov	r18, r24
    1592:	30 e0       	ldi	r19, 0x00	; 0
    1594:	81 e0       	ldi	r24, 0x01	; 1
    1596:	90 e0       	ldi	r25, 0x00	; 0
    1598:	02 2e       	mov	r0, r18
    159a:	02 c0       	rjmp	.+4      	; 0x15a0 <GPIO_setupPinDirection+0x164>
    159c:	88 0f       	add	r24, r24
    159e:	99 1f       	adc	r25, r25
    15a0:	0a 94       	dec	r0
    15a2:	e2 f7       	brpl	.-8      	; 0x159c <GPIO_setupPinDirection+0x160>
    15a4:	80 95       	com	r24
    15a6:	84 23       	and	r24, r20
    15a8:	8c 93       	st	X, r24
    15aa:	2b c0       	rjmp	.+86     	; 0x1602 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    15ac:	8b 81       	ldd	r24, Y+3	; 0x03
    15ae:	81 30       	cpi	r24, 0x01	; 1
    15b0:	a1 f4       	brne	.+40     	; 0x15da <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    15b2:	a1 e3       	ldi	r26, 0x31	; 49
    15b4:	b0 e0       	ldi	r27, 0x00	; 0
    15b6:	e1 e3       	ldi	r30, 0x31	; 49
    15b8:	f0 e0       	ldi	r31, 0x00	; 0
    15ba:	80 81       	ld	r24, Z
    15bc:	48 2f       	mov	r20, r24
    15be:	8a 81       	ldd	r24, Y+2	; 0x02
    15c0:	28 2f       	mov	r18, r24
    15c2:	30 e0       	ldi	r19, 0x00	; 0
    15c4:	81 e0       	ldi	r24, 0x01	; 1
    15c6:	90 e0       	ldi	r25, 0x00	; 0
    15c8:	02 2e       	mov	r0, r18
    15ca:	02 c0       	rjmp	.+4      	; 0x15d0 <GPIO_setupPinDirection+0x194>
    15cc:	88 0f       	add	r24, r24
    15ce:	99 1f       	adc	r25, r25
    15d0:	0a 94       	dec	r0
    15d2:	e2 f7       	brpl	.-8      	; 0x15cc <GPIO_setupPinDirection+0x190>
    15d4:	84 2b       	or	r24, r20
    15d6:	8c 93       	st	X, r24
    15d8:	14 c0       	rjmp	.+40     	; 0x1602 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    15da:	a1 e3       	ldi	r26, 0x31	; 49
    15dc:	b0 e0       	ldi	r27, 0x00	; 0
    15de:	e1 e3       	ldi	r30, 0x31	; 49
    15e0:	f0 e0       	ldi	r31, 0x00	; 0
    15e2:	80 81       	ld	r24, Z
    15e4:	48 2f       	mov	r20, r24
    15e6:	8a 81       	ldd	r24, Y+2	; 0x02
    15e8:	28 2f       	mov	r18, r24
    15ea:	30 e0       	ldi	r19, 0x00	; 0
    15ec:	81 e0       	ldi	r24, 0x01	; 1
    15ee:	90 e0       	ldi	r25, 0x00	; 0
    15f0:	02 2e       	mov	r0, r18
    15f2:	02 c0       	rjmp	.+4      	; 0x15f8 <GPIO_setupPinDirection+0x1bc>
    15f4:	88 0f       	add	r24, r24
    15f6:	99 1f       	adc	r25, r25
    15f8:	0a 94       	dec	r0
    15fa:	e2 f7       	brpl	.-8      	; 0x15f4 <GPIO_setupPinDirection+0x1b8>
    15fc:	80 95       	com	r24
    15fe:	84 23       	and	r24, r20
    1600:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1602:	0f 90       	pop	r0
    1604:	0f 90       	pop	r0
    1606:	0f 90       	pop	r0
    1608:	0f 90       	pop	r0
    160a:	0f 90       	pop	r0
    160c:	cf 91       	pop	r28
    160e:	df 91       	pop	r29
    1610:	08 95       	ret

00001612 <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    1612:	df 93       	push	r29
    1614:	cf 93       	push	r28
    1616:	00 d0       	rcall	.+0      	; 0x1618 <GPIO_writePin+0x6>
    1618:	00 d0       	rcall	.+0      	; 0x161a <GPIO_writePin+0x8>
    161a:	0f 92       	push	r0
    161c:	cd b7       	in	r28, 0x3d	; 61
    161e:	de b7       	in	r29, 0x3e	; 62
    1620:	89 83       	std	Y+1, r24	; 0x01
    1622:	6a 83       	std	Y+2, r22	; 0x02
    1624:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1626:	8a 81       	ldd	r24, Y+2	; 0x02
    1628:	88 30       	cpi	r24, 0x08	; 8
    162a:	08 f0       	brcs	.+2      	; 0x162e <GPIO_writePin+0x1c>
    162c:	d5 c0       	rjmp	.+426    	; 0x17d8 <GPIO_writePin+0x1c6>
    162e:	89 81       	ldd	r24, Y+1	; 0x01
    1630:	84 30       	cpi	r24, 0x04	; 4
    1632:	08 f0       	brcs	.+2      	; 0x1636 <GPIO_writePin+0x24>
    1634:	d1 c0       	rjmp	.+418    	; 0x17d8 <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
    1636:	89 81       	ldd	r24, Y+1	; 0x01
    1638:	28 2f       	mov	r18, r24
    163a:	30 e0       	ldi	r19, 0x00	; 0
    163c:	3d 83       	std	Y+5, r19	; 0x05
    163e:	2c 83       	std	Y+4, r18	; 0x04
    1640:	8c 81       	ldd	r24, Y+4	; 0x04
    1642:	9d 81       	ldd	r25, Y+5	; 0x05
    1644:	81 30       	cpi	r24, 0x01	; 1
    1646:	91 05       	cpc	r25, r1
    1648:	09 f4       	brne	.+2      	; 0x164c <GPIO_writePin+0x3a>
    164a:	43 c0       	rjmp	.+134    	; 0x16d2 <GPIO_writePin+0xc0>
    164c:	2c 81       	ldd	r18, Y+4	; 0x04
    164e:	3d 81       	ldd	r19, Y+5	; 0x05
    1650:	22 30       	cpi	r18, 0x02	; 2
    1652:	31 05       	cpc	r19, r1
    1654:	2c f4       	brge	.+10     	; 0x1660 <GPIO_writePin+0x4e>
    1656:	8c 81       	ldd	r24, Y+4	; 0x04
    1658:	9d 81       	ldd	r25, Y+5	; 0x05
    165a:	00 97       	sbiw	r24, 0x00	; 0
    165c:	71 f0       	breq	.+28     	; 0x167a <GPIO_writePin+0x68>
    165e:	bc c0       	rjmp	.+376    	; 0x17d8 <GPIO_writePin+0x1c6>
    1660:	2c 81       	ldd	r18, Y+4	; 0x04
    1662:	3d 81       	ldd	r19, Y+5	; 0x05
    1664:	22 30       	cpi	r18, 0x02	; 2
    1666:	31 05       	cpc	r19, r1
    1668:	09 f4       	brne	.+2      	; 0x166c <GPIO_writePin+0x5a>
    166a:	5f c0       	rjmp	.+190    	; 0x172a <GPIO_writePin+0x118>
    166c:	8c 81       	ldd	r24, Y+4	; 0x04
    166e:	9d 81       	ldd	r25, Y+5	; 0x05
    1670:	83 30       	cpi	r24, 0x03	; 3
    1672:	91 05       	cpc	r25, r1
    1674:	09 f4       	brne	.+2      	; 0x1678 <GPIO_writePin+0x66>
    1676:	85 c0       	rjmp	.+266    	; 0x1782 <GPIO_writePin+0x170>
    1678:	af c0       	rjmp	.+350    	; 0x17d8 <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    167a:	8b 81       	ldd	r24, Y+3	; 0x03
    167c:	81 30       	cpi	r24, 0x01	; 1
    167e:	a1 f4       	brne	.+40     	; 0x16a8 <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    1680:	ab e3       	ldi	r26, 0x3B	; 59
    1682:	b0 e0       	ldi	r27, 0x00	; 0
    1684:	eb e3       	ldi	r30, 0x3B	; 59
    1686:	f0 e0       	ldi	r31, 0x00	; 0
    1688:	80 81       	ld	r24, Z
    168a:	48 2f       	mov	r20, r24
    168c:	8a 81       	ldd	r24, Y+2	; 0x02
    168e:	28 2f       	mov	r18, r24
    1690:	30 e0       	ldi	r19, 0x00	; 0
    1692:	81 e0       	ldi	r24, 0x01	; 1
    1694:	90 e0       	ldi	r25, 0x00	; 0
    1696:	02 2e       	mov	r0, r18
    1698:	02 c0       	rjmp	.+4      	; 0x169e <GPIO_writePin+0x8c>
    169a:	88 0f       	add	r24, r24
    169c:	99 1f       	adc	r25, r25
    169e:	0a 94       	dec	r0
    16a0:	e2 f7       	brpl	.-8      	; 0x169a <GPIO_writePin+0x88>
    16a2:	84 2b       	or	r24, r20
    16a4:	8c 93       	st	X, r24
    16a6:	98 c0       	rjmp	.+304    	; 0x17d8 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    16a8:	ab e3       	ldi	r26, 0x3B	; 59
    16aa:	b0 e0       	ldi	r27, 0x00	; 0
    16ac:	eb e3       	ldi	r30, 0x3B	; 59
    16ae:	f0 e0       	ldi	r31, 0x00	; 0
    16b0:	80 81       	ld	r24, Z
    16b2:	48 2f       	mov	r20, r24
    16b4:	8a 81       	ldd	r24, Y+2	; 0x02
    16b6:	28 2f       	mov	r18, r24
    16b8:	30 e0       	ldi	r19, 0x00	; 0
    16ba:	81 e0       	ldi	r24, 0x01	; 1
    16bc:	90 e0       	ldi	r25, 0x00	; 0
    16be:	02 2e       	mov	r0, r18
    16c0:	02 c0       	rjmp	.+4      	; 0x16c6 <GPIO_writePin+0xb4>
    16c2:	88 0f       	add	r24, r24
    16c4:	99 1f       	adc	r25, r25
    16c6:	0a 94       	dec	r0
    16c8:	e2 f7       	brpl	.-8      	; 0x16c2 <GPIO_writePin+0xb0>
    16ca:	80 95       	com	r24
    16cc:	84 23       	and	r24, r20
    16ce:	8c 93       	st	X, r24
    16d0:	83 c0       	rjmp	.+262    	; 0x17d8 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    16d2:	8b 81       	ldd	r24, Y+3	; 0x03
    16d4:	81 30       	cpi	r24, 0x01	; 1
    16d6:	a1 f4       	brne	.+40     	; 0x1700 <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    16d8:	a8 e3       	ldi	r26, 0x38	; 56
    16da:	b0 e0       	ldi	r27, 0x00	; 0
    16dc:	e8 e3       	ldi	r30, 0x38	; 56
    16de:	f0 e0       	ldi	r31, 0x00	; 0
    16e0:	80 81       	ld	r24, Z
    16e2:	48 2f       	mov	r20, r24
    16e4:	8a 81       	ldd	r24, Y+2	; 0x02
    16e6:	28 2f       	mov	r18, r24
    16e8:	30 e0       	ldi	r19, 0x00	; 0
    16ea:	81 e0       	ldi	r24, 0x01	; 1
    16ec:	90 e0       	ldi	r25, 0x00	; 0
    16ee:	02 2e       	mov	r0, r18
    16f0:	02 c0       	rjmp	.+4      	; 0x16f6 <GPIO_writePin+0xe4>
    16f2:	88 0f       	add	r24, r24
    16f4:	99 1f       	adc	r25, r25
    16f6:	0a 94       	dec	r0
    16f8:	e2 f7       	brpl	.-8      	; 0x16f2 <GPIO_writePin+0xe0>
    16fa:	84 2b       	or	r24, r20
    16fc:	8c 93       	st	X, r24
    16fe:	6c c0       	rjmp	.+216    	; 0x17d8 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    1700:	a8 e3       	ldi	r26, 0x38	; 56
    1702:	b0 e0       	ldi	r27, 0x00	; 0
    1704:	e8 e3       	ldi	r30, 0x38	; 56
    1706:	f0 e0       	ldi	r31, 0x00	; 0
    1708:	80 81       	ld	r24, Z
    170a:	48 2f       	mov	r20, r24
    170c:	8a 81       	ldd	r24, Y+2	; 0x02
    170e:	28 2f       	mov	r18, r24
    1710:	30 e0       	ldi	r19, 0x00	; 0
    1712:	81 e0       	ldi	r24, 0x01	; 1
    1714:	90 e0       	ldi	r25, 0x00	; 0
    1716:	02 2e       	mov	r0, r18
    1718:	02 c0       	rjmp	.+4      	; 0x171e <GPIO_writePin+0x10c>
    171a:	88 0f       	add	r24, r24
    171c:	99 1f       	adc	r25, r25
    171e:	0a 94       	dec	r0
    1720:	e2 f7       	brpl	.-8      	; 0x171a <GPIO_writePin+0x108>
    1722:	80 95       	com	r24
    1724:	84 23       	and	r24, r20
    1726:	8c 93       	st	X, r24
    1728:	57 c0       	rjmp	.+174    	; 0x17d8 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    172a:	8b 81       	ldd	r24, Y+3	; 0x03
    172c:	81 30       	cpi	r24, 0x01	; 1
    172e:	a1 f4       	brne	.+40     	; 0x1758 <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    1730:	a5 e3       	ldi	r26, 0x35	; 53
    1732:	b0 e0       	ldi	r27, 0x00	; 0
    1734:	e5 e3       	ldi	r30, 0x35	; 53
    1736:	f0 e0       	ldi	r31, 0x00	; 0
    1738:	80 81       	ld	r24, Z
    173a:	48 2f       	mov	r20, r24
    173c:	8a 81       	ldd	r24, Y+2	; 0x02
    173e:	28 2f       	mov	r18, r24
    1740:	30 e0       	ldi	r19, 0x00	; 0
    1742:	81 e0       	ldi	r24, 0x01	; 1
    1744:	90 e0       	ldi	r25, 0x00	; 0
    1746:	02 2e       	mov	r0, r18
    1748:	02 c0       	rjmp	.+4      	; 0x174e <GPIO_writePin+0x13c>
    174a:	88 0f       	add	r24, r24
    174c:	99 1f       	adc	r25, r25
    174e:	0a 94       	dec	r0
    1750:	e2 f7       	brpl	.-8      	; 0x174a <GPIO_writePin+0x138>
    1752:	84 2b       	or	r24, r20
    1754:	8c 93       	st	X, r24
    1756:	40 c0       	rjmp	.+128    	; 0x17d8 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    1758:	a5 e3       	ldi	r26, 0x35	; 53
    175a:	b0 e0       	ldi	r27, 0x00	; 0
    175c:	e5 e3       	ldi	r30, 0x35	; 53
    175e:	f0 e0       	ldi	r31, 0x00	; 0
    1760:	80 81       	ld	r24, Z
    1762:	48 2f       	mov	r20, r24
    1764:	8a 81       	ldd	r24, Y+2	; 0x02
    1766:	28 2f       	mov	r18, r24
    1768:	30 e0       	ldi	r19, 0x00	; 0
    176a:	81 e0       	ldi	r24, 0x01	; 1
    176c:	90 e0       	ldi	r25, 0x00	; 0
    176e:	02 2e       	mov	r0, r18
    1770:	02 c0       	rjmp	.+4      	; 0x1776 <GPIO_writePin+0x164>
    1772:	88 0f       	add	r24, r24
    1774:	99 1f       	adc	r25, r25
    1776:	0a 94       	dec	r0
    1778:	e2 f7       	brpl	.-8      	; 0x1772 <GPIO_writePin+0x160>
    177a:	80 95       	com	r24
    177c:	84 23       	and	r24, r20
    177e:	8c 93       	st	X, r24
    1780:	2b c0       	rjmp	.+86     	; 0x17d8 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    1782:	8b 81       	ldd	r24, Y+3	; 0x03
    1784:	81 30       	cpi	r24, 0x01	; 1
    1786:	a1 f4       	brne	.+40     	; 0x17b0 <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    1788:	a2 e3       	ldi	r26, 0x32	; 50
    178a:	b0 e0       	ldi	r27, 0x00	; 0
    178c:	e2 e3       	ldi	r30, 0x32	; 50
    178e:	f0 e0       	ldi	r31, 0x00	; 0
    1790:	80 81       	ld	r24, Z
    1792:	48 2f       	mov	r20, r24
    1794:	8a 81       	ldd	r24, Y+2	; 0x02
    1796:	28 2f       	mov	r18, r24
    1798:	30 e0       	ldi	r19, 0x00	; 0
    179a:	81 e0       	ldi	r24, 0x01	; 1
    179c:	90 e0       	ldi	r25, 0x00	; 0
    179e:	02 2e       	mov	r0, r18
    17a0:	02 c0       	rjmp	.+4      	; 0x17a6 <GPIO_writePin+0x194>
    17a2:	88 0f       	add	r24, r24
    17a4:	99 1f       	adc	r25, r25
    17a6:	0a 94       	dec	r0
    17a8:	e2 f7       	brpl	.-8      	; 0x17a2 <GPIO_writePin+0x190>
    17aa:	84 2b       	or	r24, r20
    17ac:	8c 93       	st	X, r24
    17ae:	14 c0       	rjmp	.+40     	; 0x17d8 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    17b0:	a2 e3       	ldi	r26, 0x32	; 50
    17b2:	b0 e0       	ldi	r27, 0x00	; 0
    17b4:	e2 e3       	ldi	r30, 0x32	; 50
    17b6:	f0 e0       	ldi	r31, 0x00	; 0
    17b8:	80 81       	ld	r24, Z
    17ba:	48 2f       	mov	r20, r24
    17bc:	8a 81       	ldd	r24, Y+2	; 0x02
    17be:	28 2f       	mov	r18, r24
    17c0:	30 e0       	ldi	r19, 0x00	; 0
    17c2:	81 e0       	ldi	r24, 0x01	; 1
    17c4:	90 e0       	ldi	r25, 0x00	; 0
    17c6:	02 2e       	mov	r0, r18
    17c8:	02 c0       	rjmp	.+4      	; 0x17ce <GPIO_writePin+0x1bc>
    17ca:	88 0f       	add	r24, r24
    17cc:	99 1f       	adc	r25, r25
    17ce:	0a 94       	dec	r0
    17d0:	e2 f7       	brpl	.-8      	; 0x17ca <GPIO_writePin+0x1b8>
    17d2:	80 95       	com	r24
    17d4:	84 23       	and	r24, r20
    17d6:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    17d8:	0f 90       	pop	r0
    17da:	0f 90       	pop	r0
    17dc:	0f 90       	pop	r0
    17de:	0f 90       	pop	r0
    17e0:	0f 90       	pop	r0
    17e2:	cf 91       	pop	r28
    17e4:	df 91       	pop	r29
    17e6:	08 95       	ret

000017e8 <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    17e8:	df 93       	push	r29
    17ea:	cf 93       	push	r28
    17ec:	00 d0       	rcall	.+0      	; 0x17ee <GPIO_readPin+0x6>
    17ee:	00 d0       	rcall	.+0      	; 0x17f0 <GPIO_readPin+0x8>
    17f0:	0f 92       	push	r0
    17f2:	cd b7       	in	r28, 0x3d	; 61
    17f4:	de b7       	in	r29, 0x3e	; 62
    17f6:	8a 83       	std	Y+2, r24	; 0x02
    17f8:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    17fa:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    17fc:	8b 81       	ldd	r24, Y+3	; 0x03
    17fe:	88 30       	cpi	r24, 0x08	; 8
    1800:	08 f0       	brcs	.+2      	; 0x1804 <GPIO_readPin+0x1c>
    1802:	84 c0       	rjmp	.+264    	; 0x190c <GPIO_readPin+0x124>
    1804:	8a 81       	ldd	r24, Y+2	; 0x02
    1806:	84 30       	cpi	r24, 0x04	; 4
    1808:	08 f0       	brcs	.+2      	; 0x180c <GPIO_readPin+0x24>
    180a:	80 c0       	rjmp	.+256    	; 0x190c <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    180c:	8a 81       	ldd	r24, Y+2	; 0x02
    180e:	28 2f       	mov	r18, r24
    1810:	30 e0       	ldi	r19, 0x00	; 0
    1812:	3d 83       	std	Y+5, r19	; 0x05
    1814:	2c 83       	std	Y+4, r18	; 0x04
    1816:	4c 81       	ldd	r20, Y+4	; 0x04
    1818:	5d 81       	ldd	r21, Y+5	; 0x05
    181a:	41 30       	cpi	r20, 0x01	; 1
    181c:	51 05       	cpc	r21, r1
    181e:	79 f1       	breq	.+94     	; 0x187e <GPIO_readPin+0x96>
    1820:	8c 81       	ldd	r24, Y+4	; 0x04
    1822:	9d 81       	ldd	r25, Y+5	; 0x05
    1824:	82 30       	cpi	r24, 0x02	; 2
    1826:	91 05       	cpc	r25, r1
    1828:	34 f4       	brge	.+12     	; 0x1836 <GPIO_readPin+0x4e>
    182a:	2c 81       	ldd	r18, Y+4	; 0x04
    182c:	3d 81       	ldd	r19, Y+5	; 0x05
    182e:	21 15       	cp	r18, r1
    1830:	31 05       	cpc	r19, r1
    1832:	69 f0       	breq	.+26     	; 0x184e <GPIO_readPin+0x66>
    1834:	6b c0       	rjmp	.+214    	; 0x190c <GPIO_readPin+0x124>
    1836:	4c 81       	ldd	r20, Y+4	; 0x04
    1838:	5d 81       	ldd	r21, Y+5	; 0x05
    183a:	42 30       	cpi	r20, 0x02	; 2
    183c:	51 05       	cpc	r21, r1
    183e:	b9 f1       	breq	.+110    	; 0x18ae <GPIO_readPin+0xc6>
    1840:	8c 81       	ldd	r24, Y+4	; 0x04
    1842:	9d 81       	ldd	r25, Y+5	; 0x05
    1844:	83 30       	cpi	r24, 0x03	; 3
    1846:	91 05       	cpc	r25, r1
    1848:	09 f4       	brne	.+2      	; 0x184c <GPIO_readPin+0x64>
    184a:	49 c0       	rjmp	.+146    	; 0x18de <GPIO_readPin+0xf6>
    184c:	5f c0       	rjmp	.+190    	; 0x190c <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    184e:	e9 e3       	ldi	r30, 0x39	; 57
    1850:	f0 e0       	ldi	r31, 0x00	; 0
    1852:	80 81       	ld	r24, Z
    1854:	28 2f       	mov	r18, r24
    1856:	30 e0       	ldi	r19, 0x00	; 0
    1858:	8b 81       	ldd	r24, Y+3	; 0x03
    185a:	88 2f       	mov	r24, r24
    185c:	90 e0       	ldi	r25, 0x00	; 0
    185e:	a9 01       	movw	r20, r18
    1860:	02 c0       	rjmp	.+4      	; 0x1866 <GPIO_readPin+0x7e>
    1862:	55 95       	asr	r21
    1864:	47 95       	ror	r20
    1866:	8a 95       	dec	r24
    1868:	e2 f7       	brpl	.-8      	; 0x1862 <GPIO_readPin+0x7a>
    186a:	ca 01       	movw	r24, r20
    186c:	81 70       	andi	r24, 0x01	; 1
    186e:	90 70       	andi	r25, 0x00	; 0
    1870:	88 23       	and	r24, r24
    1872:	19 f0       	breq	.+6      	; 0x187a <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    1874:	81 e0       	ldi	r24, 0x01	; 1
    1876:	89 83       	std	Y+1, r24	; 0x01
    1878:	49 c0       	rjmp	.+146    	; 0x190c <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    187a:	19 82       	std	Y+1, r1	; 0x01
    187c:	47 c0       	rjmp	.+142    	; 0x190c <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    187e:	e6 e3       	ldi	r30, 0x36	; 54
    1880:	f0 e0       	ldi	r31, 0x00	; 0
    1882:	80 81       	ld	r24, Z
    1884:	28 2f       	mov	r18, r24
    1886:	30 e0       	ldi	r19, 0x00	; 0
    1888:	8b 81       	ldd	r24, Y+3	; 0x03
    188a:	88 2f       	mov	r24, r24
    188c:	90 e0       	ldi	r25, 0x00	; 0
    188e:	a9 01       	movw	r20, r18
    1890:	02 c0       	rjmp	.+4      	; 0x1896 <GPIO_readPin+0xae>
    1892:	55 95       	asr	r21
    1894:	47 95       	ror	r20
    1896:	8a 95       	dec	r24
    1898:	e2 f7       	brpl	.-8      	; 0x1892 <GPIO_readPin+0xaa>
    189a:	ca 01       	movw	r24, r20
    189c:	81 70       	andi	r24, 0x01	; 1
    189e:	90 70       	andi	r25, 0x00	; 0
    18a0:	88 23       	and	r24, r24
    18a2:	19 f0       	breq	.+6      	; 0x18aa <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    18a4:	81 e0       	ldi	r24, 0x01	; 1
    18a6:	89 83       	std	Y+1, r24	; 0x01
    18a8:	31 c0       	rjmp	.+98     	; 0x190c <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    18aa:	19 82       	std	Y+1, r1	; 0x01
    18ac:	2f c0       	rjmp	.+94     	; 0x190c <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    18ae:	e3 e3       	ldi	r30, 0x33	; 51
    18b0:	f0 e0       	ldi	r31, 0x00	; 0
    18b2:	80 81       	ld	r24, Z
    18b4:	28 2f       	mov	r18, r24
    18b6:	30 e0       	ldi	r19, 0x00	; 0
    18b8:	8b 81       	ldd	r24, Y+3	; 0x03
    18ba:	88 2f       	mov	r24, r24
    18bc:	90 e0       	ldi	r25, 0x00	; 0
    18be:	a9 01       	movw	r20, r18
    18c0:	02 c0       	rjmp	.+4      	; 0x18c6 <GPIO_readPin+0xde>
    18c2:	55 95       	asr	r21
    18c4:	47 95       	ror	r20
    18c6:	8a 95       	dec	r24
    18c8:	e2 f7       	brpl	.-8      	; 0x18c2 <GPIO_readPin+0xda>
    18ca:	ca 01       	movw	r24, r20
    18cc:	81 70       	andi	r24, 0x01	; 1
    18ce:	90 70       	andi	r25, 0x00	; 0
    18d0:	88 23       	and	r24, r24
    18d2:	19 f0       	breq	.+6      	; 0x18da <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    18d4:	81 e0       	ldi	r24, 0x01	; 1
    18d6:	89 83       	std	Y+1, r24	; 0x01
    18d8:	19 c0       	rjmp	.+50     	; 0x190c <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    18da:	19 82       	std	Y+1, r1	; 0x01
    18dc:	17 c0       	rjmp	.+46     	; 0x190c <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    18de:	e0 e3       	ldi	r30, 0x30	; 48
    18e0:	f0 e0       	ldi	r31, 0x00	; 0
    18e2:	80 81       	ld	r24, Z
    18e4:	28 2f       	mov	r18, r24
    18e6:	30 e0       	ldi	r19, 0x00	; 0
    18e8:	8b 81       	ldd	r24, Y+3	; 0x03
    18ea:	88 2f       	mov	r24, r24
    18ec:	90 e0       	ldi	r25, 0x00	; 0
    18ee:	a9 01       	movw	r20, r18
    18f0:	02 c0       	rjmp	.+4      	; 0x18f6 <GPIO_readPin+0x10e>
    18f2:	55 95       	asr	r21
    18f4:	47 95       	ror	r20
    18f6:	8a 95       	dec	r24
    18f8:	e2 f7       	brpl	.-8      	; 0x18f2 <GPIO_readPin+0x10a>
    18fa:	ca 01       	movw	r24, r20
    18fc:	81 70       	andi	r24, 0x01	; 1
    18fe:	90 70       	andi	r25, 0x00	; 0
    1900:	88 23       	and	r24, r24
    1902:	19 f0       	breq	.+6      	; 0x190a <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    1904:	81 e0       	ldi	r24, 0x01	; 1
    1906:	89 83       	std	Y+1, r24	; 0x01
    1908:	01 c0       	rjmp	.+2      	; 0x190c <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    190a:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    190c:	89 81       	ldd	r24, Y+1	; 0x01
}
    190e:	0f 90       	pop	r0
    1910:	0f 90       	pop	r0
    1912:	0f 90       	pop	r0
    1914:	0f 90       	pop	r0
    1916:	0f 90       	pop	r0
    1918:	cf 91       	pop	r28
    191a:	df 91       	pop	r29
    191c:	08 95       	ret

0000191e <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    191e:	df 93       	push	r29
    1920:	cf 93       	push	r28
    1922:	00 d0       	rcall	.+0      	; 0x1924 <GPIO_setupPortDirection+0x6>
    1924:	00 d0       	rcall	.+0      	; 0x1926 <GPIO_setupPortDirection+0x8>
    1926:	cd b7       	in	r28, 0x3d	; 61
    1928:	de b7       	in	r29, 0x3e	; 62
    192a:	89 83       	std	Y+1, r24	; 0x01
    192c:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    192e:	89 81       	ldd	r24, Y+1	; 0x01
    1930:	84 30       	cpi	r24, 0x04	; 4
    1932:	90 f5       	brcc	.+100    	; 0x1998 <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    1934:	89 81       	ldd	r24, Y+1	; 0x01
    1936:	28 2f       	mov	r18, r24
    1938:	30 e0       	ldi	r19, 0x00	; 0
    193a:	3c 83       	std	Y+4, r19	; 0x04
    193c:	2b 83       	std	Y+3, r18	; 0x03
    193e:	8b 81       	ldd	r24, Y+3	; 0x03
    1940:	9c 81       	ldd	r25, Y+4	; 0x04
    1942:	81 30       	cpi	r24, 0x01	; 1
    1944:	91 05       	cpc	r25, r1
    1946:	d1 f0       	breq	.+52     	; 0x197c <GPIO_setupPortDirection+0x5e>
    1948:	2b 81       	ldd	r18, Y+3	; 0x03
    194a:	3c 81       	ldd	r19, Y+4	; 0x04
    194c:	22 30       	cpi	r18, 0x02	; 2
    194e:	31 05       	cpc	r19, r1
    1950:	2c f4       	brge	.+10     	; 0x195c <GPIO_setupPortDirection+0x3e>
    1952:	8b 81       	ldd	r24, Y+3	; 0x03
    1954:	9c 81       	ldd	r25, Y+4	; 0x04
    1956:	00 97       	sbiw	r24, 0x00	; 0
    1958:	61 f0       	breq	.+24     	; 0x1972 <GPIO_setupPortDirection+0x54>
    195a:	1e c0       	rjmp	.+60     	; 0x1998 <GPIO_setupPortDirection+0x7a>
    195c:	2b 81       	ldd	r18, Y+3	; 0x03
    195e:	3c 81       	ldd	r19, Y+4	; 0x04
    1960:	22 30       	cpi	r18, 0x02	; 2
    1962:	31 05       	cpc	r19, r1
    1964:	81 f0       	breq	.+32     	; 0x1986 <GPIO_setupPortDirection+0x68>
    1966:	8b 81       	ldd	r24, Y+3	; 0x03
    1968:	9c 81       	ldd	r25, Y+4	; 0x04
    196a:	83 30       	cpi	r24, 0x03	; 3
    196c:	91 05       	cpc	r25, r1
    196e:	81 f0       	breq	.+32     	; 0x1990 <GPIO_setupPortDirection+0x72>
    1970:	13 c0       	rjmp	.+38     	; 0x1998 <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    1972:	ea e3       	ldi	r30, 0x3A	; 58
    1974:	f0 e0       	ldi	r31, 0x00	; 0
    1976:	8a 81       	ldd	r24, Y+2	; 0x02
    1978:	80 83       	st	Z, r24
    197a:	0e c0       	rjmp	.+28     	; 0x1998 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    197c:	e7 e3       	ldi	r30, 0x37	; 55
    197e:	f0 e0       	ldi	r31, 0x00	; 0
    1980:	8a 81       	ldd	r24, Y+2	; 0x02
    1982:	80 83       	st	Z, r24
    1984:	09 c0       	rjmp	.+18     	; 0x1998 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    1986:	e4 e3       	ldi	r30, 0x34	; 52
    1988:	f0 e0       	ldi	r31, 0x00	; 0
    198a:	8a 81       	ldd	r24, Y+2	; 0x02
    198c:	80 83       	st	Z, r24
    198e:	04 c0       	rjmp	.+8      	; 0x1998 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    1990:	e1 e3       	ldi	r30, 0x31	; 49
    1992:	f0 e0       	ldi	r31, 0x00	; 0
    1994:	8a 81       	ldd	r24, Y+2	; 0x02
    1996:	80 83       	st	Z, r24
			break;
		}
	}
}
    1998:	0f 90       	pop	r0
    199a:	0f 90       	pop	r0
    199c:	0f 90       	pop	r0
    199e:	0f 90       	pop	r0
    19a0:	cf 91       	pop	r28
    19a2:	df 91       	pop	r29
    19a4:	08 95       	ret

000019a6 <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    19a6:	df 93       	push	r29
    19a8:	cf 93       	push	r28
    19aa:	00 d0       	rcall	.+0      	; 0x19ac <GPIO_writePort+0x6>
    19ac:	00 d0       	rcall	.+0      	; 0x19ae <GPIO_writePort+0x8>
    19ae:	cd b7       	in	r28, 0x3d	; 61
    19b0:	de b7       	in	r29, 0x3e	; 62
    19b2:	89 83       	std	Y+1, r24	; 0x01
    19b4:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    19b6:	89 81       	ldd	r24, Y+1	; 0x01
    19b8:	84 30       	cpi	r24, 0x04	; 4
    19ba:	90 f5       	brcc	.+100    	; 0x1a20 <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    19bc:	89 81       	ldd	r24, Y+1	; 0x01
    19be:	28 2f       	mov	r18, r24
    19c0:	30 e0       	ldi	r19, 0x00	; 0
    19c2:	3c 83       	std	Y+4, r19	; 0x04
    19c4:	2b 83       	std	Y+3, r18	; 0x03
    19c6:	8b 81       	ldd	r24, Y+3	; 0x03
    19c8:	9c 81       	ldd	r25, Y+4	; 0x04
    19ca:	81 30       	cpi	r24, 0x01	; 1
    19cc:	91 05       	cpc	r25, r1
    19ce:	d1 f0       	breq	.+52     	; 0x1a04 <GPIO_writePort+0x5e>
    19d0:	2b 81       	ldd	r18, Y+3	; 0x03
    19d2:	3c 81       	ldd	r19, Y+4	; 0x04
    19d4:	22 30       	cpi	r18, 0x02	; 2
    19d6:	31 05       	cpc	r19, r1
    19d8:	2c f4       	brge	.+10     	; 0x19e4 <GPIO_writePort+0x3e>
    19da:	8b 81       	ldd	r24, Y+3	; 0x03
    19dc:	9c 81       	ldd	r25, Y+4	; 0x04
    19de:	00 97       	sbiw	r24, 0x00	; 0
    19e0:	61 f0       	breq	.+24     	; 0x19fa <GPIO_writePort+0x54>
    19e2:	1e c0       	rjmp	.+60     	; 0x1a20 <GPIO_writePort+0x7a>
    19e4:	2b 81       	ldd	r18, Y+3	; 0x03
    19e6:	3c 81       	ldd	r19, Y+4	; 0x04
    19e8:	22 30       	cpi	r18, 0x02	; 2
    19ea:	31 05       	cpc	r19, r1
    19ec:	81 f0       	breq	.+32     	; 0x1a0e <GPIO_writePort+0x68>
    19ee:	8b 81       	ldd	r24, Y+3	; 0x03
    19f0:	9c 81       	ldd	r25, Y+4	; 0x04
    19f2:	83 30       	cpi	r24, 0x03	; 3
    19f4:	91 05       	cpc	r25, r1
    19f6:	81 f0       	breq	.+32     	; 0x1a18 <GPIO_writePort+0x72>
    19f8:	13 c0       	rjmp	.+38     	; 0x1a20 <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    19fa:	eb e3       	ldi	r30, 0x3B	; 59
    19fc:	f0 e0       	ldi	r31, 0x00	; 0
    19fe:	8a 81       	ldd	r24, Y+2	; 0x02
    1a00:	80 83       	st	Z, r24
    1a02:	0e c0       	rjmp	.+28     	; 0x1a20 <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    1a04:	e8 e3       	ldi	r30, 0x38	; 56
    1a06:	f0 e0       	ldi	r31, 0x00	; 0
    1a08:	8a 81       	ldd	r24, Y+2	; 0x02
    1a0a:	80 83       	st	Z, r24
    1a0c:	09 c0       	rjmp	.+18     	; 0x1a20 <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    1a0e:	e5 e3       	ldi	r30, 0x35	; 53
    1a10:	f0 e0       	ldi	r31, 0x00	; 0
    1a12:	8a 81       	ldd	r24, Y+2	; 0x02
    1a14:	80 83       	st	Z, r24
    1a16:	04 c0       	rjmp	.+8      	; 0x1a20 <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    1a18:	e2 e3       	ldi	r30, 0x32	; 50
    1a1a:	f0 e0       	ldi	r31, 0x00	; 0
    1a1c:	8a 81       	ldd	r24, Y+2	; 0x02
    1a1e:	80 83       	st	Z, r24
			break;
		}
	}
}
    1a20:	0f 90       	pop	r0
    1a22:	0f 90       	pop	r0
    1a24:	0f 90       	pop	r0
    1a26:	0f 90       	pop	r0
    1a28:	cf 91       	pop	r28
    1a2a:	df 91       	pop	r29
    1a2c:	08 95       	ret

00001a2e <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    1a2e:	df 93       	push	r29
    1a30:	cf 93       	push	r28
    1a32:	00 d0       	rcall	.+0      	; 0x1a34 <GPIO_readPort+0x6>
    1a34:	00 d0       	rcall	.+0      	; 0x1a36 <GPIO_readPort+0x8>
    1a36:	cd b7       	in	r28, 0x3d	; 61
    1a38:	de b7       	in	r29, 0x3e	; 62
    1a3a:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    1a3c:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1a3e:	8a 81       	ldd	r24, Y+2	; 0x02
    1a40:	84 30       	cpi	r24, 0x04	; 4
    1a42:	90 f5       	brcc	.+100    	; 0x1aa8 <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    1a44:	8a 81       	ldd	r24, Y+2	; 0x02
    1a46:	28 2f       	mov	r18, r24
    1a48:	30 e0       	ldi	r19, 0x00	; 0
    1a4a:	3c 83       	std	Y+4, r19	; 0x04
    1a4c:	2b 83       	std	Y+3, r18	; 0x03
    1a4e:	8b 81       	ldd	r24, Y+3	; 0x03
    1a50:	9c 81       	ldd	r25, Y+4	; 0x04
    1a52:	81 30       	cpi	r24, 0x01	; 1
    1a54:	91 05       	cpc	r25, r1
    1a56:	d1 f0       	breq	.+52     	; 0x1a8c <GPIO_readPort+0x5e>
    1a58:	2b 81       	ldd	r18, Y+3	; 0x03
    1a5a:	3c 81       	ldd	r19, Y+4	; 0x04
    1a5c:	22 30       	cpi	r18, 0x02	; 2
    1a5e:	31 05       	cpc	r19, r1
    1a60:	2c f4       	brge	.+10     	; 0x1a6c <GPIO_readPort+0x3e>
    1a62:	8b 81       	ldd	r24, Y+3	; 0x03
    1a64:	9c 81       	ldd	r25, Y+4	; 0x04
    1a66:	00 97       	sbiw	r24, 0x00	; 0
    1a68:	61 f0       	breq	.+24     	; 0x1a82 <GPIO_readPort+0x54>
    1a6a:	1e c0       	rjmp	.+60     	; 0x1aa8 <GPIO_readPort+0x7a>
    1a6c:	2b 81       	ldd	r18, Y+3	; 0x03
    1a6e:	3c 81       	ldd	r19, Y+4	; 0x04
    1a70:	22 30       	cpi	r18, 0x02	; 2
    1a72:	31 05       	cpc	r19, r1
    1a74:	81 f0       	breq	.+32     	; 0x1a96 <GPIO_readPort+0x68>
    1a76:	8b 81       	ldd	r24, Y+3	; 0x03
    1a78:	9c 81       	ldd	r25, Y+4	; 0x04
    1a7a:	83 30       	cpi	r24, 0x03	; 3
    1a7c:	91 05       	cpc	r25, r1
    1a7e:	81 f0       	breq	.+32     	; 0x1aa0 <GPIO_readPort+0x72>
    1a80:	13 c0       	rjmp	.+38     	; 0x1aa8 <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    1a82:	e9 e3       	ldi	r30, 0x39	; 57
    1a84:	f0 e0       	ldi	r31, 0x00	; 0
    1a86:	80 81       	ld	r24, Z
    1a88:	89 83       	std	Y+1, r24	; 0x01
    1a8a:	0e c0       	rjmp	.+28     	; 0x1aa8 <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    1a8c:	e6 e3       	ldi	r30, 0x36	; 54
    1a8e:	f0 e0       	ldi	r31, 0x00	; 0
    1a90:	80 81       	ld	r24, Z
    1a92:	89 83       	std	Y+1, r24	; 0x01
    1a94:	09 c0       	rjmp	.+18     	; 0x1aa8 <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    1a96:	e3 e3       	ldi	r30, 0x33	; 51
    1a98:	f0 e0       	ldi	r31, 0x00	; 0
    1a9a:	80 81       	ld	r24, Z
    1a9c:	89 83       	std	Y+1, r24	; 0x01
    1a9e:	04 c0       	rjmp	.+8      	; 0x1aa8 <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    1aa0:	e0 e3       	ldi	r30, 0x30	; 48
    1aa2:	f0 e0       	ldi	r31, 0x00	; 0
    1aa4:	80 81       	ld	r24, Z
    1aa6:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    1aa8:	89 81       	ldd	r24, Y+1	; 0x01
}
    1aaa:	0f 90       	pop	r0
    1aac:	0f 90       	pop	r0
    1aae:	0f 90       	pop	r0
    1ab0:	0f 90       	pop	r0
    1ab2:	cf 91       	pop	r28
    1ab4:	df 91       	pop	r29
    1ab6:	08 95       	ret

00001ab8 <__vector_19>:

static volatile void (*g_callBackPtr2)(void) = NULL_PTR;

ISR (TIMER0_COMP_vect)

{
    1ab8:	1f 92       	push	r1
    1aba:	0f 92       	push	r0
    1abc:	0f b6       	in	r0, 0x3f	; 63
    1abe:	0f 92       	push	r0
    1ac0:	11 24       	eor	r1, r1
    1ac2:	2f 93       	push	r18
    1ac4:	3f 93       	push	r19
    1ac6:	4f 93       	push	r20
    1ac8:	5f 93       	push	r21
    1aca:	6f 93       	push	r22
    1acc:	7f 93       	push	r23
    1ace:	8f 93       	push	r24
    1ad0:	9f 93       	push	r25
    1ad2:	af 93       	push	r26
    1ad4:	bf 93       	push	r27
    1ad6:	ef 93       	push	r30
    1ad8:	ff 93       	push	r31
    1ada:	df 93       	push	r29
    1adc:	cf 93       	push	r28
    1ade:	cd b7       	in	r28, 0x3d	; 61
    1ae0:	de b7       	in	r29, 0x3e	; 62
	if (g_callBackPtr0 != NULL_PTR)
    1ae2:	80 91 8b 00 	lds	r24, 0x008B
    1ae6:	90 91 8c 00 	lds	r25, 0x008C
    1aea:	00 97       	sbiw	r24, 0x00	; 0
    1aec:	29 f0       	breq	.+10     	; 0x1af8 <__vector_19+0x40>
	{
		(*g_callBackPtr0)();
    1aee:	e0 91 8b 00 	lds	r30, 0x008B
    1af2:	f0 91 8c 00 	lds	r31, 0x008C
    1af6:	09 95       	icall
	}
}
    1af8:	cf 91       	pop	r28
    1afa:	df 91       	pop	r29
    1afc:	ff 91       	pop	r31
    1afe:	ef 91       	pop	r30
    1b00:	bf 91       	pop	r27
    1b02:	af 91       	pop	r26
    1b04:	9f 91       	pop	r25
    1b06:	8f 91       	pop	r24
    1b08:	7f 91       	pop	r23
    1b0a:	6f 91       	pop	r22
    1b0c:	5f 91       	pop	r21
    1b0e:	4f 91       	pop	r20
    1b10:	3f 91       	pop	r19
    1b12:	2f 91       	pop	r18
    1b14:	0f 90       	pop	r0
    1b16:	0f be       	out	0x3f, r0	; 63
    1b18:	0f 90       	pop	r0
    1b1a:	1f 90       	pop	r1
    1b1c:	18 95       	reti

00001b1e <__vector_9>:

ISR (TIMER0_OVF_vect)

{
    1b1e:	1f 92       	push	r1
    1b20:	0f 92       	push	r0
    1b22:	0f b6       	in	r0, 0x3f	; 63
    1b24:	0f 92       	push	r0
    1b26:	11 24       	eor	r1, r1
    1b28:	2f 93       	push	r18
    1b2a:	3f 93       	push	r19
    1b2c:	4f 93       	push	r20
    1b2e:	5f 93       	push	r21
    1b30:	6f 93       	push	r22
    1b32:	7f 93       	push	r23
    1b34:	8f 93       	push	r24
    1b36:	9f 93       	push	r25
    1b38:	af 93       	push	r26
    1b3a:	bf 93       	push	r27
    1b3c:	ef 93       	push	r30
    1b3e:	ff 93       	push	r31
    1b40:	df 93       	push	r29
    1b42:	cf 93       	push	r28
    1b44:	cd b7       	in	r28, 0x3d	; 61
    1b46:	de b7       	in	r29, 0x3e	; 62
	if (g_callBackPtr0 != NULL_PTR)
    1b48:	80 91 8b 00 	lds	r24, 0x008B
    1b4c:	90 91 8c 00 	lds	r25, 0x008C
    1b50:	00 97       	sbiw	r24, 0x00	; 0
    1b52:	29 f0       	breq	.+10     	; 0x1b5e <__vector_9+0x40>
	{
		(*g_callBackPtr0)();
    1b54:	e0 91 8b 00 	lds	r30, 0x008B
    1b58:	f0 91 8c 00 	lds	r31, 0x008C
    1b5c:	09 95       	icall
	}
}
    1b5e:	cf 91       	pop	r28
    1b60:	df 91       	pop	r29
    1b62:	ff 91       	pop	r31
    1b64:	ef 91       	pop	r30
    1b66:	bf 91       	pop	r27
    1b68:	af 91       	pop	r26
    1b6a:	9f 91       	pop	r25
    1b6c:	8f 91       	pop	r24
    1b6e:	7f 91       	pop	r23
    1b70:	6f 91       	pop	r22
    1b72:	5f 91       	pop	r21
    1b74:	4f 91       	pop	r20
    1b76:	3f 91       	pop	r19
    1b78:	2f 91       	pop	r18
    1b7a:	0f 90       	pop	r0
    1b7c:	0f be       	out	0x3f, r0	; 63
    1b7e:	0f 90       	pop	r0
    1b80:	1f 90       	pop	r1
    1b82:	18 95       	reti

00001b84 <__vector_6>:

ISR (TIMER1_COMPA_vect)

{
    1b84:	1f 92       	push	r1
    1b86:	0f 92       	push	r0
    1b88:	0f b6       	in	r0, 0x3f	; 63
    1b8a:	0f 92       	push	r0
    1b8c:	11 24       	eor	r1, r1
    1b8e:	2f 93       	push	r18
    1b90:	3f 93       	push	r19
    1b92:	4f 93       	push	r20
    1b94:	5f 93       	push	r21
    1b96:	6f 93       	push	r22
    1b98:	7f 93       	push	r23
    1b9a:	8f 93       	push	r24
    1b9c:	9f 93       	push	r25
    1b9e:	af 93       	push	r26
    1ba0:	bf 93       	push	r27
    1ba2:	ef 93       	push	r30
    1ba4:	ff 93       	push	r31
    1ba6:	df 93       	push	r29
    1ba8:	cf 93       	push	r28
    1baa:	cd b7       	in	r28, 0x3d	; 61
    1bac:	de b7       	in	r29, 0x3e	; 62
	if (g_callBackPtr1 != NULL_PTR)
    1bae:	80 91 8d 00 	lds	r24, 0x008D
    1bb2:	90 91 8e 00 	lds	r25, 0x008E
    1bb6:	00 97       	sbiw	r24, 0x00	; 0
    1bb8:	29 f0       	breq	.+10     	; 0x1bc4 <__vector_6+0x40>
	{
		(*g_callBackPtr1)();
    1bba:	e0 91 8d 00 	lds	r30, 0x008D
    1bbe:	f0 91 8e 00 	lds	r31, 0x008E
    1bc2:	09 95       	icall
	}
}
    1bc4:	cf 91       	pop	r28
    1bc6:	df 91       	pop	r29
    1bc8:	ff 91       	pop	r31
    1bca:	ef 91       	pop	r30
    1bcc:	bf 91       	pop	r27
    1bce:	af 91       	pop	r26
    1bd0:	9f 91       	pop	r25
    1bd2:	8f 91       	pop	r24
    1bd4:	7f 91       	pop	r23
    1bd6:	6f 91       	pop	r22
    1bd8:	5f 91       	pop	r21
    1bda:	4f 91       	pop	r20
    1bdc:	3f 91       	pop	r19
    1bde:	2f 91       	pop	r18
    1be0:	0f 90       	pop	r0
    1be2:	0f be       	out	0x3f, r0	; 63
    1be4:	0f 90       	pop	r0
    1be6:	1f 90       	pop	r1
    1be8:	18 95       	reti

00001bea <__vector_7>:

ISR (TIMER1_COMPB_vect)

{
    1bea:	1f 92       	push	r1
    1bec:	0f 92       	push	r0
    1bee:	0f b6       	in	r0, 0x3f	; 63
    1bf0:	0f 92       	push	r0
    1bf2:	11 24       	eor	r1, r1
    1bf4:	2f 93       	push	r18
    1bf6:	3f 93       	push	r19
    1bf8:	4f 93       	push	r20
    1bfa:	5f 93       	push	r21
    1bfc:	6f 93       	push	r22
    1bfe:	7f 93       	push	r23
    1c00:	8f 93       	push	r24
    1c02:	9f 93       	push	r25
    1c04:	af 93       	push	r26
    1c06:	bf 93       	push	r27
    1c08:	ef 93       	push	r30
    1c0a:	ff 93       	push	r31
    1c0c:	df 93       	push	r29
    1c0e:	cf 93       	push	r28
    1c10:	cd b7       	in	r28, 0x3d	; 61
    1c12:	de b7       	in	r29, 0x3e	; 62
	if (g_callBackPtr1 != NULL_PTR)
    1c14:	80 91 8d 00 	lds	r24, 0x008D
    1c18:	90 91 8e 00 	lds	r25, 0x008E
    1c1c:	00 97       	sbiw	r24, 0x00	; 0
    1c1e:	29 f0       	breq	.+10     	; 0x1c2a <__vector_7+0x40>
	{
		(*g_callBackPtr1)();
    1c20:	e0 91 8d 00 	lds	r30, 0x008D
    1c24:	f0 91 8e 00 	lds	r31, 0x008E
    1c28:	09 95       	icall
	}
}
    1c2a:	cf 91       	pop	r28
    1c2c:	df 91       	pop	r29
    1c2e:	ff 91       	pop	r31
    1c30:	ef 91       	pop	r30
    1c32:	bf 91       	pop	r27
    1c34:	af 91       	pop	r26
    1c36:	9f 91       	pop	r25
    1c38:	8f 91       	pop	r24
    1c3a:	7f 91       	pop	r23
    1c3c:	6f 91       	pop	r22
    1c3e:	5f 91       	pop	r21
    1c40:	4f 91       	pop	r20
    1c42:	3f 91       	pop	r19
    1c44:	2f 91       	pop	r18
    1c46:	0f 90       	pop	r0
    1c48:	0f be       	out	0x3f, r0	; 63
    1c4a:	0f 90       	pop	r0
    1c4c:	1f 90       	pop	r1
    1c4e:	18 95       	reti

00001c50 <__vector_8>:

ISR (TIMER1_OVF_vect)

{
    1c50:	1f 92       	push	r1
    1c52:	0f 92       	push	r0
    1c54:	0f b6       	in	r0, 0x3f	; 63
    1c56:	0f 92       	push	r0
    1c58:	11 24       	eor	r1, r1
    1c5a:	2f 93       	push	r18
    1c5c:	3f 93       	push	r19
    1c5e:	4f 93       	push	r20
    1c60:	5f 93       	push	r21
    1c62:	6f 93       	push	r22
    1c64:	7f 93       	push	r23
    1c66:	8f 93       	push	r24
    1c68:	9f 93       	push	r25
    1c6a:	af 93       	push	r26
    1c6c:	bf 93       	push	r27
    1c6e:	ef 93       	push	r30
    1c70:	ff 93       	push	r31
    1c72:	df 93       	push	r29
    1c74:	cf 93       	push	r28
    1c76:	cd b7       	in	r28, 0x3d	; 61
    1c78:	de b7       	in	r29, 0x3e	; 62
	if (g_callBackPtr1 != NULL_PTR)
    1c7a:	80 91 8d 00 	lds	r24, 0x008D
    1c7e:	90 91 8e 00 	lds	r25, 0x008E
    1c82:	00 97       	sbiw	r24, 0x00	; 0
    1c84:	29 f0       	breq	.+10     	; 0x1c90 <__vector_8+0x40>
	{
		(*g_callBackPtr1)();
    1c86:	e0 91 8d 00 	lds	r30, 0x008D
    1c8a:	f0 91 8e 00 	lds	r31, 0x008E
    1c8e:	09 95       	icall
	}
}
    1c90:	cf 91       	pop	r28
    1c92:	df 91       	pop	r29
    1c94:	ff 91       	pop	r31
    1c96:	ef 91       	pop	r30
    1c98:	bf 91       	pop	r27
    1c9a:	af 91       	pop	r26
    1c9c:	9f 91       	pop	r25
    1c9e:	8f 91       	pop	r24
    1ca0:	7f 91       	pop	r23
    1ca2:	6f 91       	pop	r22
    1ca4:	5f 91       	pop	r21
    1ca6:	4f 91       	pop	r20
    1ca8:	3f 91       	pop	r19
    1caa:	2f 91       	pop	r18
    1cac:	0f 90       	pop	r0
    1cae:	0f be       	out	0x3f, r0	; 63
    1cb0:	0f 90       	pop	r0
    1cb2:	1f 90       	pop	r1
    1cb4:	18 95       	reti

00001cb6 <__vector_3>:

ISR (TIMER2_COMP_vect)

{
    1cb6:	1f 92       	push	r1
    1cb8:	0f 92       	push	r0
    1cba:	0f b6       	in	r0, 0x3f	; 63
    1cbc:	0f 92       	push	r0
    1cbe:	11 24       	eor	r1, r1
    1cc0:	2f 93       	push	r18
    1cc2:	3f 93       	push	r19
    1cc4:	4f 93       	push	r20
    1cc6:	5f 93       	push	r21
    1cc8:	6f 93       	push	r22
    1cca:	7f 93       	push	r23
    1ccc:	8f 93       	push	r24
    1cce:	9f 93       	push	r25
    1cd0:	af 93       	push	r26
    1cd2:	bf 93       	push	r27
    1cd4:	ef 93       	push	r30
    1cd6:	ff 93       	push	r31
    1cd8:	df 93       	push	r29
    1cda:	cf 93       	push	r28
    1cdc:	cd b7       	in	r28, 0x3d	; 61
    1cde:	de b7       	in	r29, 0x3e	; 62
	if (g_callBackPtr2 != NULL_PTR)
    1ce0:	80 91 8f 00 	lds	r24, 0x008F
    1ce4:	90 91 90 00 	lds	r25, 0x0090
    1ce8:	00 97       	sbiw	r24, 0x00	; 0
    1cea:	29 f0       	breq	.+10     	; 0x1cf6 <__vector_3+0x40>
	{
		(*g_callBackPtr2)();
    1cec:	e0 91 8f 00 	lds	r30, 0x008F
    1cf0:	f0 91 90 00 	lds	r31, 0x0090
    1cf4:	09 95       	icall
	}
}
    1cf6:	cf 91       	pop	r28
    1cf8:	df 91       	pop	r29
    1cfa:	ff 91       	pop	r31
    1cfc:	ef 91       	pop	r30
    1cfe:	bf 91       	pop	r27
    1d00:	af 91       	pop	r26
    1d02:	9f 91       	pop	r25
    1d04:	8f 91       	pop	r24
    1d06:	7f 91       	pop	r23
    1d08:	6f 91       	pop	r22
    1d0a:	5f 91       	pop	r21
    1d0c:	4f 91       	pop	r20
    1d0e:	3f 91       	pop	r19
    1d10:	2f 91       	pop	r18
    1d12:	0f 90       	pop	r0
    1d14:	0f be       	out	0x3f, r0	; 63
    1d16:	0f 90       	pop	r0
    1d18:	1f 90       	pop	r1
    1d1a:	18 95       	reti

00001d1c <__vector_4>:

ISR (TIMER2_OVF_vect)

{
    1d1c:	1f 92       	push	r1
    1d1e:	0f 92       	push	r0
    1d20:	0f b6       	in	r0, 0x3f	; 63
    1d22:	0f 92       	push	r0
    1d24:	11 24       	eor	r1, r1
    1d26:	2f 93       	push	r18
    1d28:	3f 93       	push	r19
    1d2a:	4f 93       	push	r20
    1d2c:	5f 93       	push	r21
    1d2e:	6f 93       	push	r22
    1d30:	7f 93       	push	r23
    1d32:	8f 93       	push	r24
    1d34:	9f 93       	push	r25
    1d36:	af 93       	push	r26
    1d38:	bf 93       	push	r27
    1d3a:	ef 93       	push	r30
    1d3c:	ff 93       	push	r31
    1d3e:	df 93       	push	r29
    1d40:	cf 93       	push	r28
    1d42:	cd b7       	in	r28, 0x3d	; 61
    1d44:	de b7       	in	r29, 0x3e	; 62
	if (g_callBackPtr2 != NULL_PTR)
    1d46:	80 91 8f 00 	lds	r24, 0x008F
    1d4a:	90 91 90 00 	lds	r25, 0x0090
    1d4e:	00 97       	sbiw	r24, 0x00	; 0
    1d50:	29 f0       	breq	.+10     	; 0x1d5c <__vector_4+0x40>
	{
		(*g_callBackPtr2)();
    1d52:	e0 91 8f 00 	lds	r30, 0x008F
    1d56:	f0 91 90 00 	lds	r31, 0x0090
    1d5a:	09 95       	icall
	}
}
    1d5c:	cf 91       	pop	r28
    1d5e:	df 91       	pop	r29
    1d60:	ff 91       	pop	r31
    1d62:	ef 91       	pop	r30
    1d64:	bf 91       	pop	r27
    1d66:	af 91       	pop	r26
    1d68:	9f 91       	pop	r25
    1d6a:	8f 91       	pop	r24
    1d6c:	7f 91       	pop	r23
    1d6e:	6f 91       	pop	r22
    1d70:	5f 91       	pop	r21
    1d72:	4f 91       	pop	r20
    1d74:	3f 91       	pop	r19
    1d76:	2f 91       	pop	r18
    1d78:	0f 90       	pop	r0
    1d7a:	0f be       	out	0x3f, r0	; 63
    1d7c:	0f 90       	pop	r0
    1d7e:	1f 90       	pop	r1
    1d80:	18 95       	reti

00001d82 <Timer_Init>:

void Timer_Init (uint8 TimerNumber,const Timer_Config *config_Ptr )
{
    1d82:	df 93       	push	r29
    1d84:	cf 93       	push	r28
    1d86:	00 d0       	rcall	.+0      	; 0x1d88 <Timer_Init+0x6>
    1d88:	0f 92       	push	r0
    1d8a:	cd b7       	in	r28, 0x3d	; 61
    1d8c:	de b7       	in	r29, 0x3e	; 62
    1d8e:	89 83       	std	Y+1, r24	; 0x01
    1d90:	7b 83       	std	Y+3, r23	; 0x03
    1d92:	6a 83       	std	Y+2, r22	; 0x02
	if (TimerNumber == Timer0)
    1d94:	89 81       	ldd	r24, Y+1	; 0x01
    1d96:	88 23       	and	r24, r24
    1d98:	09 f0       	breq	.+2      	; 0x1d9c <Timer_Init+0x1a>
    1d9a:	6e c0       	rjmp	.+220    	; 0x1e78 <Timer_Init+0xf6>
	{
		TCNT0 = config_Ptr ->Init_Timer_Value;
    1d9c:	a2 e5       	ldi	r26, 0x52	; 82
    1d9e:	b0 e0       	ldi	r27, 0x00	; 0
    1da0:	ea 81       	ldd	r30, Y+2	; 0x02
    1da2:	fb 81       	ldd	r31, Y+3	; 0x03
    1da4:	84 81       	ldd	r24, Z+4	; 0x04
    1da6:	8c 93       	st	X, r24

		TCCR0 =  (TCCR0 & 0xF8) | (config_Ptr ->prescaler);
    1da8:	a3 e5       	ldi	r26, 0x53	; 83
    1daa:	b0 e0       	ldi	r27, 0x00	; 0
    1dac:	e3 e5       	ldi	r30, 0x53	; 83
    1dae:	f0 e0       	ldi	r31, 0x00	; 0
    1db0:	80 81       	ld	r24, Z
    1db2:	98 2f       	mov	r25, r24
    1db4:	98 7f       	andi	r25, 0xF8	; 248
    1db6:	ea 81       	ldd	r30, Y+2	; 0x02
    1db8:	fb 81       	ldd	r31, Y+3	; 0x03
    1dba:	81 81       	ldd	r24, Z+1	; 0x01
    1dbc:	89 2b       	or	r24, r25
    1dbe:	8c 93       	st	X, r24

		SET_BIT( TCCR0, FOC0);
    1dc0:	a3 e5       	ldi	r26, 0x53	; 83
    1dc2:	b0 e0       	ldi	r27, 0x00	; 0
    1dc4:	e3 e5       	ldi	r30, 0x53	; 83
    1dc6:	f0 e0       	ldi	r31, 0x00	; 0
    1dc8:	80 81       	ld	r24, Z
    1dca:	80 68       	ori	r24, 0x80	; 128
    1dcc:	8c 93       	st	X, r24


		if ((config_Ptr ->mode) == Normal)
    1dce:	ea 81       	ldd	r30, Y+2	; 0x02
    1dd0:	fb 81       	ldd	r31, Y+3	; 0x03
    1dd2:	80 81       	ld	r24, Z
    1dd4:	88 23       	and	r24, r24
    1dd6:	b1 f4       	brne	.+44     	; 0x1e04 <Timer_Init+0x82>
		{
			CLEAR_BIT( TCCR0, WGM00);
    1dd8:	a3 e5       	ldi	r26, 0x53	; 83
    1dda:	b0 e0       	ldi	r27, 0x00	; 0
    1ddc:	e3 e5       	ldi	r30, 0x53	; 83
    1dde:	f0 e0       	ldi	r31, 0x00	; 0
    1de0:	80 81       	ld	r24, Z
    1de2:	8f 7b       	andi	r24, 0xBF	; 191
    1de4:	8c 93       	st	X, r24

			CLEAR_BIT( TCCR0, WGM01);
    1de6:	a3 e5       	ldi	r26, 0x53	; 83
    1de8:	b0 e0       	ldi	r27, 0x00	; 0
    1dea:	e3 e5       	ldi	r30, 0x53	; 83
    1dec:	f0 e0       	ldi	r31, 0x00	; 0
    1dee:	80 81       	ld	r24, Z
    1df0:	87 7f       	andi	r24, 0xF7	; 247
    1df2:	8c 93       	st	X, r24

			SET_BIT (TIMSK , TOIE0);
    1df4:	a9 e5       	ldi	r26, 0x59	; 89
    1df6:	b0 e0       	ldi	r27, 0x00	; 0
    1df8:	e9 e5       	ldi	r30, 0x59	; 89
    1dfa:	f0 e0       	ldi	r31, 0x00	; 0
    1dfc:	80 81       	ld	r24, Z
    1dfe:	81 60       	ori	r24, 0x01	; 1
    1e00:	8c 93       	st	X, r24
    1e02:	7f c1       	rjmp	.+766    	; 0x2102 <Timer_Init+0x380>
		}
		else if ((config_Ptr ->mode) == CTC)
    1e04:	ea 81       	ldd	r30, Y+2	; 0x02
    1e06:	fb 81       	ldd	r31, Y+3	; 0x03
    1e08:	80 81       	ld	r24, Z
    1e0a:	82 30       	cpi	r24, 0x02	; 2
    1e0c:	09 f0       	breq	.+2      	; 0x1e10 <Timer_Init+0x8e>
    1e0e:	79 c1       	rjmp	.+754    	; 0x2102 <Timer_Init+0x380>
		{
			CLEAR_BIT( TCCR0, WGM00);
    1e10:	a3 e5       	ldi	r26, 0x53	; 83
    1e12:	b0 e0       	ldi	r27, 0x00	; 0
    1e14:	e3 e5       	ldi	r30, 0x53	; 83
    1e16:	f0 e0       	ldi	r31, 0x00	; 0
    1e18:	80 81       	ld	r24, Z
    1e1a:	8f 7b       	andi	r24, 0xBF	; 191
    1e1c:	8c 93       	st	X, r24

			SET_BIT( TCCR0, WGM01);
    1e1e:	a3 e5       	ldi	r26, 0x53	; 83
    1e20:	b0 e0       	ldi	r27, 0x00	; 0
    1e22:	e3 e5       	ldi	r30, 0x53	; 83
    1e24:	f0 e0       	ldi	r31, 0x00	; 0
    1e26:	80 81       	ld	r24, Z
    1e28:	88 60       	ori	r24, 0x08	; 8
    1e2a:	8c 93       	st	X, r24

			OCR0 = config_Ptr ->Final_Timer_Value;
    1e2c:	2c e5       	ldi	r18, 0x5C	; 92
    1e2e:	30 e0       	ldi	r19, 0x00	; 0
    1e30:	ea 81       	ldd	r30, Y+2	; 0x02
    1e32:	fb 81       	ldd	r31, Y+3	; 0x03
    1e34:	85 81       	ldd	r24, Z+5	; 0x05
    1e36:	96 81       	ldd	r25, Z+6	; 0x06
    1e38:	a7 81       	ldd	r26, Z+7	; 0x07
    1e3a:	b0 85       	ldd	r27, Z+8	; 0x08
    1e3c:	f9 01       	movw	r30, r18
    1e3e:	80 83       	st	Z, r24

			TCCR0 = (TCCR0 & 0XCF) | ((config_Ptr->CompareMode)<<4);
    1e40:	a3 e5       	ldi	r26, 0x53	; 83
    1e42:	b0 e0       	ldi	r27, 0x00	; 0
    1e44:	e3 e5       	ldi	r30, 0x53	; 83
    1e46:	f0 e0       	ldi	r31, 0x00	; 0
    1e48:	80 81       	ld	r24, Z
    1e4a:	28 2f       	mov	r18, r24
    1e4c:	2f 7c       	andi	r18, 0xCF	; 207
    1e4e:	ea 81       	ldd	r30, Y+2	; 0x02
    1e50:	fb 81       	ldd	r31, Y+3	; 0x03
    1e52:	82 81       	ldd	r24, Z+2	; 0x02
    1e54:	88 2f       	mov	r24, r24
    1e56:	90 e0       	ldi	r25, 0x00	; 0
    1e58:	82 95       	swap	r24
    1e5a:	92 95       	swap	r25
    1e5c:	90 7f       	andi	r25, 0xF0	; 240
    1e5e:	98 27       	eor	r25, r24
    1e60:	80 7f       	andi	r24, 0xF0	; 240
    1e62:	98 27       	eor	r25, r24
    1e64:	82 2b       	or	r24, r18
    1e66:	8c 93       	st	X, r24

			SET_BIT(TIMSK, OCIE0);
    1e68:	a9 e5       	ldi	r26, 0x59	; 89
    1e6a:	b0 e0       	ldi	r27, 0x00	; 0
    1e6c:	e9 e5       	ldi	r30, 0x59	; 89
    1e6e:	f0 e0       	ldi	r31, 0x00	; 0
    1e70:	80 81       	ld	r24, Z
    1e72:	82 60       	ori	r24, 0x02	; 2
    1e74:	8c 93       	st	X, r24
    1e76:	45 c1       	rjmp	.+650    	; 0x2102 <Timer_Init+0x380>
		}
	}
	else if (TimerNumber == Timer1)
    1e78:	89 81       	ldd	r24, Y+1	; 0x01
    1e7a:	81 30       	cpi	r24, 0x01	; 1
    1e7c:	09 f0       	breq	.+2      	; 0x1e80 <Timer_Init+0xfe>
    1e7e:	d1 c0       	rjmp	.+418    	; 0x2022 <Timer_Init+0x2a0>
	{
		SET_BIT ( TCCR1A, FOC1A );
    1e80:	af e4       	ldi	r26, 0x4F	; 79
    1e82:	b0 e0       	ldi	r27, 0x00	; 0
    1e84:	ef e4       	ldi	r30, 0x4F	; 79
    1e86:	f0 e0       	ldi	r31, 0x00	; 0
    1e88:	80 81       	ld	r24, Z
    1e8a:	88 60       	ori	r24, 0x08	; 8
    1e8c:	8c 93       	st	X, r24

		SET_BIT ( TCCR1B, FOC1B );
    1e8e:	ae e4       	ldi	r26, 0x4E	; 78
    1e90:	b0 e0       	ldi	r27, 0x00	; 0
    1e92:	ee e4       	ldi	r30, 0x4E	; 78
    1e94:	f0 e0       	ldi	r31, 0x00	; 0
    1e96:	80 81       	ld	r24, Z
    1e98:	84 60       	ori	r24, 0x04	; 4
    1e9a:	8c 93       	st	X, r24

		TCNT1 = config_Ptr ->Init_Timer_Value;
    1e9c:	ac e4       	ldi	r26, 0x4C	; 76
    1e9e:	b0 e0       	ldi	r27, 0x00	; 0
    1ea0:	ea 81       	ldd	r30, Y+2	; 0x02
    1ea2:	fb 81       	ldd	r31, Y+3	; 0x03
    1ea4:	84 81       	ldd	r24, Z+4	; 0x04
    1ea6:	88 2f       	mov	r24, r24
    1ea8:	90 e0       	ldi	r25, 0x00	; 0
    1eaa:	11 96       	adiw	r26, 0x01	; 1
    1eac:	9c 93       	st	X, r25
    1eae:	8e 93       	st	-X, r24

		TCCR1B = (TCCR1B & 0XF8) | (config_Ptr ->prescaler);
    1eb0:	ae e4       	ldi	r26, 0x4E	; 78
    1eb2:	b0 e0       	ldi	r27, 0x00	; 0
    1eb4:	ee e4       	ldi	r30, 0x4E	; 78
    1eb6:	f0 e0       	ldi	r31, 0x00	; 0
    1eb8:	80 81       	ld	r24, Z
    1eba:	98 2f       	mov	r25, r24
    1ebc:	98 7f       	andi	r25, 0xF8	; 248
    1ebe:	ea 81       	ldd	r30, Y+2	; 0x02
    1ec0:	fb 81       	ldd	r31, Y+3	; 0x03
    1ec2:	81 81       	ldd	r24, Z+1	; 0x01
    1ec4:	89 2b       	or	r24, r25
    1ec6:	8c 93       	st	X, r24

		if ((config_Ptr ->mode) == Normal)
    1ec8:	ea 81       	ldd	r30, Y+2	; 0x02
    1eca:	fb 81       	ldd	r31, Y+3	; 0x03
    1ecc:	80 81       	ld	r24, Z
    1ece:	88 23       	and	r24, r24
    1ed0:	09 f0       	breq	.+2      	; 0x1ed4 <Timer_Init+0x152>
    1ed2:	40 c0       	rjmp	.+128    	; 0x1f54 <Timer_Init+0x1d2>
		{
			CLEAR_BIT ( TCCR1A, COM1B0 );
    1ed4:	af e4       	ldi	r26, 0x4F	; 79
    1ed6:	b0 e0       	ldi	r27, 0x00	; 0
    1ed8:	ef e4       	ldi	r30, 0x4F	; 79
    1eda:	f0 e0       	ldi	r31, 0x00	; 0
    1edc:	80 81       	ld	r24, Z
    1ede:	8f 7e       	andi	r24, 0xEF	; 239
    1ee0:	8c 93       	st	X, r24

			CLEAR_BIT ( TCCR1A, COM1B1 );
    1ee2:	af e4       	ldi	r26, 0x4F	; 79
    1ee4:	b0 e0       	ldi	r27, 0x00	; 0
    1ee6:	ef e4       	ldi	r30, 0x4F	; 79
    1ee8:	f0 e0       	ldi	r31, 0x00	; 0
    1eea:	80 81       	ld	r24, Z
    1eec:	8f 7d       	andi	r24, 0xDF	; 223
    1eee:	8c 93       	st	X, r24

			CLEAR_BIT ( TCCR1A, COM1A0 );
    1ef0:	af e4       	ldi	r26, 0x4F	; 79
    1ef2:	b0 e0       	ldi	r27, 0x00	; 0
    1ef4:	ef e4       	ldi	r30, 0x4F	; 79
    1ef6:	f0 e0       	ldi	r31, 0x00	; 0
    1ef8:	80 81       	ld	r24, Z
    1efa:	8f 7b       	andi	r24, 0xBF	; 191
    1efc:	8c 93       	st	X, r24

			CLEAR_BIT ( TCCR1A, COM1A1 );
    1efe:	af e4       	ldi	r26, 0x4F	; 79
    1f00:	b0 e0       	ldi	r27, 0x00	; 0
    1f02:	ef e4       	ldi	r30, 0x4F	; 79
    1f04:	f0 e0       	ldi	r31, 0x00	; 0
    1f06:	80 81       	ld	r24, Z
    1f08:	8f 77       	andi	r24, 0x7F	; 127
    1f0a:	8c 93       	st	X, r24


			CLEAR_BIT ( TCCR1B, WGM10 );
    1f0c:	ae e4       	ldi	r26, 0x4E	; 78
    1f0e:	b0 e0       	ldi	r27, 0x00	; 0
    1f10:	ee e4       	ldi	r30, 0x4E	; 78
    1f12:	f0 e0       	ldi	r31, 0x00	; 0
    1f14:	80 81       	ld	r24, Z
    1f16:	8e 7f       	andi	r24, 0xFE	; 254
    1f18:	8c 93       	st	X, r24

			CLEAR_BIT ( TCCR1B, WGM11 );
    1f1a:	ae e4       	ldi	r26, 0x4E	; 78
    1f1c:	b0 e0       	ldi	r27, 0x00	; 0
    1f1e:	ee e4       	ldi	r30, 0x4E	; 78
    1f20:	f0 e0       	ldi	r31, 0x00	; 0
    1f22:	80 81       	ld	r24, Z
    1f24:	8d 7f       	andi	r24, 0xFD	; 253
    1f26:	8c 93       	st	X, r24

			CLEAR_BIT ( TCCR1B, WGM12 );
    1f28:	ae e4       	ldi	r26, 0x4E	; 78
    1f2a:	b0 e0       	ldi	r27, 0x00	; 0
    1f2c:	ee e4       	ldi	r30, 0x4E	; 78
    1f2e:	f0 e0       	ldi	r31, 0x00	; 0
    1f30:	80 81       	ld	r24, Z
    1f32:	87 7f       	andi	r24, 0xF7	; 247
    1f34:	8c 93       	st	X, r24

			CLEAR_BIT ( TCCR1B, WGM13 );
    1f36:	ae e4       	ldi	r26, 0x4E	; 78
    1f38:	b0 e0       	ldi	r27, 0x00	; 0
    1f3a:	ee e4       	ldi	r30, 0x4E	; 78
    1f3c:	f0 e0       	ldi	r31, 0x00	; 0
    1f3e:	80 81       	ld	r24, Z
    1f40:	8f 7e       	andi	r24, 0xEF	; 239
    1f42:	8c 93       	st	X, r24


			SET_BIT ( TIMSK, TOIE1 );
    1f44:	a9 e5       	ldi	r26, 0x59	; 89
    1f46:	b0 e0       	ldi	r27, 0x00	; 0
    1f48:	e9 e5       	ldi	r30, 0x59	; 89
    1f4a:	f0 e0       	ldi	r31, 0x00	; 0
    1f4c:	80 81       	ld	r24, Z
    1f4e:	84 60       	ori	r24, 0x04	; 4
    1f50:	8c 93       	st	X, r24
    1f52:	d7 c0       	rjmp	.+430    	; 0x2102 <Timer_Init+0x380>
		}
		else if ((config_Ptr ->mode) == CTC)
    1f54:	ea 81       	ldd	r30, Y+2	; 0x02
    1f56:	fb 81       	ldd	r31, Y+3	; 0x03
    1f58:	80 81       	ld	r24, Z
    1f5a:	82 30       	cpi	r24, 0x02	; 2
    1f5c:	09 f0       	breq	.+2      	; 0x1f60 <Timer_Init+0x1de>
    1f5e:	d1 c0       	rjmp	.+418    	; 0x2102 <Timer_Init+0x380>
		{
			TCCR1A = ( TCCR1A & 0xF8) | ((config_Ptr -> CompareMode)<<4);
    1f60:	af e4       	ldi	r26, 0x4F	; 79
    1f62:	b0 e0       	ldi	r27, 0x00	; 0
    1f64:	ef e4       	ldi	r30, 0x4F	; 79
    1f66:	f0 e0       	ldi	r31, 0x00	; 0
    1f68:	80 81       	ld	r24, Z
    1f6a:	28 2f       	mov	r18, r24
    1f6c:	28 7f       	andi	r18, 0xF8	; 248
    1f6e:	ea 81       	ldd	r30, Y+2	; 0x02
    1f70:	fb 81       	ldd	r31, Y+3	; 0x03
    1f72:	82 81       	ldd	r24, Z+2	; 0x02
    1f74:	88 2f       	mov	r24, r24
    1f76:	90 e0       	ldi	r25, 0x00	; 0
    1f78:	82 95       	swap	r24
    1f7a:	92 95       	swap	r25
    1f7c:	90 7f       	andi	r25, 0xF0	; 240
    1f7e:	98 27       	eor	r25, r24
    1f80:	80 7f       	andi	r24, 0xF0	; 240
    1f82:	98 27       	eor	r25, r24
    1f84:	82 2b       	or	r24, r18
    1f86:	8c 93       	st	X, r24

			CLEAR_BIT ( TCCR1A, WGM10);
    1f88:	af e4       	ldi	r26, 0x4F	; 79
    1f8a:	b0 e0       	ldi	r27, 0x00	; 0
    1f8c:	ef e4       	ldi	r30, 0x4F	; 79
    1f8e:	f0 e0       	ldi	r31, 0x00	; 0
    1f90:	80 81       	ld	r24, Z
    1f92:	8e 7f       	andi	r24, 0xFE	; 254
    1f94:	8c 93       	st	X, r24

			CLEAR_BIT ( TCCR1A, WGM11);
    1f96:	af e4       	ldi	r26, 0x4F	; 79
    1f98:	b0 e0       	ldi	r27, 0x00	; 0
    1f9a:	ef e4       	ldi	r30, 0x4F	; 79
    1f9c:	f0 e0       	ldi	r31, 0x00	; 0
    1f9e:	80 81       	ld	r24, Z
    1fa0:	8d 7f       	andi	r24, 0xFD	; 253
    1fa2:	8c 93       	st	X, r24

			SET_BIT ( TCCR1B, WGM12);
    1fa4:	ae e4       	ldi	r26, 0x4E	; 78
    1fa6:	b0 e0       	ldi	r27, 0x00	; 0
    1fa8:	ee e4       	ldi	r30, 0x4E	; 78
    1faa:	f0 e0       	ldi	r31, 0x00	; 0
    1fac:	80 81       	ld	r24, Z
    1fae:	88 60       	ori	r24, 0x08	; 8
    1fb0:	8c 93       	st	X, r24

			CLEAR_BIT ( TCCR1B, WGM13);
    1fb2:	ae e4       	ldi	r26, 0x4E	; 78
    1fb4:	b0 e0       	ldi	r27, 0x00	; 0
    1fb6:	ee e4       	ldi	r30, 0x4E	; 78
    1fb8:	f0 e0       	ldi	r31, 0x00	; 0
    1fba:	80 81       	ld	r24, Z
    1fbc:	8f 7e       	andi	r24, 0xEF	; 239
    1fbe:	8c 93       	st	X, r24

			if ((config_Ptr -> Channel) == 'A')
    1fc0:	ea 81       	ldd	r30, Y+2	; 0x02
    1fc2:	fb 81       	ldd	r31, Y+3	; 0x03
    1fc4:	83 81       	ldd	r24, Z+3	; 0x03
    1fc6:	81 34       	cpi	r24, 0x41	; 65
    1fc8:	99 f4       	brne	.+38     	; 0x1ff0 <Timer_Init+0x26e>
			{
				OCR1A = config_Ptr -> Final_Timer_Value;
    1fca:	2a e4       	ldi	r18, 0x4A	; 74
    1fcc:	30 e0       	ldi	r19, 0x00	; 0
    1fce:	ea 81       	ldd	r30, Y+2	; 0x02
    1fd0:	fb 81       	ldd	r31, Y+3	; 0x03
    1fd2:	85 81       	ldd	r24, Z+5	; 0x05
    1fd4:	96 81       	ldd	r25, Z+6	; 0x06
    1fd6:	a7 81       	ldd	r26, Z+7	; 0x07
    1fd8:	b0 85       	ldd	r27, Z+8	; 0x08
    1fda:	f9 01       	movw	r30, r18
    1fdc:	91 83       	std	Z+1, r25	; 0x01
    1fde:	80 83       	st	Z, r24

				SET_BIT ( TIMSK, OCIE1A);
    1fe0:	a9 e5       	ldi	r26, 0x59	; 89
    1fe2:	b0 e0       	ldi	r27, 0x00	; 0
    1fe4:	e9 e5       	ldi	r30, 0x59	; 89
    1fe6:	f0 e0       	ldi	r31, 0x00	; 0
    1fe8:	80 81       	ld	r24, Z
    1fea:	80 61       	ori	r24, 0x10	; 16
    1fec:	8c 93       	st	X, r24
    1fee:	89 c0       	rjmp	.+274    	; 0x2102 <Timer_Init+0x380>
			}
			else if ((config_Ptr -> Channel) == 'B')
    1ff0:	ea 81       	ldd	r30, Y+2	; 0x02
    1ff2:	fb 81       	ldd	r31, Y+3	; 0x03
    1ff4:	83 81       	ldd	r24, Z+3	; 0x03
    1ff6:	82 34       	cpi	r24, 0x42	; 66
    1ff8:	09 f0       	breq	.+2      	; 0x1ffc <Timer_Init+0x27a>
    1ffa:	83 c0       	rjmp	.+262    	; 0x2102 <Timer_Init+0x380>
			{
				OCR1B = config_Ptr -> Final_Timer_Value;
    1ffc:	28 e4       	ldi	r18, 0x48	; 72
    1ffe:	30 e0       	ldi	r19, 0x00	; 0
    2000:	ea 81       	ldd	r30, Y+2	; 0x02
    2002:	fb 81       	ldd	r31, Y+3	; 0x03
    2004:	85 81       	ldd	r24, Z+5	; 0x05
    2006:	96 81       	ldd	r25, Z+6	; 0x06
    2008:	a7 81       	ldd	r26, Z+7	; 0x07
    200a:	b0 85       	ldd	r27, Z+8	; 0x08
    200c:	f9 01       	movw	r30, r18
    200e:	91 83       	std	Z+1, r25	; 0x01
    2010:	80 83       	st	Z, r24

				SET_BIT ( TIMSK, OCIE1B);
    2012:	a9 e5       	ldi	r26, 0x59	; 89
    2014:	b0 e0       	ldi	r27, 0x00	; 0
    2016:	e9 e5       	ldi	r30, 0x59	; 89
    2018:	f0 e0       	ldi	r31, 0x00	; 0
    201a:	80 81       	ld	r24, Z
    201c:	88 60       	ori	r24, 0x08	; 8
    201e:	8c 93       	st	X, r24
    2020:	70 c0       	rjmp	.+224    	; 0x2102 <Timer_Init+0x380>
			}
		}
	}
	else if (TimerNumber == Timer2)
    2022:	89 81       	ldd	r24, Y+1	; 0x01
    2024:	82 30       	cpi	r24, 0x02	; 2
    2026:	09 f0       	breq	.+2      	; 0x202a <Timer_Init+0x2a8>
    2028:	6c c0       	rjmp	.+216    	; 0x2102 <Timer_Init+0x380>
	{

			TCNT2 = config_Ptr ->Init_Timer_Value;
    202a:	a4 e4       	ldi	r26, 0x44	; 68
    202c:	b0 e0       	ldi	r27, 0x00	; 0
    202e:	ea 81       	ldd	r30, Y+2	; 0x02
    2030:	fb 81       	ldd	r31, Y+3	; 0x03
    2032:	84 81       	ldd	r24, Z+4	; 0x04
    2034:	8c 93       	st	X, r24

			TCCR2 =  (TCCR2 & 0xF8) | (config_Ptr ->prescaler);
    2036:	a5 e4       	ldi	r26, 0x45	; 69
    2038:	b0 e0       	ldi	r27, 0x00	; 0
    203a:	e5 e4       	ldi	r30, 0x45	; 69
    203c:	f0 e0       	ldi	r31, 0x00	; 0
    203e:	80 81       	ld	r24, Z
    2040:	98 2f       	mov	r25, r24
    2042:	98 7f       	andi	r25, 0xF8	; 248
    2044:	ea 81       	ldd	r30, Y+2	; 0x02
    2046:	fb 81       	ldd	r31, Y+3	; 0x03
    2048:	81 81       	ldd	r24, Z+1	; 0x01
    204a:	89 2b       	or	r24, r25
    204c:	8c 93       	st	X, r24

			SET_BIT( TCCR2, FOC2);
    204e:	a5 e4       	ldi	r26, 0x45	; 69
    2050:	b0 e0       	ldi	r27, 0x00	; 0
    2052:	e5 e4       	ldi	r30, 0x45	; 69
    2054:	f0 e0       	ldi	r31, 0x00	; 0
    2056:	80 81       	ld	r24, Z
    2058:	80 68       	ori	r24, 0x80	; 128
    205a:	8c 93       	st	X, r24

			if ((config_Ptr ->mode) == Normal)
    205c:	ea 81       	ldd	r30, Y+2	; 0x02
    205e:	fb 81       	ldd	r31, Y+3	; 0x03
    2060:	80 81       	ld	r24, Z
    2062:	88 23       	and	r24, r24
    2064:	b1 f4       	brne	.+44     	; 0x2092 <Timer_Init+0x310>
			{
				CLEAR_BIT( TCCR2, WGM20);
    2066:	a5 e4       	ldi	r26, 0x45	; 69
    2068:	b0 e0       	ldi	r27, 0x00	; 0
    206a:	e5 e4       	ldi	r30, 0x45	; 69
    206c:	f0 e0       	ldi	r31, 0x00	; 0
    206e:	80 81       	ld	r24, Z
    2070:	8f 7b       	andi	r24, 0xBF	; 191
    2072:	8c 93       	st	X, r24

				CLEAR_BIT( TCCR2, WGM21);
    2074:	a5 e4       	ldi	r26, 0x45	; 69
    2076:	b0 e0       	ldi	r27, 0x00	; 0
    2078:	e5 e4       	ldi	r30, 0x45	; 69
    207a:	f0 e0       	ldi	r31, 0x00	; 0
    207c:	80 81       	ld	r24, Z
    207e:	87 7f       	andi	r24, 0xF7	; 247
    2080:	8c 93       	st	X, r24

				SET_BIT ( TIMSK, TOIE0);
    2082:	a9 e5       	ldi	r26, 0x59	; 89
    2084:	b0 e0       	ldi	r27, 0x00	; 0
    2086:	e9 e5       	ldi	r30, 0x59	; 89
    2088:	f0 e0       	ldi	r31, 0x00	; 0
    208a:	80 81       	ld	r24, Z
    208c:	81 60       	ori	r24, 0x01	; 1
    208e:	8c 93       	st	X, r24
    2090:	38 c0       	rjmp	.+112    	; 0x2102 <Timer_Init+0x380>
			}
			else if ((config_Ptr ->mode) == CTC)
    2092:	ea 81       	ldd	r30, Y+2	; 0x02
    2094:	fb 81       	ldd	r31, Y+3	; 0x03
    2096:	80 81       	ld	r24, Z
    2098:	82 30       	cpi	r24, 0x02	; 2
    209a:	99 f5       	brne	.+102    	; 0x2102 <Timer_Init+0x380>
			{
				CLEAR_BIT( TCCR2, WGM20);
    209c:	a5 e4       	ldi	r26, 0x45	; 69
    209e:	b0 e0       	ldi	r27, 0x00	; 0
    20a0:	e5 e4       	ldi	r30, 0x45	; 69
    20a2:	f0 e0       	ldi	r31, 0x00	; 0
    20a4:	80 81       	ld	r24, Z
    20a6:	8f 7b       	andi	r24, 0xBF	; 191
    20a8:	8c 93       	st	X, r24

				SET_BIT( TCCR2, WGM21);
    20aa:	a5 e4       	ldi	r26, 0x45	; 69
    20ac:	b0 e0       	ldi	r27, 0x00	; 0
    20ae:	e5 e4       	ldi	r30, 0x45	; 69
    20b0:	f0 e0       	ldi	r31, 0x00	; 0
    20b2:	80 81       	ld	r24, Z
    20b4:	88 60       	ori	r24, 0x08	; 8
    20b6:	8c 93       	st	X, r24

				OCR2 = config_Ptr ->Final_Timer_Value;
    20b8:	23 e4       	ldi	r18, 0x43	; 67
    20ba:	30 e0       	ldi	r19, 0x00	; 0
    20bc:	ea 81       	ldd	r30, Y+2	; 0x02
    20be:	fb 81       	ldd	r31, Y+3	; 0x03
    20c0:	85 81       	ldd	r24, Z+5	; 0x05
    20c2:	96 81       	ldd	r25, Z+6	; 0x06
    20c4:	a7 81       	ldd	r26, Z+7	; 0x07
    20c6:	b0 85       	ldd	r27, Z+8	; 0x08
    20c8:	f9 01       	movw	r30, r18
    20ca:	80 83       	st	Z, r24

				TCCR2 = (TCCR2 & 0XCF) | ((config_Ptr->CompareMode)<<4);
    20cc:	a5 e4       	ldi	r26, 0x45	; 69
    20ce:	b0 e0       	ldi	r27, 0x00	; 0
    20d0:	e5 e4       	ldi	r30, 0x45	; 69
    20d2:	f0 e0       	ldi	r31, 0x00	; 0
    20d4:	80 81       	ld	r24, Z
    20d6:	28 2f       	mov	r18, r24
    20d8:	2f 7c       	andi	r18, 0xCF	; 207
    20da:	ea 81       	ldd	r30, Y+2	; 0x02
    20dc:	fb 81       	ldd	r31, Y+3	; 0x03
    20de:	82 81       	ldd	r24, Z+2	; 0x02
    20e0:	88 2f       	mov	r24, r24
    20e2:	90 e0       	ldi	r25, 0x00	; 0
    20e4:	82 95       	swap	r24
    20e6:	92 95       	swap	r25
    20e8:	90 7f       	andi	r25, 0xF0	; 240
    20ea:	98 27       	eor	r25, r24
    20ec:	80 7f       	andi	r24, 0xF0	; 240
    20ee:	98 27       	eor	r25, r24
    20f0:	82 2b       	or	r24, r18
    20f2:	8c 93       	st	X, r24

				SET_BIT( TIMSK, OCIE2);
    20f4:	a9 e5       	ldi	r26, 0x59	; 89
    20f6:	b0 e0       	ldi	r27, 0x00	; 0
    20f8:	e9 e5       	ldi	r30, 0x59	; 89
    20fa:	f0 e0       	ldi	r31, 0x00	; 0
    20fc:	80 81       	ld	r24, Z
    20fe:	80 68       	ori	r24, 0x80	; 128
    2100:	8c 93       	st	X, r24
			}
	}
}
    2102:	0f 90       	pop	r0
    2104:	0f 90       	pop	r0
    2106:	0f 90       	pop	r0
    2108:	cf 91       	pop	r28
    210a:	df 91       	pop	r29
    210c:	08 95       	ret

0000210e <Timer0_setCallBack>:

void Timer0_setCallBack(void(*a_ptr)(void))
{
    210e:	df 93       	push	r29
    2110:	cf 93       	push	r28
    2112:	00 d0       	rcall	.+0      	; 0x2114 <Timer0_setCallBack+0x6>
    2114:	cd b7       	in	r28, 0x3d	; 61
    2116:	de b7       	in	r29, 0x3e	; 62
    2118:	9a 83       	std	Y+2, r25	; 0x02
    211a:	89 83       	std	Y+1, r24	; 0x01
	g_callBackPtr0 = a_ptr;
    211c:	89 81       	ldd	r24, Y+1	; 0x01
    211e:	9a 81       	ldd	r25, Y+2	; 0x02
    2120:	90 93 8c 00 	sts	0x008C, r25
    2124:	80 93 8b 00 	sts	0x008B, r24
}
    2128:	0f 90       	pop	r0
    212a:	0f 90       	pop	r0
    212c:	cf 91       	pop	r28
    212e:	df 91       	pop	r29
    2130:	08 95       	ret

00002132 <Timer1_setCallBack>:

void Timer1_setCallBack(void(*a_ptr)(void))
{
    2132:	df 93       	push	r29
    2134:	cf 93       	push	r28
    2136:	00 d0       	rcall	.+0      	; 0x2138 <Timer1_setCallBack+0x6>
    2138:	cd b7       	in	r28, 0x3d	; 61
    213a:	de b7       	in	r29, 0x3e	; 62
    213c:	9a 83       	std	Y+2, r25	; 0x02
    213e:	89 83       	std	Y+1, r24	; 0x01
	g_callBackPtr1 = a_ptr;
    2140:	89 81       	ldd	r24, Y+1	; 0x01
    2142:	9a 81       	ldd	r25, Y+2	; 0x02
    2144:	90 93 8e 00 	sts	0x008E, r25
    2148:	80 93 8d 00 	sts	0x008D, r24
}
    214c:	0f 90       	pop	r0
    214e:	0f 90       	pop	r0
    2150:	cf 91       	pop	r28
    2152:	df 91       	pop	r29
    2154:	08 95       	ret

00002156 <Timer2_setCallBack>:

void Timer2_setCallBack(void(*a_ptr)(void))
{
    2156:	df 93       	push	r29
    2158:	cf 93       	push	r28
    215a:	00 d0       	rcall	.+0      	; 0x215c <Timer2_setCallBack+0x6>
    215c:	cd b7       	in	r28, 0x3d	; 61
    215e:	de b7       	in	r29, 0x3e	; 62
    2160:	9a 83       	std	Y+2, r25	; 0x02
    2162:	89 83       	std	Y+1, r24	; 0x01
	g_callBackPtr2 = a_ptr;
    2164:	89 81       	ldd	r24, Y+1	; 0x01
    2166:	9a 81       	ldd	r25, Y+2	; 0x02
    2168:	90 93 90 00 	sts	0x0090, r25
    216c:	80 93 8f 00 	sts	0x008F, r24
}
    2170:	0f 90       	pop	r0
    2172:	0f 90       	pop	r0
    2174:	cf 91       	pop	r28
    2176:	df 91       	pop	r29
    2178:	08 95       	ret

0000217a <Timer_DeInit>:

void Timer_DeInit (uint8 TimerType)
{
    217a:	df 93       	push	r29
    217c:	cf 93       	push	r28
    217e:	0f 92       	push	r0
    2180:	cd b7       	in	r28, 0x3d	; 61
    2182:	de b7       	in	r29, 0x3e	; 62
    2184:	89 83       	std	Y+1, r24	; 0x01
	if (TimerType == Timer0)
    2186:	89 81       	ldd	r24, Y+1	; 0x01
    2188:	88 23       	and	r24, r24
    218a:	71 f4       	brne	.+28     	; 0x21a8 <Timer_DeInit+0x2e>
	{
		TCNT0 = 0;
    218c:	e2 e5       	ldi	r30, 0x52	; 82
    218e:	f0 e0       	ldi	r31, 0x00	; 0
    2190:	10 82       	st	Z, r1

		TCCR0 = 0;
    2192:	e3 e5       	ldi	r30, 0x53	; 83
    2194:	f0 e0       	ldi	r31, 0x00	; 0
    2196:	10 82       	st	Z, r1

		CLEAR_BIT (TIMSK , TOIE0);
    2198:	a9 e5       	ldi	r26, 0x59	; 89
    219a:	b0 e0       	ldi	r27, 0x00	; 0
    219c:	e9 e5       	ldi	r30, 0x59	; 89
    219e:	f0 e0       	ldi	r31, 0x00	; 0
    21a0:	80 81       	ld	r24, Z
    21a2:	8e 7f       	andi	r24, 0xFE	; 254
    21a4:	8c 93       	st	X, r24
    21a6:	21 c0       	rjmp	.+66     	; 0x21ea <Timer_DeInit+0x70>
	}
	else if (TimerType == Timer1)
    21a8:	89 81       	ldd	r24, Y+1	; 0x01
    21aa:	81 30       	cpi	r24, 0x01	; 1
    21ac:	71 f4       	brne	.+28     	; 0x21ca <Timer_DeInit+0x50>
	{
		TCCR1A = 0;
    21ae:	ef e4       	ldi	r30, 0x4F	; 79
    21b0:	f0 e0       	ldi	r31, 0x00	; 0
    21b2:	10 82       	st	Z, r1
		TCCR1B = 0;
    21b4:	ee e4       	ldi	r30, 0x4E	; 78
    21b6:	f0 e0       	ldi	r31, 0x00	; 0
    21b8:	10 82       	st	Z, r1
		OCR1A = 0;
    21ba:	ea e4       	ldi	r30, 0x4A	; 74
    21bc:	f0 e0       	ldi	r31, 0x00	; 0
    21be:	11 82       	std	Z+1, r1	; 0x01
    21c0:	10 82       	st	Z, r1
		TIMSK = 0;
    21c2:	e9 e5       	ldi	r30, 0x59	; 89
    21c4:	f0 e0       	ldi	r31, 0x00	; 0
    21c6:	10 82       	st	Z, r1
    21c8:	10 c0       	rjmp	.+32     	; 0x21ea <Timer_DeInit+0x70>
	}
	else if (TimerType == Timer2)
    21ca:	89 81       	ldd	r24, Y+1	; 0x01
    21cc:	82 30       	cpi	r24, 0x02	; 2
    21ce:	69 f4       	brne	.+26     	; 0x21ea <Timer_DeInit+0x70>
	{
		TCNT2 = 0;
    21d0:	e4 e4       	ldi	r30, 0x44	; 68
    21d2:	f0 e0       	ldi	r31, 0x00	; 0
    21d4:	10 82       	st	Z, r1

		TCCR2 = 0;
    21d6:	e5 e4       	ldi	r30, 0x45	; 69
    21d8:	f0 e0       	ldi	r31, 0x00	; 0
    21da:	10 82       	st	Z, r1

		CLEAR_BIT (TIMSK , TOIE2);
    21dc:	a9 e5       	ldi	r26, 0x59	; 89
    21de:	b0 e0       	ldi	r27, 0x00	; 0
    21e0:	e9 e5       	ldi	r30, 0x59	; 89
    21e2:	f0 e0       	ldi	r31, 0x00	; 0
    21e4:	80 81       	ld	r24, Z
    21e6:	8f 7b       	andi	r24, 0xBF	; 191
    21e8:	8c 93       	st	X, r24
	}
}
    21ea:	0f 90       	pop	r0
    21ec:	cf 91       	pop	r28
    21ee:	df 91       	pop	r29
    21f0:	08 95       	ret

000021f2 <TWI_init>:

#include "common_macros.h"
#include <avr/io.h>

void TWI_init(const TWI_Config *Config)
{
    21f2:	df 93       	push	r29
    21f4:	cf 93       	push	r28
    21f6:	00 d0       	rcall	.+0      	; 0x21f8 <TWI_init+0x6>
    21f8:	00 d0       	rcall	.+0      	; 0x21fa <TWI_init+0x8>
    21fa:	0f 92       	push	r0
    21fc:	cd b7       	in	r28, 0x3d	; 61
    21fe:	de b7       	in	r29, 0x3e	; 62
    2200:	9a 83       	std	Y+2, r25	; 0x02
    2202:	89 83       	std	Y+1, r24	; 0x01
    /* Bit Rate: 400.000 kbps using zero pre-scaler TWPS=00 and F_CPU=8Mhz */

	TWBR = Config ->BIT_Rate;
    2204:	a0 e2       	ldi	r26, 0x20	; 32
    2206:	b0 e0       	ldi	r27, 0x00	; 0
    2208:	e9 81       	ldd	r30, Y+1	; 0x01
    220a:	fa 81       	ldd	r31, Y+2	; 0x02
    220c:	81 81       	ldd	r24, Z+1	; 0x01
    220e:	8c 93       	st	X, r24
	//TWBR = 0x02;
	TWSR = 0x00;
    2210:	e1 e2       	ldi	r30, 0x21	; 33
    2212:	f0 e0       	ldi	r31, 0x00	; 0
    2214:	10 82       	st	Z, r1
	
    /* Two Wire Bus address my address if any master device want to call me: 0x1 (used in case this MC is a slave device)
       General Call Recognition: Off */
    TWAR = (Config -> address)<1; // my address = 0x01 :)
    2216:	82 e2       	ldi	r24, 0x22	; 34
    2218:	90 e0       	ldi	r25, 0x00	; 0
    221a:	9d 83       	std	Y+5, r25	; 0x05
    221c:	8c 83       	std	Y+4, r24	; 0x04
    221e:	e9 81       	ldd	r30, Y+1	; 0x01
    2220:	fa 81       	ldd	r31, Y+2	; 0x02
    2222:	80 81       	ld	r24, Z
    2224:	1b 82       	std	Y+3, r1	; 0x03
    2226:	88 23       	and	r24, r24
    2228:	11 f4       	brne	.+4      	; 0x222e <TWI_init+0x3c>
    222a:	91 e0       	ldi	r25, 0x01	; 1
    222c:	9b 83       	std	Y+3, r25	; 0x03
    222e:	8b 81       	ldd	r24, Y+3	; 0x03
    2230:	ec 81       	ldd	r30, Y+4	; 0x04
    2232:	fd 81       	ldd	r31, Y+5	; 0x05
    2234:	80 83       	st	Z, r24
	
    TWCR = (1<<TWEN); /* enable TWI */
    2236:	e6 e5       	ldi	r30, 0x56	; 86
    2238:	f0 e0       	ldi	r31, 0x00	; 0
    223a:	84 e0       	ldi	r24, 0x04	; 4
    223c:	80 83       	st	Z, r24
}
    223e:	0f 90       	pop	r0
    2240:	0f 90       	pop	r0
    2242:	0f 90       	pop	r0
    2244:	0f 90       	pop	r0
    2246:	0f 90       	pop	r0
    2248:	cf 91       	pop	r28
    224a:	df 91       	pop	r29
    224c:	08 95       	ret

0000224e <TWI_start>:

void TWI_start(void)
{
    224e:	df 93       	push	r29
    2250:	cf 93       	push	r28
    2252:	cd b7       	in	r28, 0x3d	; 61
    2254:	de b7       	in	r29, 0x3e	; 62
    /* 
	 * Clear the TWINT flag before sending the start bit TWINT=1
	 * send the start bit by TWSTA=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);
    2256:	e6 e5       	ldi	r30, 0x56	; 86
    2258:	f0 e0       	ldi	r31, 0x00	; 0
    225a:	84 ea       	ldi	r24, 0xA4	; 164
    225c:	80 83       	st	Z, r24
    
    /* Wait for TWINT flag set in TWCR Register (start bit is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    225e:	e6 e5       	ldi	r30, 0x56	; 86
    2260:	f0 e0       	ldi	r31, 0x00	; 0
    2262:	80 81       	ld	r24, Z
    2264:	88 23       	and	r24, r24
    2266:	dc f7       	brge	.-10     	; 0x225e <TWI_start+0x10>
}
    2268:	cf 91       	pop	r28
    226a:	df 91       	pop	r29
    226c:	08 95       	ret

0000226e <TWI_stop>:

void TWI_stop(void)
{
    226e:	df 93       	push	r29
    2270:	cf 93       	push	r28
    2272:	cd b7       	in	r28, 0x3d	; 61
    2274:	de b7       	in	r29, 0x3e	; 62
    /* 
	 * Clear the TWINT flag before sending the stop bit TWINT=1
	 * send the stop bit by TWSTO=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN);
    2276:	e6 e5       	ldi	r30, 0x56	; 86
    2278:	f0 e0       	ldi	r31, 0x00	; 0
    227a:	84 e9       	ldi	r24, 0x94	; 148
    227c:	80 83       	st	Z, r24
}
    227e:	cf 91       	pop	r28
    2280:	df 91       	pop	r29
    2282:	08 95       	ret

00002284 <TWI_writeByte>:

void TWI_writeByte(uint8 data)
{
    2284:	df 93       	push	r29
    2286:	cf 93       	push	r28
    2288:	0f 92       	push	r0
    228a:	cd b7       	in	r28, 0x3d	; 61
    228c:	de b7       	in	r29, 0x3e	; 62
    228e:	89 83       	std	Y+1, r24	; 0x01
    /* Put data On TWI data Register */
    TWDR = data;
    2290:	e3 e2       	ldi	r30, 0x23	; 35
    2292:	f0 e0       	ldi	r31, 0x00	; 0
    2294:	89 81       	ldd	r24, Y+1	; 0x01
    2296:	80 83       	st	Z, r24
    /* 
	 * Clear the TWINT flag before sending the data TWINT=1
	 * Enable TWI Module TWEN=1 
	 */ 
    TWCR = (1 << TWINT) | (1 << TWEN);
    2298:	e6 e5       	ldi	r30, 0x56	; 86
    229a:	f0 e0       	ldi	r31, 0x00	; 0
    229c:	84 e8       	ldi	r24, 0x84	; 132
    229e:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register(data is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    22a0:	e6 e5       	ldi	r30, 0x56	; 86
    22a2:	f0 e0       	ldi	r31, 0x00	; 0
    22a4:	80 81       	ld	r24, Z
    22a6:	88 23       	and	r24, r24
    22a8:	dc f7       	brge	.-10     	; 0x22a0 <TWI_writeByte+0x1c>
}
    22aa:	0f 90       	pop	r0
    22ac:	cf 91       	pop	r28
    22ae:	df 91       	pop	r29
    22b0:	08 95       	ret

000022b2 <TWI_readByteWithACK>:

uint8 TWI_readByteWithACK(void)
{
    22b2:	df 93       	push	r29
    22b4:	cf 93       	push	r28
    22b6:	cd b7       	in	r28, 0x3d	; 61
    22b8:	de b7       	in	r29, 0x3e	; 62
	/* 
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable sending ACK after reading or receiving data TWEA=1
	 * Enable TWI Module TWEN=1 
	 */ 
    TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWEA);
    22ba:	e6 e5       	ldi	r30, 0x56	; 86
    22bc:	f0 e0       	ldi	r31, 0x00	; 0
    22be:	84 ec       	ldi	r24, 0xC4	; 196
    22c0:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    22c2:	e6 e5       	ldi	r30, 0x56	; 86
    22c4:	f0 e0       	ldi	r31, 0x00	; 0
    22c6:	80 81       	ld	r24, Z
    22c8:	88 23       	and	r24, r24
    22ca:	dc f7       	brge	.-10     	; 0x22c2 <TWI_readByteWithACK+0x10>
    /* Read Data */
    return TWDR;
    22cc:	e3 e2       	ldi	r30, 0x23	; 35
    22ce:	f0 e0       	ldi	r31, 0x00	; 0
    22d0:	80 81       	ld	r24, Z
}
    22d2:	cf 91       	pop	r28
    22d4:	df 91       	pop	r29
    22d6:	08 95       	ret

000022d8 <TWI_readByteWithNACK>:

uint8 TWI_readByteWithNACK(void)
{
    22d8:	df 93       	push	r29
    22da:	cf 93       	push	r28
    22dc:	cd b7       	in	r28, 0x3d	; 61
    22de:	de b7       	in	r29, 0x3e	; 62
	/* 
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWEN);
    22e0:	e6 e5       	ldi	r30, 0x56	; 86
    22e2:	f0 e0       	ldi	r31, 0x00	; 0
    22e4:	84 e8       	ldi	r24, 0x84	; 132
    22e6:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    22e8:	e6 e5       	ldi	r30, 0x56	; 86
    22ea:	f0 e0       	ldi	r31, 0x00	; 0
    22ec:	80 81       	ld	r24, Z
    22ee:	88 23       	and	r24, r24
    22f0:	dc f7       	brge	.-10     	; 0x22e8 <TWI_readByteWithNACK+0x10>
    /* Read Data */
    return TWDR;
    22f2:	e3 e2       	ldi	r30, 0x23	; 35
    22f4:	f0 e0       	ldi	r31, 0x00	; 0
    22f6:	80 81       	ld	r24, Z
}
    22f8:	cf 91       	pop	r28
    22fa:	df 91       	pop	r29
    22fc:	08 95       	ret

000022fe <TWI_getStatus>:

uint8 TWI_getStatus(void)
{
    22fe:	df 93       	push	r29
    2300:	cf 93       	push	r28
    2302:	0f 92       	push	r0
    2304:	cd b7       	in	r28, 0x3d	; 61
    2306:	de b7       	in	r29, 0x3e	; 62
    uint8 status;
    /* masking to eliminate first 3 bits and get the last 5 bits (status bits) */
    status = TWSR & 0xF8;
    2308:	e1 e2       	ldi	r30, 0x21	; 33
    230a:	f0 e0       	ldi	r31, 0x00	; 0
    230c:	80 81       	ld	r24, Z
    230e:	88 7f       	andi	r24, 0xF8	; 248
    2310:	89 83       	std	Y+1, r24	; 0x01
    return status;
    2312:	89 81       	ldd	r24, Y+1	; 0x01
}
    2314:	0f 90       	pop	r0
    2316:	cf 91       	pop	r28
    2318:	df 91       	pop	r29
    231a:	08 95       	ret

0000231c <UART_init>:
 * 1. Setup the Frame format like number of data bits, parity bit type and number of stop bits.
 * 2. Enable the UART.
 * 3. Setup the UART baud rate.
 */
void UART_init(const UART_ConfigType * Config_Ptr)
{
    231c:	df 93       	push	r29
    231e:	cf 93       	push	r28
    2320:	00 d0       	rcall	.+0      	; 0x2322 <UART_init+0x6>
    2322:	00 d0       	rcall	.+0      	; 0x2324 <UART_init+0x8>
    2324:	cd b7       	in	r28, 0x3d	; 61
    2326:	de b7       	in	r29, 0x3e	; 62
    2328:	9c 83       	std	Y+4, r25	; 0x04
    232a:	8b 83       	std	Y+3, r24	; 0x03
	uint16 ubrr_value = 0;
    232c:	1a 82       	std	Y+2, r1	; 0x02
    232e:	19 82       	std	Y+1, r1	; 0x01

	/* U2X = 1 for double transmission speed */

	SET_BIT(UCSRA,U2X);
    2330:	ab e2       	ldi	r26, 0x2B	; 43
    2332:	b0 e0       	ldi	r27, 0x00	; 0
    2334:	eb e2       	ldi	r30, 0x2B	; 43
    2336:	f0 e0       	ldi	r31, 0x00	; 0
    2338:	80 81       	ld	r24, Z
    233a:	82 60       	ori	r24, 0x02	; 2
    233c:	8c 93       	st	X, r24
	 * RXEN  = 1 Receiver Enable
	 * RXEN  = 1 Transmitter Enable
	 * UCSZ2 = 0 For 8-bit data mode
	 * RXB8 & TXB8 not used for 8-bit data mode
	 ***********************************************************************/ 
	SET_BIT(UCSRB, RXEN);
    233e:	aa e2       	ldi	r26, 0x2A	; 42
    2340:	b0 e0       	ldi	r27, 0x00	; 0
    2342:	ea e2       	ldi	r30, 0x2A	; 42
    2344:	f0 e0       	ldi	r31, 0x00	; 0
    2346:	80 81       	ld	r24, Z
    2348:	80 61       	ori	r24, 0x10	; 16
    234a:	8c 93       	st	X, r24
	SET_BIT(UCSRB, TXEN);
    234c:	aa e2       	ldi	r26, 0x2A	; 42
    234e:	b0 e0       	ldi	r27, 0x00	; 0
    2350:	ea e2       	ldi	r30, 0x2A	; 42
    2352:	f0 e0       	ldi	r31, 0x00	; 0
    2354:	80 81       	ld	r24, Z
    2356:	88 60       	ori	r24, 0x08	; 8
    2358:	8c 93       	st	X, r24
	
	UCSRB = (UCSRB & 0xFB) | (((Config_Ptr ->Data_Bit)&0X04)<<2);
    235a:	aa e2       	ldi	r26, 0x2A	; 42
    235c:	b0 e0       	ldi	r27, 0x00	; 0
    235e:	ea e2       	ldi	r30, 0x2A	; 42
    2360:	f0 e0       	ldi	r31, 0x00	; 0
    2362:	80 81       	ld	r24, Z
    2364:	28 2f       	mov	r18, r24
    2366:	2b 7f       	andi	r18, 0xFB	; 251
    2368:	eb 81       	ldd	r30, Y+3	; 0x03
    236a:	fc 81       	ldd	r31, Y+4	; 0x04
    236c:	84 81       	ldd	r24, Z+4	; 0x04
    236e:	88 2f       	mov	r24, r24
    2370:	90 e0       	ldi	r25, 0x00	; 0
    2372:	84 70       	andi	r24, 0x04	; 4
    2374:	90 70       	andi	r25, 0x00	; 0
    2376:	88 0f       	add	r24, r24
    2378:	99 1f       	adc	r25, r25
    237a:	88 0f       	add	r24, r24
    237c:	99 1f       	adc	r25, r25
    237e:	82 2b       	or	r24, r18
    2380:	8c 93       	st	X, r24
	 * USBS    = 0 One stop bit
	 * UCSZ1:0 = 11 For 8-bit data mode
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/ 	
	
	UCSRC = (UCSRC & 0xCF) | ((Config_Ptr ->Parity)<<4) ;
    2382:	a0 e4       	ldi	r26, 0x40	; 64
    2384:	b0 e0       	ldi	r27, 0x00	; 0
    2386:	e0 e4       	ldi	r30, 0x40	; 64
    2388:	f0 e0       	ldi	r31, 0x00	; 0
    238a:	80 81       	ld	r24, Z
    238c:	28 2f       	mov	r18, r24
    238e:	2f 7c       	andi	r18, 0xCF	; 207
    2390:	eb 81       	ldd	r30, Y+3	; 0x03
    2392:	fc 81       	ldd	r31, Y+4	; 0x04
    2394:	85 81       	ldd	r24, Z+5	; 0x05
    2396:	88 2f       	mov	r24, r24
    2398:	90 e0       	ldi	r25, 0x00	; 0
    239a:	82 95       	swap	r24
    239c:	92 95       	swap	r25
    239e:	90 7f       	andi	r25, 0xF0	; 240
    23a0:	98 27       	eor	r25, r24
    23a2:	80 7f       	andi	r24, 0xF0	; 240
    23a4:	98 27       	eor	r25, r24
    23a6:	82 2b       	or	r24, r18
    23a8:	8c 93       	st	X, r24
	UCSRC = (UCSRC & 0xF7) | ((Config_Ptr ->Stop_BIT)<<3) ;
    23aa:	a0 e4       	ldi	r26, 0x40	; 64
    23ac:	b0 e0       	ldi	r27, 0x00	; 0
    23ae:	e0 e4       	ldi	r30, 0x40	; 64
    23b0:	f0 e0       	ldi	r31, 0x00	; 0
    23b2:	80 81       	ld	r24, Z
    23b4:	28 2f       	mov	r18, r24
    23b6:	27 7f       	andi	r18, 0xF7	; 247
    23b8:	eb 81       	ldd	r30, Y+3	; 0x03
    23ba:	fc 81       	ldd	r31, Y+4	; 0x04
    23bc:	86 81       	ldd	r24, Z+6	; 0x06
    23be:	88 2f       	mov	r24, r24
    23c0:	90 e0       	ldi	r25, 0x00	; 0
    23c2:	88 0f       	add	r24, r24
    23c4:	99 1f       	adc	r25, r25
    23c6:	88 0f       	add	r24, r24
    23c8:	99 1f       	adc	r25, r25
    23ca:	88 0f       	add	r24, r24
    23cc:	99 1f       	adc	r25, r25
    23ce:	82 2b       	or	r24, r18
    23d0:	8c 93       	st	X, r24
	UCSRC = (UCSRC & 0xF9) | (((Config_Ptr ->Data_Bit)&0x03)<<1) ;
    23d2:	a0 e4       	ldi	r26, 0x40	; 64
    23d4:	b0 e0       	ldi	r27, 0x00	; 0
    23d6:	e0 e4       	ldi	r30, 0x40	; 64
    23d8:	f0 e0       	ldi	r31, 0x00	; 0
    23da:	80 81       	ld	r24, Z
    23dc:	28 2f       	mov	r18, r24
    23de:	29 7f       	andi	r18, 0xF9	; 249
    23e0:	eb 81       	ldd	r30, Y+3	; 0x03
    23e2:	fc 81       	ldd	r31, Y+4	; 0x04
    23e4:	84 81       	ldd	r24, Z+4	; 0x04
    23e6:	88 2f       	mov	r24, r24
    23e8:	90 e0       	ldi	r25, 0x00	; 0
    23ea:	83 70       	andi	r24, 0x03	; 3
    23ec:	90 70       	andi	r25, 0x00	; 0
    23ee:	88 0f       	add	r24, r24
    23f0:	99 1f       	adc	r25, r25
    23f2:	82 2b       	or	r24, r18
    23f4:	8c 93       	st	X, r24
	SET_BIT(UCSRC, RXEN);
    23f6:	a0 e4       	ldi	r26, 0x40	; 64
    23f8:	b0 e0       	ldi	r27, 0x00	; 0
    23fa:	e0 e4       	ldi	r30, 0x40	; 64
    23fc:	f0 e0       	ldi	r31, 0x00	; 0
    23fe:	80 81       	ld	r24, Z
    2400:	80 61       	ori	r24, 0x10	; 16
    2402:	8c 93       	st	X, r24

	/* Calculate the UBRR register value */

	ubrr_value = (uint16)(((F_CPU / ( (Config_Ptr ->Baud_Rate) * 8UL))) - 1);
    2404:	eb 81       	ldd	r30, Y+3	; 0x03
    2406:	fc 81       	ldd	r31, Y+4	; 0x04
    2408:	80 81       	ld	r24, Z
    240a:	91 81       	ldd	r25, Z+1	; 0x01
    240c:	a2 81       	ldd	r26, Z+2	; 0x02
    240e:	b3 81       	ldd	r27, Z+3	; 0x03
    2410:	88 0f       	add	r24, r24
    2412:	99 1f       	adc	r25, r25
    2414:	aa 1f       	adc	r26, r26
    2416:	bb 1f       	adc	r27, r27
    2418:	88 0f       	add	r24, r24
    241a:	99 1f       	adc	r25, r25
    241c:	aa 1f       	adc	r26, r26
    241e:	bb 1f       	adc	r27, r27
    2420:	88 0f       	add	r24, r24
    2422:	99 1f       	adc	r25, r25
    2424:	aa 1f       	adc	r26, r26
    2426:	bb 1f       	adc	r27, r27
    2428:	9c 01       	movw	r18, r24
    242a:	ad 01       	movw	r20, r26
    242c:	80 e0       	ldi	r24, 0x00	; 0
    242e:	92 e1       	ldi	r25, 0x12	; 18
    2430:	aa e7       	ldi	r26, 0x7A	; 122
    2432:	b0 e0       	ldi	r27, 0x00	; 0
    2434:	bc 01       	movw	r22, r24
    2436:	cd 01       	movw	r24, r26
    2438:	0e 94 c7 12 	call	0x258e	; 0x258e <__udivmodsi4>
    243c:	da 01       	movw	r26, r20
    243e:	c9 01       	movw	r24, r18
    2440:	01 97       	sbiw	r24, 0x01	; 1
    2442:	9a 83       	std	Y+2, r25	; 0x02
    2444:	89 83       	std	Y+1, r24	; 0x01

	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/

	UBRRH = ubrr_value>>8;
    2446:	e0 e4       	ldi	r30, 0x40	; 64
    2448:	f0 e0       	ldi	r31, 0x00	; 0
    244a:	89 81       	ldd	r24, Y+1	; 0x01
    244c:	9a 81       	ldd	r25, Y+2	; 0x02
    244e:	89 2f       	mov	r24, r25
    2450:	99 27       	eor	r25, r25
    2452:	80 83       	st	Z, r24
	UBRRL = ubrr_value;
    2454:	e9 e2       	ldi	r30, 0x29	; 41
    2456:	f0 e0       	ldi	r31, 0x00	; 0
    2458:	89 81       	ldd	r24, Y+1	; 0x01
    245a:	80 83       	st	Z, r24
	return;
}
    245c:	0f 90       	pop	r0
    245e:	0f 90       	pop	r0
    2460:	0f 90       	pop	r0
    2462:	0f 90       	pop	r0
    2464:	cf 91       	pop	r28
    2466:	df 91       	pop	r29
    2468:	08 95       	ret

0000246a <UART_sendByte>:
/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void UART_sendByte(const uint8 data)
{
    246a:	df 93       	push	r29
    246c:	cf 93       	push	r28
    246e:	0f 92       	push	r0
    2470:	cd b7       	in	r28, 0x3d	; 61
    2472:	de b7       	in	r29, 0x3e	; 62
    2474:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    2476:	eb e2       	ldi	r30, 0x2B	; 43
    2478:	f0 e0       	ldi	r31, 0x00	; 0
    247a:	80 81       	ld	r24, Z
    247c:	88 2f       	mov	r24, r24
    247e:	90 e0       	ldi	r25, 0x00	; 0
    2480:	80 72       	andi	r24, 0x20	; 32
    2482:	90 70       	andi	r25, 0x00	; 0
    2484:	00 97       	sbiw	r24, 0x00	; 0
    2486:	b9 f3       	breq	.-18     	; 0x2476 <UART_sendByte+0xc>

	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UDR = data;
    2488:	ec e2       	ldi	r30, 0x2C	; 44
    248a:	f0 e0       	ldi	r31, 0x00	; 0
    248c:	89 81       	ldd	r24, Y+1	; 0x01
    248e:	80 83       	st	Z, r24
	/************************* Another Method *************************
	UDR = data;
	while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transmission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	*******************************************************************/
}
    2490:	0f 90       	pop	r0
    2492:	cf 91       	pop	r28
    2494:	df 91       	pop	r29
    2496:	08 95       	ret

00002498 <UART_recieveByte>:
/*
 * Description :
 * Functional responsible for receive byte from another UART device.
 */
uint8 UART_recieveByte(void)
{
    2498:	df 93       	push	r29
    249a:	cf 93       	push	r28
    249c:	cd b7       	in	r28, 0x3d	; 61
    249e:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    24a0:	eb e2       	ldi	r30, 0x2B	; 43
    24a2:	f0 e0       	ldi	r31, 0x00	; 0
    24a4:	80 81       	ld	r24, Z
    24a6:	88 23       	and	r24, r24
    24a8:	dc f7       	brge	.-10     	; 0x24a0 <UART_recieveByte+0x8>

	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
    return UDR;		
    24aa:	ec e2       	ldi	r30, 0x2C	; 44
    24ac:	f0 e0       	ldi	r31, 0x00	; 0
    24ae:	80 81       	ld	r24, Z
}
    24b0:	cf 91       	pop	r28
    24b2:	df 91       	pop	r29
    24b4:	08 95       	ret

000024b6 <UART_sendString>:
/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str)
{
    24b6:	df 93       	push	r29
    24b8:	cf 93       	push	r28
    24ba:	00 d0       	rcall	.+0      	; 0x24bc <UART_sendString+0x6>
    24bc:	0f 92       	push	r0
    24be:	cd b7       	in	r28, 0x3d	; 61
    24c0:	de b7       	in	r29, 0x3e	; 62
    24c2:	9b 83       	std	Y+3, r25	; 0x03
    24c4:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    24c6:	19 82       	std	Y+1, r1	; 0x01
    24c8:	0e c0       	rjmp	.+28     	; 0x24e6 <UART_sendString+0x30>

	/* Send the whole string */
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    24ca:	89 81       	ldd	r24, Y+1	; 0x01
    24cc:	28 2f       	mov	r18, r24
    24ce:	30 e0       	ldi	r19, 0x00	; 0
    24d0:	8a 81       	ldd	r24, Y+2	; 0x02
    24d2:	9b 81       	ldd	r25, Y+3	; 0x03
    24d4:	fc 01       	movw	r30, r24
    24d6:	e2 0f       	add	r30, r18
    24d8:	f3 1f       	adc	r31, r19
    24da:	80 81       	ld	r24, Z
    24dc:	0e 94 35 12 	call	0x246a	; 0x246a <UART_sendByte>
		i++;
    24e0:	89 81       	ldd	r24, Y+1	; 0x01
    24e2:	8f 5f       	subi	r24, 0xFF	; 255
    24e4:	89 83       	std	Y+1, r24	; 0x01
void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;

	/* Send the whole string */
	while(Str[i] != '\0')
    24e6:	89 81       	ldd	r24, Y+1	; 0x01
    24e8:	28 2f       	mov	r18, r24
    24ea:	30 e0       	ldi	r19, 0x00	; 0
    24ec:	8a 81       	ldd	r24, Y+2	; 0x02
    24ee:	9b 81       	ldd	r25, Y+3	; 0x03
    24f0:	fc 01       	movw	r30, r24
    24f2:	e2 0f       	add	r30, r18
    24f4:	f3 1f       	adc	r31, r19
    24f6:	80 81       	ld	r24, Z
    24f8:	88 23       	and	r24, r24
    24fa:	39 f7       	brne	.-50     	; 0x24ca <UART_sendString+0x14>
	{
		UART_sendByte(*Str);
		Str++;
	}		
	*******************************************************************/
}
    24fc:	0f 90       	pop	r0
    24fe:	0f 90       	pop	r0
    2500:	0f 90       	pop	r0
    2502:	cf 91       	pop	r28
    2504:	df 91       	pop	r29
    2506:	08 95       	ret

00002508 <UART_receiveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_receiveString(uint8 *Str)
{
    2508:	0f 93       	push	r16
    250a:	1f 93       	push	r17
    250c:	df 93       	push	r29
    250e:	cf 93       	push	r28
    2510:	00 d0       	rcall	.+0      	; 0x2512 <UART_receiveString+0xa>
    2512:	0f 92       	push	r0
    2514:	cd b7       	in	r28, 0x3d	; 61
    2516:	de b7       	in	r29, 0x3e	; 62
    2518:	9b 83       	std	Y+3, r25	; 0x03
    251a:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    251c:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	Str[i] = UART_recieveByte();
    251e:	89 81       	ldd	r24, Y+1	; 0x01
    2520:	28 2f       	mov	r18, r24
    2522:	30 e0       	ldi	r19, 0x00	; 0
    2524:	8a 81       	ldd	r24, Y+2	; 0x02
    2526:	9b 81       	ldd	r25, Y+3	; 0x03
    2528:	8c 01       	movw	r16, r24
    252a:	02 0f       	add	r16, r18
    252c:	13 1f       	adc	r17, r19
    252e:	0e 94 4c 12 	call	0x2498	; 0x2498 <UART_recieveByte>
    2532:	f8 01       	movw	r30, r16
    2534:	80 83       	st	Z, r24
    2536:	0f c0       	rjmp	.+30     	; 0x2556 <UART_receiveString+0x4e>

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
	{
		i++;
    2538:	89 81       	ldd	r24, Y+1	; 0x01
    253a:	8f 5f       	subi	r24, 0xFF	; 255
    253c:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
    253e:	89 81       	ldd	r24, Y+1	; 0x01
    2540:	28 2f       	mov	r18, r24
    2542:	30 e0       	ldi	r19, 0x00	; 0
    2544:	8a 81       	ldd	r24, Y+2	; 0x02
    2546:	9b 81       	ldd	r25, Y+3	; 0x03
    2548:	8c 01       	movw	r16, r24
    254a:	02 0f       	add	r16, r18
    254c:	13 1f       	adc	r17, r19
    254e:	0e 94 4c 12 	call	0x2498	; 0x2498 <UART_recieveByte>
    2552:	f8 01       	movw	r30, r16
    2554:	80 83       	st	Z, r24

	/* Receive the first byte */
	Str[i] = UART_recieveByte();

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
    2556:	89 81       	ldd	r24, Y+1	; 0x01
    2558:	28 2f       	mov	r18, r24
    255a:	30 e0       	ldi	r19, 0x00	; 0
    255c:	8a 81       	ldd	r24, Y+2	; 0x02
    255e:	9b 81       	ldd	r25, Y+3	; 0x03
    2560:	fc 01       	movw	r30, r24
    2562:	e2 0f       	add	r30, r18
    2564:	f3 1f       	adc	r31, r19
    2566:	80 81       	ld	r24, Z
    2568:	83 32       	cpi	r24, 0x23	; 35
    256a:	31 f7       	brne	.-52     	; 0x2538 <UART_receiveString+0x30>
		i++;
		Str[i] = UART_recieveByte();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
    256c:	89 81       	ldd	r24, Y+1	; 0x01
    256e:	28 2f       	mov	r18, r24
    2570:	30 e0       	ldi	r19, 0x00	; 0
    2572:	8a 81       	ldd	r24, Y+2	; 0x02
    2574:	9b 81       	ldd	r25, Y+3	; 0x03
    2576:	fc 01       	movw	r30, r24
    2578:	e2 0f       	add	r30, r18
    257a:	f3 1f       	adc	r31, r19
    257c:	10 82       	st	Z, r1
}
    257e:	0f 90       	pop	r0
    2580:	0f 90       	pop	r0
    2582:	0f 90       	pop	r0
    2584:	cf 91       	pop	r28
    2586:	df 91       	pop	r29
    2588:	1f 91       	pop	r17
    258a:	0f 91       	pop	r16
    258c:	08 95       	ret

0000258e <__udivmodsi4>:
    258e:	a1 e2       	ldi	r26, 0x21	; 33
    2590:	1a 2e       	mov	r1, r26
    2592:	aa 1b       	sub	r26, r26
    2594:	bb 1b       	sub	r27, r27
    2596:	fd 01       	movw	r30, r26
    2598:	0d c0       	rjmp	.+26     	; 0x25b4 <__udivmodsi4_ep>

0000259a <__udivmodsi4_loop>:
    259a:	aa 1f       	adc	r26, r26
    259c:	bb 1f       	adc	r27, r27
    259e:	ee 1f       	adc	r30, r30
    25a0:	ff 1f       	adc	r31, r31
    25a2:	a2 17       	cp	r26, r18
    25a4:	b3 07       	cpc	r27, r19
    25a6:	e4 07       	cpc	r30, r20
    25a8:	f5 07       	cpc	r31, r21
    25aa:	20 f0       	brcs	.+8      	; 0x25b4 <__udivmodsi4_ep>
    25ac:	a2 1b       	sub	r26, r18
    25ae:	b3 0b       	sbc	r27, r19
    25b0:	e4 0b       	sbc	r30, r20
    25b2:	f5 0b       	sbc	r31, r21

000025b4 <__udivmodsi4_ep>:
    25b4:	66 1f       	adc	r22, r22
    25b6:	77 1f       	adc	r23, r23
    25b8:	88 1f       	adc	r24, r24
    25ba:	99 1f       	adc	r25, r25
    25bc:	1a 94       	dec	r1
    25be:	69 f7       	brne	.-38     	; 0x259a <__udivmodsi4_loop>
    25c0:	60 95       	com	r22
    25c2:	70 95       	com	r23
    25c4:	80 95       	com	r24
    25c6:	90 95       	com	r25
    25c8:	9b 01       	movw	r18, r22
    25ca:	ac 01       	movw	r20, r24
    25cc:	bd 01       	movw	r22, r26
    25ce:	cf 01       	movw	r24, r30
    25d0:	08 95       	ret

000025d2 <__prologue_saves__>:
    25d2:	2f 92       	push	r2
    25d4:	3f 92       	push	r3
    25d6:	4f 92       	push	r4
    25d8:	5f 92       	push	r5
    25da:	6f 92       	push	r6
    25dc:	7f 92       	push	r7
    25de:	8f 92       	push	r8
    25e0:	9f 92       	push	r9
    25e2:	af 92       	push	r10
    25e4:	bf 92       	push	r11
    25e6:	cf 92       	push	r12
    25e8:	df 92       	push	r13
    25ea:	ef 92       	push	r14
    25ec:	ff 92       	push	r15
    25ee:	0f 93       	push	r16
    25f0:	1f 93       	push	r17
    25f2:	cf 93       	push	r28
    25f4:	df 93       	push	r29
    25f6:	cd b7       	in	r28, 0x3d	; 61
    25f8:	de b7       	in	r29, 0x3e	; 62
    25fa:	ca 1b       	sub	r28, r26
    25fc:	db 0b       	sbc	r29, r27
    25fe:	0f b6       	in	r0, 0x3f	; 63
    2600:	f8 94       	cli
    2602:	de bf       	out	0x3e, r29	; 62
    2604:	0f be       	out	0x3f, r0	; 63
    2606:	cd bf       	out	0x3d, r28	; 61
    2608:	09 94       	ijmp

0000260a <__epilogue_restores__>:
    260a:	2a 88       	ldd	r2, Y+18	; 0x12
    260c:	39 88       	ldd	r3, Y+17	; 0x11
    260e:	48 88       	ldd	r4, Y+16	; 0x10
    2610:	5f 84       	ldd	r5, Y+15	; 0x0f
    2612:	6e 84       	ldd	r6, Y+14	; 0x0e
    2614:	7d 84       	ldd	r7, Y+13	; 0x0d
    2616:	8c 84       	ldd	r8, Y+12	; 0x0c
    2618:	9b 84       	ldd	r9, Y+11	; 0x0b
    261a:	aa 84       	ldd	r10, Y+10	; 0x0a
    261c:	b9 84       	ldd	r11, Y+9	; 0x09
    261e:	c8 84       	ldd	r12, Y+8	; 0x08
    2620:	df 80       	ldd	r13, Y+7	; 0x07
    2622:	ee 80       	ldd	r14, Y+6	; 0x06
    2624:	fd 80       	ldd	r15, Y+5	; 0x05
    2626:	0c 81       	ldd	r16, Y+4	; 0x04
    2628:	1b 81       	ldd	r17, Y+3	; 0x03
    262a:	aa 81       	ldd	r26, Y+2	; 0x02
    262c:	b9 81       	ldd	r27, Y+1	; 0x01
    262e:	ce 0f       	add	r28, r30
    2630:	d1 1d       	adc	r29, r1
    2632:	0f b6       	in	r0, 0x3f	; 63
    2634:	f8 94       	cli
    2636:	de bf       	out	0x3e, r29	; 62
    2638:	0f be       	out	0x3f, r0	; 63
    263a:	cd bf       	out	0x3d, r28	; 61
    263c:	ed 01       	movw	r28, r26
    263e:	08 95       	ret

00002640 <_exit>:
    2640:	f8 94       	cli

00002642 <__stop_program>:
    2642:	ff cf       	rjmp	.-2      	; 0x2642 <__stop_program>
