
HMI_ECU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002ffa  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000126  00800060  00002ffa  0000308e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000c  00800186  00800186  000031b4  2**0
                  ALLOC
  3 .stab         00002f4c  00000000  00000000  000031b4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001549  00000000  00000000  00006100  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00007649  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00007789  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  000078f9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00009542  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000a42d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000b1dc  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000b33c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000b5c9  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000bd97  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 86 13 	jmp	0x270c	; 0x270c <__vector_3>
      10:	0c 94 b9 13 	jmp	0x2772	; 0x2772 <__vector_4>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 ed 12 	jmp	0x25da	; 0x25da <__vector_6>
      1c:	0c 94 20 13 	jmp	0x2640	; 0x2640 <__vector_7>
      20:	0c 94 53 13 	jmp	0x26a6	; 0x26a6 <__vector_8>
      24:	0c 94 ba 12 	jmp	0x2574	; 0x2574 <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 87 12 	jmp	0x250e	; 0x250e <__vector_19>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ea ef       	ldi	r30, 0xFA	; 250
      68:	ff e2       	ldi	r31, 0x2F	; 47
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a6 38       	cpi	r26, 0x86	; 134
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a6 e8       	ldi	r26, 0x86	; 134
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a2 39       	cpi	r26, 0x92	; 146
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 a3 05 	call	0xb46	; 0xb46 <main>
      8a:	0c 94 fb 17 	jmp	0x2ff6	; 0x2ff6 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 7f 17 	jmp	0x2efe	; 0x2efe <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a2 e6       	ldi	r26, 0x62	; 98
     128:	b1 e0       	ldi	r27, 0x01	; 1
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 9b 17 	jmp	0x2f36	; 0x2f36 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 8b 17 	jmp	0x2f16	; 0x2f16 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 a7 17 	jmp	0x2f4e	; 0x2f4e <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 8b 17 	jmp	0x2f16	; 0x2f16 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 a7 17 	jmp	0x2f4e	; 0x2f4e <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 7f 17 	jmp	0x2efe	; 0x2efe <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	82 e6       	ldi	r24, 0x62	; 98
     496:	91 e0       	ldi	r25, 0x01	; 1
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 9b 17 	jmp	0x2f36	; 0x2f36 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 8b 17 	jmp	0x2f16	; 0x2f16 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 a7 17 	jmp	0x2f4e	; 0x2f4e <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 8b 17 	jmp	0x2f16	; 0x2f16 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 a7 17 	jmp	0x2f4e	; 0x2f4e <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 8b 17 	jmp	0x2f16	; 0x2f16 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 a7 17 	jmp	0x2f4e	; 0x2f4e <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 8f 17 	jmp	0x2f1e	; 0x2f1e <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 ab 17 	jmp	0x2f56	; 0x2f56 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__pack_f+0x178>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__pack_f+0x172>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__pack_f+0x17c>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__pack_f+0x114>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__pack_f+0x76>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__pack_f+0xca>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__pack_f+0x86>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__pack_f+0x7e>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__pack_f+0x9c>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__pack_f+0x94>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__pack_f+0xbe>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__pack_f+0xee>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__pack_f+0xf6>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__pack_f+0xf6>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__pack_f+0x10e>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__pack_f+0x162>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__pack_f+0x172>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__pack_f+0x144>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__pack_f+0x154>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__pack_f+0x14c>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__pack_f+0x162>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__pack_f+0x164>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__pack_f+0x17c>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <main>:


#include "MC1_Function.h"

int main(void)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
     b4e:	2e 97       	sbiw	r28, 0x0e	; 14
     b50:	0f b6       	in	r0, 0x3f	; 63
     b52:	f8 94       	cli
     b54:	de bf       	out	0x3e, r29	; 62
     b56:	0f be       	out	0x3f, r0	; 63
     b58:	cd bf       	out	0x3d, r28	; 61
	/*Initialize LCD*/
	LCD_init();
     b5a:	0e 94 c9 0d 	call	0x1b92	; 0x1b92 <LCD_init>

	uint8 Create_Flag=0;
     b5e:	1a 82       	std	Y+2, r1	; 0x02
	uint8 New_Flag=0;
     b60:	19 82       	std	Y+1, r1	; 0x01
	 * 1 : BIT rate = 9600
	 * 2 : No of data BIT = 8 BITS
	 * 3 : Parity : Disable
	 * 4 : No of stop BITS = 1 bit
	 */
	UART_ConfigType UART_config = { 9600 , Eight_BIT , Disabled ,OneBIT };
     b62:	ce 01       	movw	r24, r28
     b64:	03 96       	adiw	r24, 0x03	; 3
     b66:	9b 87       	std	Y+11, r25	; 0x0b
     b68:	8a 87       	std	Y+10, r24	; 0x0a
     b6a:	ec e6       	ldi	r30, 0x6C	; 108
     b6c:	f1 e0       	ldi	r31, 0x01	; 1
     b6e:	fd 87       	std	Y+13, r31	; 0x0d
     b70:	ec 87       	std	Y+12, r30	; 0x0c
     b72:	f7 e0       	ldi	r31, 0x07	; 7
     b74:	fe 87       	std	Y+14, r31	; 0x0e
     b76:	ec 85       	ldd	r30, Y+12	; 0x0c
     b78:	fd 85       	ldd	r31, Y+13	; 0x0d
     b7a:	00 80       	ld	r0, Z
     b7c:	8c 85       	ldd	r24, Y+12	; 0x0c
     b7e:	9d 85       	ldd	r25, Y+13	; 0x0d
     b80:	01 96       	adiw	r24, 0x01	; 1
     b82:	9d 87       	std	Y+13, r25	; 0x0d
     b84:	8c 87       	std	Y+12, r24	; 0x0c
     b86:	ea 85       	ldd	r30, Y+10	; 0x0a
     b88:	fb 85       	ldd	r31, Y+11	; 0x0b
     b8a:	00 82       	st	Z, r0
     b8c:	8a 85       	ldd	r24, Y+10	; 0x0a
     b8e:	9b 85       	ldd	r25, Y+11	; 0x0b
     b90:	01 96       	adiw	r24, 0x01	; 1
     b92:	9b 87       	std	Y+11, r25	; 0x0b
     b94:	8a 87       	std	Y+10, r24	; 0x0a
     b96:	9e 85       	ldd	r25, Y+14	; 0x0e
     b98:	91 50       	subi	r25, 0x01	; 1
     b9a:	9e 87       	std	Y+14, r25	; 0x0e
     b9c:	ee 85       	ldd	r30, Y+14	; 0x0e
     b9e:	ee 23       	and	r30, r30
     ba0:	51 f7       	brne	.-44     	; 0xb76 <main+0x30>
	UART_init(&UART_config);
     ba2:	ce 01       	movw	r24, r28
     ba4:	03 96       	adiw	r24, 0x03	; 3
     ba6:	0e 94 24 16 	call	0x2c48	; 0x2c48 <UART_init>

	while (1)
	{
		if (Create_Flag==0)
     baa:	8a 81       	ldd	r24, Y+2	; 0x02
     bac:	88 23       	and	r24, r24
     bae:	21 f4       	brne	.+8      	; 0xbb8 <main+0x72>
		{
			DisplayNewPasswordCheck();
     bb0:	0e 94 3c 07 	call	0xe78	; 0xe78 <DisplayNewPasswordCheck>
			Create_Flag =1 ;
     bb4:	81 e0       	ldi	r24, 0x01	; 1
     bb6:	8a 83       	std	Y+2, r24	; 0x02
		}

		if (New_Flag==0)
     bb8:	89 81       	ldd	r24, Y+1	; 0x01
     bba:	88 23       	and	r24, r24
     bbc:	b1 f7       	brne	.-20     	; 0xbaa <main+0x64>
		{
			MainMenuCheck();
     bbe:	0e 94 1a 09 	call	0x1234	; 0x1234 <MainMenuCheck>
     bc2:	f3 cf       	rjmp	.-26     	; 0xbaa <main+0x64>

00000bc4 <DCMotor_Start_Processing>:
 * 3 : if the g_ticks incremented up to 550(18 Seconds), Change The Flag value to 2
 * 4 : if the g_ticks incremented up to 1006(33 Seconds), Change The Flag value to 0
 */

void DCMotor_Start_Processing (void)
{
     bc4:	df 93       	push	r29
     bc6:	cf 93       	push	r28
     bc8:	cd b7       	in	r28, 0x3d	; 61
     bca:	de b7       	in	r29, 0x3e	; 62
	g_tick++;
     bcc:	80 91 86 01 	lds	r24, 0x0186
     bd0:	90 91 87 01 	lds	r25, 0x0187
     bd4:	01 96       	adiw	r24, 0x01	; 1
     bd6:	90 93 87 01 	sts	0x0187, r25
     bda:	80 93 86 01 	sts	0x0186, r24
	if (g_tick == NUMBER_OF_OverFlow_DcMotorStart_PER_15_SECOND)
     bde:	80 91 86 01 	lds	r24, 0x0186
     be2:	90 91 87 01 	lds	r25, 0x0187
     be6:	21 e0       	ldi	r18, 0x01	; 1
     be8:	88 3c       	cpi	r24, 0xC8	; 200
     bea:	92 07       	cpc	r25, r18
     bec:	19 f4       	brne	.+6      	; 0xbf4 <DCMotor_Start_Processing+0x30>
	{
		DCMotor_Timer_Flag =1;
     bee:	81 e0       	ldi	r24, 0x01	; 1
     bf0:	80 93 8a 01 	sts	0x018A, r24

	}
	if (g_tick == NUMBER_OF_OverFlow_DcMotorOverallTime_PER_18_SECOND)
     bf4:	80 91 86 01 	lds	r24, 0x0186
     bf8:	90 91 87 01 	lds	r25, 0x0187
     bfc:	22 e0       	ldi	r18, 0x02	; 2
     bfe:	86 32       	cpi	r24, 0x26	; 38
     c00:	92 07       	cpc	r25, r18
     c02:	19 f4       	brne	.+6      	; 0xc0a <DCMotor_Start_Processing+0x46>
	{
		DCMotor_Timer_Flag =2;
     c04:	82 e0       	ldi	r24, 0x02	; 2
     c06:	80 93 8a 01 	sts	0x018A, r24
	}

	if (g_tick == NUMBER_OF_OverFlow_DcMotorOverallTime_PER_33_SECOND)
     c0a:	80 91 86 01 	lds	r24, 0x0186
     c0e:	90 91 87 01 	lds	r25, 0x0187
     c12:	23 e0       	ldi	r18, 0x03	; 3
     c14:	8e 3e       	cpi	r24, 0xEE	; 238
     c16:	92 07       	cpc	r25, r18
     c18:	31 f4       	brne	.+12     	; 0xc26 <DCMotor_Start_Processing+0x62>

	{
		DCMotor_Timer_Flag = 0;
     c1a:	10 92 8a 01 	sts	0x018A, r1
		g_tick = 0;
     c1e:	10 92 87 01 	sts	0x0187, r1
     c22:	10 92 86 01 	sts	0x0186, r1
	}
}
     c26:	cf 91       	pop	r28
     c28:	df 91       	pop	r29
     c2a:	08 95       	ret

00000c2c <Buzzer_Processing_Time>:
 * 1 : Increment g_tick
 * 2 : The g_tick increments up to 30 for(60 Seconds), Change The Flag value to 1
 */

void Buzzer_Processing_Time (void)
{
     c2c:	df 93       	push	r29
     c2e:	cf 93       	push	r28
     c30:	cd b7       	in	r28, 0x3d	; 61
     c32:	de b7       	in	r29, 0x3e	; 62
	g_ticks++;
     c34:	80 91 88 01 	lds	r24, 0x0188
     c38:	90 91 89 01 	lds	r25, 0x0189
     c3c:	01 96       	adiw	r24, 0x01	; 1
     c3e:	90 93 89 01 	sts	0x0189, r25
     c42:	80 93 88 01 	sts	0x0188, r24
	if (g_ticks == NUMBER_OF_OverFlow_BuzzerOverallTime_PER_60_SECOND)
     c46:	80 91 88 01 	lds	r24, 0x0188
     c4a:	90 91 89 01 	lds	r25, 0x0189
     c4e:	8e 31       	cpi	r24, 0x1E	; 30
     c50:	91 05       	cpc	r25, r1
     c52:	21 f4       	brne	.+8      	; 0xc5c <Buzzer_Processing_Time+0x30>
	{
		Buzzer_Timer_Flag =1;
     c54:	81 e0       	ldi	r24, 0x01	; 1
     c56:	80 93 8b 01 	sts	0x018B, r24
     c5a:	0d c0       	rjmp	.+26     	; 0xc76 <Buzzer_Processing_Time+0x4a>
	}
	else if (g_ticks > NUMBER_OF_OverFlow_BuzzerOverallTime_PER_60_SECOND)
     c5c:	80 91 88 01 	lds	r24, 0x0188
     c60:	90 91 89 01 	lds	r25, 0x0189
     c64:	8f 31       	cpi	r24, 0x1F	; 31
     c66:	91 05       	cpc	r25, r1
     c68:	30 f0       	brcs	.+12     	; 0xc76 <Buzzer_Processing_Time+0x4a>
	{
		Buzzer_Timer_Flag =0;
     c6a:	10 92 8b 01 	sts	0x018B, r1
		g_ticks = 0;
     c6e:	10 92 89 01 	sts	0x0189, r1
     c72:	10 92 88 01 	sts	0x0188, r1
	}
}
     c76:	cf 91       	pop	r28
     c78:	df 91       	pop	r29
     c7a:	08 95       	ret

00000c7c <SendPassword>:
/*
 * Description: Function to send Password to be checked stored in EEPROM
 */

void SendPassword (uint8 ArraySize, uint8 *Password)
{
     c7c:	df 93       	push	r29
     c7e:	cf 93       	push	r28
     c80:	00 d0       	rcall	.+0      	; 0xc82 <SendPassword+0x6>
     c82:	00 d0       	rcall	.+0      	; 0xc84 <SendPassword+0x8>
     c84:	cd b7       	in	r28, 0x3d	; 61
     c86:	de b7       	in	r29, 0x3e	; 62
     c88:	8a 83       	std	Y+2, r24	; 0x02
     c8a:	7c 83       	std	Y+4, r23	; 0x04
     c8c:	6b 83       	std	Y+3, r22	; 0x03
	uint8 i;

	for ( i=0 ; i<ArraySize ; i++ )
     c8e:	19 82       	std	Y+1, r1	; 0x01
     c90:	0e c0       	rjmp	.+28     	; 0xcae <SendPassword+0x32>
	{
		UART_sendByte(Password[i]);
     c92:	89 81       	ldd	r24, Y+1	; 0x01
     c94:	28 2f       	mov	r18, r24
     c96:	30 e0       	ldi	r19, 0x00	; 0
     c98:	8b 81       	ldd	r24, Y+3	; 0x03
     c9a:	9c 81       	ldd	r25, Y+4	; 0x04
     c9c:	fc 01       	movw	r30, r24
     c9e:	e2 0f       	add	r30, r18
     ca0:	f3 1f       	adc	r31, r19
     ca2:	80 81       	ld	r24, Z
     ca4:	0e 94 cb 16 	call	0x2d96	; 0x2d96 <UART_sendByte>

void SendPassword (uint8 ArraySize, uint8 *Password)
{
	uint8 i;

	for ( i=0 ; i<ArraySize ; i++ )
     ca8:	89 81       	ldd	r24, Y+1	; 0x01
     caa:	8f 5f       	subi	r24, 0xFF	; 255
     cac:	89 83       	std	Y+1, r24	; 0x01
     cae:	99 81       	ldd	r25, Y+1	; 0x01
     cb0:	8a 81       	ldd	r24, Y+2	; 0x02
     cb2:	98 17       	cp	r25, r24
     cb4:	70 f3       	brcs	.-36     	; 0xc92 <SendPassword+0x16>
	{
		UART_sendByte(Password[i]);
	}
}
     cb6:	0f 90       	pop	r0
     cb8:	0f 90       	pop	r0
     cba:	0f 90       	pop	r0
     cbc:	0f 90       	pop	r0
     cbe:	cf 91       	pop	r28
     cc0:	df 91       	pop	r29
     cc2:	08 95       	ret

00000cc4 <ValidKeypadEntry>:
/*
 * Description: Function to register valid keypad input values and send it
 */

uint8 ValidKeypadEntry (void)
{
     cc4:	0f 93       	push	r16
     cc6:	1f 93       	push	r17
     cc8:	df 93       	push	r29
     cca:	cf 93       	push	r28
     ccc:	cd b7       	in	r28, 0x3d	; 61
     cce:	de b7       	in	r29, 0x3e	; 62
     cd0:	2b 97       	sbiw	r28, 0x0b	; 11
     cd2:	0f b6       	in	r0, 0x3f	; 63
     cd4:	f8 94       	cli
     cd6:	de bf       	out	0x3e, r29	; 62
     cd8:	0f be       	out	0x3f, r0	; 63
     cda:	cd bf       	out	0x3d, r28	; 61
	uint8 i;
	uint8 Password[ArrSize];
	volatile uint32 cnt;

	/*Filling password array with keypad entry value*/
	for(i=0; i<ArrSize; i++)
     cdc:	19 82       	std	Y+1, r1	; 0x01
     cde:	67 c0       	rjmp	.+206    	; 0xdae <ValidKeypadEntry+0xea>
	{
		/*Get the Keypad input value and Store it in Password*/
		Password[i]= KEYPAD_getPressedKey();
     ce0:	89 81       	ldd	r24, Y+1	; 0x01
     ce2:	08 2f       	mov	r16, r24
     ce4:	10 e0       	ldi	r17, 0x00	; 0
     ce6:	0e 94 d1 0c 	call	0x19a2	; 0x19a2 <KEYPAD_getPressedKey>
     cea:	28 2f       	mov	r18, r24
     cec:	ce 01       	movw	r24, r28
     cee:	02 96       	adiw	r24, 0x02	; 2
     cf0:	fc 01       	movw	r30, r24
     cf2:	e0 0f       	add	r30, r16
     cf4:	f1 1f       	adc	r31, r17
     cf6:	20 83       	st	Z, r18

		/*Delay for Keypad debouncing*/
		for(cnt=0 ; cnt<110000 ; cnt++);
     cf8:	1f 82       	std	Y+7, r1	; 0x07
     cfa:	18 86       	std	Y+8, r1	; 0x08
     cfc:	19 86       	std	Y+9, r1	; 0x09
     cfe:	1a 86       	std	Y+10, r1	; 0x0a
     d00:	0b c0       	rjmp	.+22     	; 0xd18 <ValidKeypadEntry+0x54>
     d02:	8f 81       	ldd	r24, Y+7	; 0x07
     d04:	98 85       	ldd	r25, Y+8	; 0x08
     d06:	a9 85       	ldd	r26, Y+9	; 0x09
     d08:	ba 85       	ldd	r27, Y+10	; 0x0a
     d0a:	01 96       	adiw	r24, 0x01	; 1
     d0c:	a1 1d       	adc	r26, r1
     d0e:	b1 1d       	adc	r27, r1
     d10:	8f 83       	std	Y+7, r24	; 0x07
     d12:	98 87       	std	Y+8, r25	; 0x08
     d14:	a9 87       	std	Y+9, r26	; 0x09
     d16:	ba 87       	std	Y+10, r27	; 0x0a
     d18:	8f 81       	ldd	r24, Y+7	; 0x07
     d1a:	98 85       	ldd	r25, Y+8	; 0x08
     d1c:	a9 85       	ldd	r26, Y+9	; 0x09
     d1e:	ba 85       	ldd	r27, Y+10	; 0x0a
     d20:	80 3b       	cpi	r24, 0xB0	; 176
     d22:	2d ea       	ldi	r18, 0xAD	; 173
     d24:	92 07       	cpc	r25, r18
     d26:	21 e0       	ldi	r18, 0x01	; 1
     d28:	a2 07       	cpc	r26, r18
     d2a:	20 e0       	ldi	r18, 0x00	; 0
     d2c:	b2 07       	cpc	r27, r18
     d2e:	48 f3       	brcs	.-46     	; 0xd02 <ValidKeypadEntry+0x3e>

		/*Keypad input value range*/
		if (( Password[i] >= 0 ) && ( Password[i] <=9 ))
     d30:	89 81       	ldd	r24, Y+1	; 0x01
     d32:	28 2f       	mov	r18, r24
     d34:	30 e0       	ldi	r19, 0x00	; 0
     d36:	ce 01       	movw	r24, r28
     d38:	02 96       	adiw	r24, 0x02	; 2
     d3a:	fc 01       	movw	r30, r24
     d3c:	e2 0f       	add	r30, r18
     d3e:	f3 1f       	adc	r31, r19
     d40:	80 81       	ld	r24, Z
     d42:	8a 30       	cpi	r24, 0x0A	; 10
     d44:	58 f4       	brcc	.+22     	; 0xd5c <ValidKeypadEntry+0x98>
		{
			LCD_displayStringRowColumn(1, i, "*");
     d46:	20 e6       	ldi	r18, 0x60	; 96
     d48:	30 e0       	ldi	r19, 0x00	; 0
     d4a:	81 e0       	ldi	r24, 0x01	; 1
     d4c:	69 81       	ldd	r22, Y+1	; 0x01
     d4e:	a9 01       	movw	r20, r18
     d50:	0e 94 41 12 	call	0x2482	; 0x2482 <LCD_displayStringRowColumn>
	uint8 i;
	uint8 Password[ArrSize];
	volatile uint32 cnt;

	/*Filling password array with keypad entry value*/
	for(i=0; i<ArrSize; i++)
     d54:	89 81       	ldd	r24, Y+1	; 0x01
     d56:	8f 5f       	subi	r24, 0xFF	; 255
     d58:	89 83       	std	Y+1, r24	; 0x01
     d5a:	29 c0       	rjmp	.+82     	; 0xdae <ValidKeypadEntry+0xea>
			LCD_displayStringRowColumn(1, i, "*");
		}
		else
		{
			/*In case the keypad input value is out range*/
			LCD_clearScreen();
     d5c:	0e 94 7d 12 	call	0x24fa	; 0x24fa <LCD_clearScreen>
			LCD_displayStringRowColumn(0, 0, "Invalid Number");
     d60:	22 e6       	ldi	r18, 0x62	; 98
     d62:	30 e0       	ldi	r19, 0x00	; 0
     d64:	80 e0       	ldi	r24, 0x00	; 0
     d66:	60 e0       	ldi	r22, 0x00	; 0
     d68:	a9 01       	movw	r20, r18
     d6a:	0e 94 41 12 	call	0x2482	; 0x2482 <LCD_displayStringRowColumn>
			for(cnt=0 ; cnt<110000 ; cnt++);
     d6e:	1f 82       	std	Y+7, r1	; 0x07
     d70:	18 86       	std	Y+8, r1	; 0x08
     d72:	19 86       	std	Y+9, r1	; 0x09
     d74:	1a 86       	std	Y+10, r1	; 0x0a
     d76:	0b c0       	rjmp	.+22     	; 0xd8e <ValidKeypadEntry+0xca>
     d78:	8f 81       	ldd	r24, Y+7	; 0x07
     d7a:	98 85       	ldd	r25, Y+8	; 0x08
     d7c:	a9 85       	ldd	r26, Y+9	; 0x09
     d7e:	ba 85       	ldd	r27, Y+10	; 0x0a
     d80:	01 96       	adiw	r24, 0x01	; 1
     d82:	a1 1d       	adc	r26, r1
     d84:	b1 1d       	adc	r27, r1
     d86:	8f 83       	std	Y+7, r24	; 0x07
     d88:	98 87       	std	Y+8, r25	; 0x08
     d8a:	a9 87       	std	Y+9, r26	; 0x09
     d8c:	ba 87       	std	Y+10, r27	; 0x0a
     d8e:	8f 81       	ldd	r24, Y+7	; 0x07
     d90:	98 85       	ldd	r25, Y+8	; 0x08
     d92:	a9 85       	ldd	r26, Y+9	; 0x09
     d94:	ba 85       	ldd	r27, Y+10	; 0x0a
     d96:	80 3b       	cpi	r24, 0xB0	; 176
     d98:	2d ea       	ldi	r18, 0xAD	; 173
     d9a:	92 07       	cpc	r25, r18
     d9c:	21 e0       	ldi	r18, 0x01	; 1
     d9e:	a2 07       	cpc	r26, r18
     da0:	20 e0       	ldi	r18, 0x00	; 0
     da2:	b2 07       	cpc	r27, r18
     da4:	48 f3       	brcs	.-46     	; 0xd78 <ValidKeypadEntry+0xb4>

			/*Reset the counting of Password array*/
			i=-1;
     da6:	8f ef       	ldi	r24, 0xFF	; 255
     da8:	89 83       	std	Y+1, r24	; 0x01
			return 0;
     daa:	1b 86       	std	Y+11, r1	; 0x0b
     dac:	0d c0       	rjmp	.+26     	; 0xdc8 <ValidKeypadEntry+0x104>
	uint8 i;
	uint8 Password[ArrSize];
	volatile uint32 cnt;

	/*Filling password array with keypad entry value*/
	for(i=0; i<ArrSize; i++)
     dae:	89 81       	ldd	r24, Y+1	; 0x01
     db0:	85 30       	cpi	r24, 0x05	; 5
     db2:	08 f4       	brcc	.+2      	; 0xdb6 <ValidKeypadEntry+0xf2>
     db4:	95 cf       	rjmp	.-214    	; 0xce0 <ValidKeypadEntry+0x1c>
			return 0;
		}
	}

	/* Use SendPassword Function to send the password for check*/
	SendPassword(ArrSize, Password);
     db6:	9e 01       	movw	r18, r28
     db8:	2e 5f       	subi	r18, 0xFE	; 254
     dba:	3f 4f       	sbci	r19, 0xFF	; 255
     dbc:	85 e0       	ldi	r24, 0x05	; 5
     dbe:	b9 01       	movw	r22, r18
     dc0:	0e 94 3e 06 	call	0xc7c	; 0xc7c <SendPassword>
	return 1;
     dc4:	81 e0       	ldi	r24, 0x01	; 1
     dc6:	8b 87       	std	Y+11, r24	; 0x0b
     dc8:	8b 85       	ldd	r24, Y+11	; 0x0b
}
     dca:	2b 96       	adiw	r28, 0x0b	; 11
     dcc:	0f b6       	in	r0, 0x3f	; 63
     dce:	f8 94       	cli
     dd0:	de bf       	out	0x3e, r29	; 62
     dd2:	0f be       	out	0x3f, r0	; 63
     dd4:	cd bf       	out	0x3d, r28	; 61
     dd6:	cf 91       	pop	r28
     dd8:	df 91       	pop	r29
     dda:	1f 91       	pop	r17
     ddc:	0f 91       	pop	r16
     dde:	08 95       	ret

00000de0 <DisplayNewPassword>:
/*
 * Description: Function to Display The New Password with The Keypad Entry
 */

void DisplayNewPassword (void)
{
     de0:	df 93       	push	r29
     de2:	cf 93       	push	r28
     de4:	00 d0       	rcall	.+0      	; 0xde6 <DisplayNewPassword+0x6>
     de6:	0f 92       	push	r0
     de8:	cd b7       	in	r28, 0x3d	; 61
     dea:	de b7       	in	r29, 0x3e	; 62
	uint8 counter=0 ;
     dec:	1b 82       	std	Y+3, r1	; 0x03
	uint8 Password1Check;
	uint8 Password2Check;

	if (counter == 0 )
     dee:	8b 81       	ldd	r24, Y+3	; 0x03
     df0:	88 23       	and	r24, r24
     df2:	91 f4       	brne	.+36     	; 0xe18 <DisplayNewPassword+0x38>
	{

		do
		{

			LCD_clearScreen();
     df4:	0e 94 7d 12 	call	0x24fa	; 0x24fa <LCD_clearScreen>
			/*Display New Password in row 0, Column 0*/
			LCD_displayStringRowColumn(0, 0, "New Password");
     df8:	21 e7       	ldi	r18, 0x71	; 113
     dfa:	30 e0       	ldi	r19, 0x00	; 0
     dfc:	80 e0       	ldi	r24, 0x00	; 0
     dfe:	60 e0       	ldi	r22, 0x00	; 0
     e00:	a9 01       	movw	r20, r18
     e02:	0e 94 41 12 	call	0x2482	; 0x2482 <LCD_displayStringRowColumn>
			/*To Check the return value and exit is the check completed*/
			Password1Check = ValidKeypadEntry();
     e06:	0e 94 62 06 	call	0xcc4	; 0xcc4 <ValidKeypadEntry>
     e0a:	8a 83       	std	Y+2, r24	; 0x02

		}while ( Password1Check == 0 );
     e0c:	8a 81       	ldd	r24, Y+2	; 0x02
     e0e:	88 23       	and	r24, r24
     e10:	89 f3       	breq	.-30     	; 0xdf4 <DisplayNewPassword+0x14>
		/*in order to exit the loop */
		counter ++;
     e12:	8b 81       	ldd	r24, Y+3	; 0x03
     e14:	8f 5f       	subi	r24, 0xFF	; 255
     e16:	8b 83       	std	Y+3, r24	; 0x03
	}

	if (counter == 1 )
     e18:	8b 81       	ldd	r24, Y+3	; 0x03
     e1a:	81 30       	cpi	r24, 0x01	; 1
     e1c:	79 f4       	brne	.+30     	; 0xe3c <DisplayNewPassword+0x5c>
	{
		do
		{

			LCD_clearScreen();
     e1e:	0e 94 7d 12 	call	0x24fa	; 0x24fa <LCD_clearScreen>
			/*Display Confirm Password in row 0, Column 0*/
			LCD_displayStringRowColumn(0, 0, "Confirm Password");
     e22:	2e e7       	ldi	r18, 0x7E	; 126
     e24:	30 e0       	ldi	r19, 0x00	; 0
     e26:	80 e0       	ldi	r24, 0x00	; 0
     e28:	60 e0       	ldi	r22, 0x00	; 0
     e2a:	a9 01       	movw	r20, r18
     e2c:	0e 94 41 12 	call	0x2482	; 0x2482 <LCD_displayStringRowColumn>

			/*To Check the return value and exit if the check completed*/
			Password2Check = ValidKeypadEntry();
     e30:	0e 94 62 06 	call	0xcc4	; 0xcc4 <ValidKeypadEntry>
     e34:	89 83       	std	Y+1, r24	; 0x01

		}while ( Password2Check == 0 );
     e36:	89 81       	ldd	r24, Y+1	; 0x01
     e38:	88 23       	and	r24, r24
     e3a:	89 f3       	breq	.-30     	; 0xe1e <DisplayNewPassword+0x3e>
	}
}
     e3c:	0f 90       	pop	r0
     e3e:	0f 90       	pop	r0
     e40:	0f 90       	pop	r0
     e42:	cf 91       	pop	r28
     e44:	df 91       	pop	r29
     e46:	08 95       	ret

00000e48 <DisplayEnterPassword>:
/*
 * Description: Function to Display Enter Password
 */

void DisplayEnterPassword (void)
{
     e48:	df 93       	push	r29
     e4a:	cf 93       	push	r28
     e4c:	0f 92       	push	r0
     e4e:	cd b7       	in	r28, 0x3d	; 61
     e50:	de b7       	in	r29, 0x3e	; 62
	uint8 PasswordCheck;

	do
	{

		LCD_clearScreen();
     e52:	0e 94 7d 12 	call	0x24fa	; 0x24fa <LCD_clearScreen>

		/*Display Enter Password in row 0, Column 0*/
		LCD_displayStringRowColumn(0, 0, "Enter Password");
     e56:	2f e8       	ldi	r18, 0x8F	; 143
     e58:	30 e0       	ldi	r19, 0x00	; 0
     e5a:	80 e0       	ldi	r24, 0x00	; 0
     e5c:	60 e0       	ldi	r22, 0x00	; 0
     e5e:	a9 01       	movw	r20, r18
     e60:	0e 94 41 12 	call	0x2482	; 0x2482 <LCD_displayStringRowColumn>

		/*To Check the return value and exit if the check completed*/
		PasswordCheck = ValidKeypadEntry();
     e64:	0e 94 62 06 	call	0xcc4	; 0xcc4 <ValidKeypadEntry>
     e68:	89 83       	std	Y+1, r24	; 0x01

	}while ( PasswordCheck == 0 );
     e6a:	89 81       	ldd	r24, Y+1	; 0x01
     e6c:	88 23       	and	r24, r24
     e6e:	89 f3       	breq	.-30     	; 0xe52 <DisplayEnterPassword+0xa>
}
     e70:	0f 90       	pop	r0
     e72:	cf 91       	pop	r28
     e74:	df 91       	pop	r29
     e76:	08 95       	ret

00000e78 <DisplayNewPasswordCheck>:
 * Description: Function to display New Password options
 */

void DisplayNewPasswordCheck (void)

{
     e78:	df 93       	push	r29
     e7a:	cf 93       	push	r28
     e7c:	00 d0       	rcall	.+0      	; 0xe7e <DisplayNewPasswordCheck+0x6>
     e7e:	00 d0       	rcall	.+0      	; 0xe80 <DisplayNewPasswordCheck+0x8>
     e80:	0f 92       	push	r0
     e82:	cd b7       	in	r28, 0x3d	; 61
     e84:	de b7       	in	r29, 0x3e	; 62
	uint8 ConfirmPassword=0;
     e86:	19 82       	std	Y+1, r1	; 0x01
	volatile uint32 cnt;


	LCD_displayStringRowColumn(0, 0, "New Password");
     e88:	21 e7       	ldi	r18, 0x71	; 113
     e8a:	30 e0       	ldi	r19, 0x00	; 0
     e8c:	80 e0       	ldi	r24, 0x00	; 0
     e8e:	60 e0       	ldi	r22, 0x00	; 0
     e90:	a9 01       	movw	r20, r18
     e92:	0e 94 41 12 	call	0x2482	; 0x2482 <LCD_displayStringRowColumn>

	DisplayNewPassword();
     e96:	0e 94 f0 06 	call	0xde0	; 0xde0 <DisplayNewPassword>
	/*Waiting for the compare check on password from Control_ECU*/
	ConfirmPassword = UART_recieveByte();
     e9a:	0e 94 e2 16 	call	0x2dc4	; 0x2dc4 <UART_recieveByte>
     e9e:	89 83       	std	Y+1, r24	; 0x01

	if (ConfirmPassword == NewPasswordMatch)
     ea0:	89 81       	ldd	r24, Y+1	; 0x01
     ea2:	82 31       	cpi	r24, 0x12	; 18
     ea4:	31 f5       	brne	.+76     	; 0xef2 <DisplayNewPasswordCheck+0x7a>
	{
		LCD_clearScreen();
     ea6:	0e 94 7d 12 	call	0x24fa	; 0x24fa <LCD_clearScreen>
		LCD_displayStringRowColumn(0, 0, "Password Confirmed");
     eaa:	2e e9       	ldi	r18, 0x9E	; 158
     eac:	30 e0       	ldi	r19, 0x00	; 0
     eae:	80 e0       	ldi	r24, 0x00	; 0
     eb0:	60 e0       	ldi	r22, 0x00	; 0
     eb2:	a9 01       	movw	r20, r18
     eb4:	0e 94 41 12 	call	0x2482	; 0x2482 <LCD_displayStringRowColumn>
		for(cnt=0 ; cnt<110000 ; cnt++);
     eb8:	1a 82       	std	Y+2, r1	; 0x02
     eba:	1b 82       	std	Y+3, r1	; 0x03
     ebc:	1c 82       	std	Y+4, r1	; 0x04
     ebe:	1d 82       	std	Y+5, r1	; 0x05
     ec0:	0b c0       	rjmp	.+22     	; 0xed8 <DisplayNewPasswordCheck+0x60>
     ec2:	8a 81       	ldd	r24, Y+2	; 0x02
     ec4:	9b 81       	ldd	r25, Y+3	; 0x03
     ec6:	ac 81       	ldd	r26, Y+4	; 0x04
     ec8:	bd 81       	ldd	r27, Y+5	; 0x05
     eca:	01 96       	adiw	r24, 0x01	; 1
     ecc:	a1 1d       	adc	r26, r1
     ece:	b1 1d       	adc	r27, r1
     ed0:	8a 83       	std	Y+2, r24	; 0x02
     ed2:	9b 83       	std	Y+3, r25	; 0x03
     ed4:	ac 83       	std	Y+4, r26	; 0x04
     ed6:	bd 83       	std	Y+5, r27	; 0x05
     ed8:	8a 81       	ldd	r24, Y+2	; 0x02
     eda:	9b 81       	ldd	r25, Y+3	; 0x03
     edc:	ac 81       	ldd	r26, Y+4	; 0x04
     ede:	bd 81       	ldd	r27, Y+5	; 0x05
     ee0:	80 3b       	cpi	r24, 0xB0	; 176
     ee2:	2d ea       	ldi	r18, 0xAD	; 173
     ee4:	92 07       	cpc	r25, r18
     ee6:	21 e0       	ldi	r18, 0x01	; 1
     ee8:	a2 07       	cpc	r26, r18
     eea:	20 e0       	ldi	r18, 0x00	; 0
     eec:	b2 07       	cpc	r27, r18
     eee:	48 f3       	brcs	.-46     	; 0xec2 <DisplayNewPasswordCheck+0x4a>
     ef0:	2f c0       	rjmp	.+94     	; 0xf50 <DisplayNewPasswordCheck+0xd8>
	}
	else if (ConfirmPassword == NewPasswordNotMatch)
     ef2:	89 81       	ldd	r24, Y+1	; 0x01
     ef4:	83 31       	cpi	r24, 0x13	; 19
     ef6:	61 f5       	brne	.+88     	; 0xf50 <DisplayNewPasswordCheck+0xd8>
	{
		LCD_clearScreen();
     ef8:	0e 94 7d 12 	call	0x24fa	; 0x24fa <LCD_clearScreen>
		LCD_displayStringRowColumn(0, 0, "Not Confirmed");
     efc:	21 eb       	ldi	r18, 0xB1	; 177
     efe:	30 e0       	ldi	r19, 0x00	; 0
     f00:	80 e0       	ldi	r24, 0x00	; 0
     f02:	60 e0       	ldi	r22, 0x00	; 0
     f04:	a9 01       	movw	r20, r18
     f06:	0e 94 41 12 	call	0x2482	; 0x2482 <LCD_displayStringRowColumn>
		for(cnt=0 ; cnt<110000 ; cnt++);
     f0a:	1a 82       	std	Y+2, r1	; 0x02
     f0c:	1b 82       	std	Y+3, r1	; 0x03
     f0e:	1c 82       	std	Y+4, r1	; 0x04
     f10:	1d 82       	std	Y+5, r1	; 0x05
     f12:	0b c0       	rjmp	.+22     	; 0xf2a <DisplayNewPasswordCheck+0xb2>
     f14:	8a 81       	ldd	r24, Y+2	; 0x02
     f16:	9b 81       	ldd	r25, Y+3	; 0x03
     f18:	ac 81       	ldd	r26, Y+4	; 0x04
     f1a:	bd 81       	ldd	r27, Y+5	; 0x05
     f1c:	01 96       	adiw	r24, 0x01	; 1
     f1e:	a1 1d       	adc	r26, r1
     f20:	b1 1d       	adc	r27, r1
     f22:	8a 83       	std	Y+2, r24	; 0x02
     f24:	9b 83       	std	Y+3, r25	; 0x03
     f26:	ac 83       	std	Y+4, r26	; 0x04
     f28:	bd 83       	std	Y+5, r27	; 0x05
     f2a:	8a 81       	ldd	r24, Y+2	; 0x02
     f2c:	9b 81       	ldd	r25, Y+3	; 0x03
     f2e:	ac 81       	ldd	r26, Y+4	; 0x04
     f30:	bd 81       	ldd	r27, Y+5	; 0x05
     f32:	80 3b       	cpi	r24, 0xB0	; 176
     f34:	2d ea       	ldi	r18, 0xAD	; 173
     f36:	92 07       	cpc	r25, r18
     f38:	21 e0       	ldi	r18, 0x01	; 1
     f3a:	a2 07       	cpc	r26, r18
     f3c:	20 e0       	ldi	r18, 0x00	; 0
     f3e:	b2 07       	cpc	r27, r18
     f40:	48 f3       	brcs	.-46     	; 0xf14 <DisplayNewPasswordCheck+0x9c>
		LCD_clearScreen();
     f42:	0e 94 7d 12 	call	0x24fa	; 0x24fa <LCD_clearScreen>
		/*in case of password is wrong return to DisplayNewPasswordCheck*/
		return DisplayNewPasswordCheck_Ptr();
     f46:	e0 91 6a 01 	lds	r30, 0x016A
     f4a:	f0 91 6b 01 	lds	r31, 0x016B
     f4e:	09 95       	icall
	}
}
     f50:	0f 90       	pop	r0
     f52:	0f 90       	pop	r0
     f54:	0f 90       	pop	r0
     f56:	0f 90       	pop	r0
     f58:	0f 90       	pop	r0
     f5a:	cf 91       	pop	r28
     f5c:	df 91       	pop	r29
     f5e:	08 95       	ret

00000f60 <DisplayEnterPasswordCheck>:
/*
 * Description: Function to display Enter Password options
 */

uint8 DisplayEnterPasswordCheck (void)
{
     f60:	df 93       	push	r29
     f62:	cf 93       	push	r28
     f64:	00 d0       	rcall	.+0      	; 0xf66 <DisplayEnterPasswordCheck+0x6>
     f66:	00 d0       	rcall	.+0      	; 0xf68 <DisplayEnterPasswordCheck+0x8>
     f68:	0f 92       	push	r0
     f6a:	cd b7       	in	r28, 0x3d	; 61
     f6c:	de b7       	in	r29, 0x3e	; 62
	uint8  Check ;

	volatile uint32 cnt;

	DisplayEnterPassword();
     f6e:	0e 94 24 07 	call	0xe48	; 0xe48 <DisplayEnterPassword>

	/*Waiting for the compare check on password from Control_ECU*/
	Check=UART_recieveByte();
     f72:	0e 94 e2 16 	call	0x2dc4	; 0x2dc4 <UART_recieveByte>
     f76:	89 83       	std	Y+1, r24	; 0x01

	LCD_clearScreen();
     f78:	0e 94 7d 12 	call	0x24fa	; 0x24fa <LCD_clearScreen>

	if (Check== MatchedPassword)
     f7c:	89 81       	ldd	r24, Y+1	; 0x01
     f7e:	89 30       	cpi	r24, 0x09	; 9
     f80:	41 f5       	brne	.+80     	; 0xfd2 <DisplayEnterPasswordCheck+0x72>
	{
		LCD_clearScreen();
     f82:	0e 94 7d 12 	call	0x24fa	; 0x24fa <LCD_clearScreen>
		LCD_displayStringRowColumn(0, 0, "Correct Password");
     f86:	2f eb       	ldi	r18, 0xBF	; 191
     f88:	30 e0       	ldi	r19, 0x00	; 0
     f8a:	80 e0       	ldi	r24, 0x00	; 0
     f8c:	60 e0       	ldi	r22, 0x00	; 0
     f8e:	a9 01       	movw	r20, r18
     f90:	0e 94 41 12 	call	0x2482	; 0x2482 <LCD_displayStringRowColumn>
		for(cnt=0 ; cnt<110000 ; cnt++);
     f94:	1a 82       	std	Y+2, r1	; 0x02
     f96:	1b 82       	std	Y+3, r1	; 0x03
     f98:	1c 82       	std	Y+4, r1	; 0x04
     f9a:	1d 82       	std	Y+5, r1	; 0x05
     f9c:	0b c0       	rjmp	.+22     	; 0xfb4 <DisplayEnterPasswordCheck+0x54>
     f9e:	8a 81       	ldd	r24, Y+2	; 0x02
     fa0:	9b 81       	ldd	r25, Y+3	; 0x03
     fa2:	ac 81       	ldd	r26, Y+4	; 0x04
     fa4:	bd 81       	ldd	r27, Y+5	; 0x05
     fa6:	01 96       	adiw	r24, 0x01	; 1
     fa8:	a1 1d       	adc	r26, r1
     faa:	b1 1d       	adc	r27, r1
     fac:	8a 83       	std	Y+2, r24	; 0x02
     fae:	9b 83       	std	Y+3, r25	; 0x03
     fb0:	ac 83       	std	Y+4, r26	; 0x04
     fb2:	bd 83       	std	Y+5, r27	; 0x05
     fb4:	8a 81       	ldd	r24, Y+2	; 0x02
     fb6:	9b 81       	ldd	r25, Y+3	; 0x03
     fb8:	ac 81       	ldd	r26, Y+4	; 0x04
     fba:	bd 81       	ldd	r27, Y+5	; 0x05
     fbc:	80 3b       	cpi	r24, 0xB0	; 176
     fbe:	2d ea       	ldi	r18, 0xAD	; 173
     fc0:	92 07       	cpc	r25, r18
     fc2:	21 e0       	ldi	r18, 0x01	; 1
     fc4:	a2 07       	cpc	r26, r18
     fc6:	20 e0       	ldi	r18, 0x00	; 0
     fc8:	b2 07       	cpc	r27, r18
     fca:	48 f3       	brcs	.-46     	; 0xf9e <DisplayEnterPasswordCheck+0x3e>
		LCD_clearScreen();
     fcc:	0e 94 7d 12 	call	0x24fa	; 0x24fa <LCD_clearScreen>
     fd0:	55 c0       	rjmp	.+170    	; 0x107c <DisplayEnterPasswordCheck+0x11c>

	}
	else if (Check == NotMatchedPassword)
     fd2:	89 81       	ldd	r24, Y+1	; 0x01
     fd4:	88 30       	cpi	r24, 0x08	; 8
     fd6:	41 f5       	brne	.+80     	; 0x1028 <DisplayEnterPasswordCheck+0xc8>
	{
		LCD_clearScreen();
     fd8:	0e 94 7d 12 	call	0x24fa	; 0x24fa <LCD_clearScreen>
		LCD_displayStringRowColumn(0, 0, "Incorrect Password");
     fdc:	20 ed       	ldi	r18, 0xD0	; 208
     fde:	30 e0       	ldi	r19, 0x00	; 0
     fe0:	80 e0       	ldi	r24, 0x00	; 0
     fe2:	60 e0       	ldi	r22, 0x00	; 0
     fe4:	a9 01       	movw	r20, r18
     fe6:	0e 94 41 12 	call	0x2482	; 0x2482 <LCD_displayStringRowColumn>
		for(cnt=0 ; cnt<110000 ; cnt++);
     fea:	1a 82       	std	Y+2, r1	; 0x02
     fec:	1b 82       	std	Y+3, r1	; 0x03
     fee:	1c 82       	std	Y+4, r1	; 0x04
     ff0:	1d 82       	std	Y+5, r1	; 0x05
     ff2:	0b c0       	rjmp	.+22     	; 0x100a <DisplayEnterPasswordCheck+0xaa>
     ff4:	8a 81       	ldd	r24, Y+2	; 0x02
     ff6:	9b 81       	ldd	r25, Y+3	; 0x03
     ff8:	ac 81       	ldd	r26, Y+4	; 0x04
     ffa:	bd 81       	ldd	r27, Y+5	; 0x05
     ffc:	01 96       	adiw	r24, 0x01	; 1
     ffe:	a1 1d       	adc	r26, r1
    1000:	b1 1d       	adc	r27, r1
    1002:	8a 83       	std	Y+2, r24	; 0x02
    1004:	9b 83       	std	Y+3, r25	; 0x03
    1006:	ac 83       	std	Y+4, r26	; 0x04
    1008:	bd 83       	std	Y+5, r27	; 0x05
    100a:	8a 81       	ldd	r24, Y+2	; 0x02
    100c:	9b 81       	ldd	r25, Y+3	; 0x03
    100e:	ac 81       	ldd	r26, Y+4	; 0x04
    1010:	bd 81       	ldd	r27, Y+5	; 0x05
    1012:	80 3b       	cpi	r24, 0xB0	; 176
    1014:	2d ea       	ldi	r18, 0xAD	; 173
    1016:	92 07       	cpc	r25, r18
    1018:	21 e0       	ldi	r18, 0x01	; 1
    101a:	a2 07       	cpc	r26, r18
    101c:	20 e0       	ldi	r18, 0x00	; 0
    101e:	b2 07       	cpc	r27, r18
    1020:	48 f3       	brcs	.-46     	; 0xff4 <DisplayEnterPasswordCheck+0x94>
		LCD_clearScreen();
    1022:	0e 94 7d 12 	call	0x24fa	; 0x24fa <LCD_clearScreen>
    1026:	2a c0       	rjmp	.+84     	; 0x107c <DisplayEnterPasswordCheck+0x11c>
	}
	else if (Check == AlarmCheck )
    1028:	89 81       	ldd	r24, Y+1	; 0x01
    102a:	81 31       	cpi	r24, 0x11	; 17
    102c:	39 f5       	brne	.+78     	; 0x107c <DisplayEnterPasswordCheck+0x11c>
	{
		LCD_clearScreen();
    102e:	0e 94 7d 12 	call	0x24fa	; 0x24fa <LCD_clearScreen>
		LCD_displayStringRowColumn(0, 0, "Incorrect Password");
    1032:	20 ed       	ldi	r18, 0xD0	; 208
    1034:	30 e0       	ldi	r19, 0x00	; 0
    1036:	80 e0       	ldi	r24, 0x00	; 0
    1038:	60 e0       	ldi	r22, 0x00	; 0
    103a:	a9 01       	movw	r20, r18
    103c:	0e 94 41 12 	call	0x2482	; 0x2482 <LCD_displayStringRowColumn>
		for(cnt=0 ; cnt<90000 ; cnt++);
    1040:	1a 82       	std	Y+2, r1	; 0x02
    1042:	1b 82       	std	Y+3, r1	; 0x03
    1044:	1c 82       	std	Y+4, r1	; 0x04
    1046:	1d 82       	std	Y+5, r1	; 0x05
    1048:	0b c0       	rjmp	.+22     	; 0x1060 <DisplayEnterPasswordCheck+0x100>
    104a:	8a 81       	ldd	r24, Y+2	; 0x02
    104c:	9b 81       	ldd	r25, Y+3	; 0x03
    104e:	ac 81       	ldd	r26, Y+4	; 0x04
    1050:	bd 81       	ldd	r27, Y+5	; 0x05
    1052:	01 96       	adiw	r24, 0x01	; 1
    1054:	a1 1d       	adc	r26, r1
    1056:	b1 1d       	adc	r27, r1
    1058:	8a 83       	std	Y+2, r24	; 0x02
    105a:	9b 83       	std	Y+3, r25	; 0x03
    105c:	ac 83       	std	Y+4, r26	; 0x04
    105e:	bd 83       	std	Y+5, r27	; 0x05
    1060:	8a 81       	ldd	r24, Y+2	; 0x02
    1062:	9b 81       	ldd	r25, Y+3	; 0x03
    1064:	ac 81       	ldd	r26, Y+4	; 0x04
    1066:	bd 81       	ldd	r27, Y+5	; 0x05
    1068:	80 39       	cpi	r24, 0x90	; 144
    106a:	2f e5       	ldi	r18, 0x5F	; 95
    106c:	92 07       	cpc	r25, r18
    106e:	21 e0       	ldi	r18, 0x01	; 1
    1070:	a2 07       	cpc	r26, r18
    1072:	20 e0       	ldi	r18, 0x00	; 0
    1074:	b2 07       	cpc	r27, r18
    1076:	48 f3       	brcs	.-46     	; 0x104a <DisplayEnterPasswordCheck+0xea>
		LCD_clearScreen();
    1078:	0e 94 7d 12 	call	0x24fa	; 0x24fa <LCD_clearScreen>
	}
	return Check;
    107c:	89 81       	ldd	r24, Y+1	; 0x01
}
    107e:	0f 90       	pop	r0
    1080:	0f 90       	pop	r0
    1082:	0f 90       	pop	r0
    1084:	0f 90       	pop	r0
    1086:	0f 90       	pop	r0
    1088:	cf 91       	pop	r28
    108a:	df 91       	pop	r29
    108c:	08 95       	ret

0000108e <OpenDoorApplication>:
/*
 * Description : Function to control the actuation of the buzzer and DC motor
 */

void OpenDoorApplication (void)
{
    108e:	df 93       	push	r29
    1090:	cf 93       	push	r28
    1092:	cd b7       	in	r28, 0x3d	; 61
    1094:	de b7       	in	r29, 0x3e	; 62
    1096:	6d 97       	sbiw	r28, 0x1d	; 29
    1098:	0f b6       	in	r0, 0x3f	; 63
    109a:	f8 94       	cli
    109c:	de bf       	out	0x3e, r29	; 62
    109e:	0f be       	out	0x3f, r0	; 63
    10a0:	cd bf       	out	0x3d, r28	; 61
	uint8 PasswordMainCheck;
	PasswordMainCheck = DisplayEnterPasswordCheck();
    10a2:	0e 94 b0 07 	call	0xf60	; 0xf60 <DisplayEnterPasswordCheck>
    10a6:	89 83       	std	Y+1, r24	; 0x01
	 * 3 : Set OC1A/OC1B on compare match (Set output to high level)
	 * 4 : Select Channel A
	 * 5 : Set initial timer value to zero
	 * 6 : Compare value = 62500
	 */
	Timer_Config Buzzer_timer_config = { CTC, T_F_CPU_256, SetCompareMatch, 'A', 0, 62500};
    10a8:	ce 01       	movw	r24, r28
    10aa:	02 96       	adiw	r24, 0x02	; 2
    10ac:	9d 8b       	std	Y+21, r25	; 0x15
    10ae:	8c 8b       	std	Y+20, r24	; 0x14
    10b0:	ec e7       	ldi	r30, 0x7C	; 124
    10b2:	f1 e0       	ldi	r31, 0x01	; 1
    10b4:	ff 8b       	std	Y+23, r31	; 0x17
    10b6:	ee 8b       	std	Y+22, r30	; 0x16
    10b8:	f9 e0       	ldi	r31, 0x09	; 9
    10ba:	f8 8f       	std	Y+24, r31	; 0x18
    10bc:	ee 89       	ldd	r30, Y+22	; 0x16
    10be:	ff 89       	ldd	r31, Y+23	; 0x17
    10c0:	00 80       	ld	r0, Z
    10c2:	8e 89       	ldd	r24, Y+22	; 0x16
    10c4:	9f 89       	ldd	r25, Y+23	; 0x17
    10c6:	01 96       	adiw	r24, 0x01	; 1
    10c8:	9f 8b       	std	Y+23, r25	; 0x17
    10ca:	8e 8b       	std	Y+22, r24	; 0x16
    10cc:	ec 89       	ldd	r30, Y+20	; 0x14
    10ce:	fd 89       	ldd	r31, Y+21	; 0x15
    10d0:	00 82       	st	Z, r0
    10d2:	8c 89       	ldd	r24, Y+20	; 0x14
    10d4:	9d 89       	ldd	r25, Y+21	; 0x15
    10d6:	01 96       	adiw	r24, 0x01	; 1
    10d8:	9d 8b       	std	Y+21, r25	; 0x15
    10da:	8c 8b       	std	Y+20, r24	; 0x14
    10dc:	98 8d       	ldd	r25, Y+24	; 0x18
    10de:	91 50       	subi	r25, 0x01	; 1
    10e0:	98 8f       	std	Y+24, r25	; 0x18
    10e2:	e8 8d       	ldd	r30, Y+24	; 0x18
    10e4:	ee 23       	and	r30, r30
    10e6:	51 f7       	brne	.-44     	; 0x10bc <OpenDoorApplication+0x2e>
	 * 3 : Normal port operation, OC1A/OC1B disconnected.
	 * 4 : In case of Timer1, Choose Channel A or B
	 * 5 : Initial value = 0
	 * 6 : Final value = 255
	 */
	Timer_Config Motor_timer_config = { CTC, T_F_CPU_1024, NormalMatchMode, 'A', 0, 255};
    10e8:	ce 01       	movw	r24, r28
    10ea:	0b 96       	adiw	r24, 0x0b	; 11
    10ec:	9a 8f       	std	Y+26, r25	; 0x1a
    10ee:	89 8f       	std	Y+25, r24	; 0x19
    10f0:	e3 e7       	ldi	r30, 0x73	; 115
    10f2:	f1 e0       	ldi	r31, 0x01	; 1
    10f4:	fc 8f       	std	Y+28, r31	; 0x1c
    10f6:	eb 8f       	std	Y+27, r30	; 0x1b
    10f8:	f9 e0       	ldi	r31, 0x09	; 9
    10fa:	fd 8f       	std	Y+29, r31	; 0x1d
    10fc:	eb 8d       	ldd	r30, Y+27	; 0x1b
    10fe:	fc 8d       	ldd	r31, Y+28	; 0x1c
    1100:	00 80       	ld	r0, Z
    1102:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1104:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1106:	01 96       	adiw	r24, 0x01	; 1
    1108:	9c 8f       	std	Y+28, r25	; 0x1c
    110a:	8b 8f       	std	Y+27, r24	; 0x1b
    110c:	e9 8d       	ldd	r30, Y+25	; 0x19
    110e:	fa 8d       	ldd	r31, Y+26	; 0x1a
    1110:	00 82       	st	Z, r0
    1112:	89 8d       	ldd	r24, Y+25	; 0x19
    1114:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1116:	01 96       	adiw	r24, 0x01	; 1
    1118:	9a 8f       	std	Y+26, r25	; 0x1a
    111a:	89 8f       	std	Y+25, r24	; 0x19
    111c:	9d 8d       	ldd	r25, Y+29	; 0x1d
    111e:	91 50       	subi	r25, 0x01	; 1
    1120:	9d 8f       	std	Y+29, r25	; 0x1d
    1122:	ed 8d       	ldd	r30, Y+29	; 0x1d
    1124:	ee 23       	and	r30, r30
    1126:	51 f7       	brne	.-44     	; 0x10fc <OpenDoorApplication+0x6e>

	if (PasswordMainCheck == MatchedPassword )
    1128:	89 81       	ldd	r24, Y+1	; 0x01
    112a:	89 30       	cpi	r24, 0x09	; 9
    112c:	09 f0       	breq	.+2      	; 0x1130 <OpenDoorApplication+0xa2>
    112e:	3b c0       	rjmp	.+118    	; 0x11a6 <OpenDoorApplication+0x118>
	{
		cli();		/*Disable Interrupts*/
    1130:	f8 94       	cli
		sei();		/*Enable Interrupts*/
    1132:	78 94       	sei
		LCD_clearScreen();
    1134:	0e 94 7d 12 	call	0x24fa	; 0x24fa <LCD_clearScreen>

		/*DC Motor Timer0 Call back*/
		Timer0_setCallBack(DCMotor_Start_Processing);
    1138:	82 ee       	ldi	r24, 0xE2	; 226
    113a:	95 e0       	ldi	r25, 0x05	; 5
    113c:	0e 94 b2 15 	call	0x2b64	; 0x2b64 <Timer0_setCallBack>

		/*
		 * Timer Type : Timer0
		 * DC Motor Timer0 initialization
		 */
		Timer_Init(Timer0,&Motor_timer_config);
    1140:	9e 01       	movw	r18, r28
    1142:	25 5f       	subi	r18, 0xF5	; 245
    1144:	3f 4f       	sbci	r19, 0xFF	; 255
    1146:	80 e0       	ldi	r24, 0x00	; 0
    1148:	b9 01       	movw	r22, r18
    114a:	0e 94 ec 13 	call	0x27d8	; 0x27d8 <Timer_Init>


		LCD_displayStringRowColumn(0, 0, "Door is Opening");
    114e:	23 ee       	ldi	r18, 0xE3	; 227
    1150:	30 e0       	ldi	r19, 0x00	; 0
    1152:	80 e0       	ldi	r24, 0x00	; 0
    1154:	60 e0       	ldi	r22, 0x00	; 0
    1156:	a9 01       	movw	r20, r18
    1158:	0e 94 41 12 	call	0x2482	; 0x2482 <LCD_displayStringRowColumn>
		while (DCMotor_Timer_Flag == 0);
    115c:	80 91 8a 01 	lds	r24, 0x018A
    1160:	88 23       	and	r24, r24
    1162:	e1 f3       	breq	.-8      	; 0x115c <OpenDoorApplication+0xce>
		LCD_clearScreen();
    1164:	0e 94 7d 12 	call	0x24fa	; 0x24fa <LCD_clearScreen>

		LCD_displayStringRowColumn(0, 0, "Door is Opened");
    1168:	23 ef       	ldi	r18, 0xF3	; 243
    116a:	30 e0       	ldi	r19, 0x00	; 0
    116c:	80 e0       	ldi	r24, 0x00	; 0
    116e:	60 e0       	ldi	r22, 0x00	; 0
    1170:	a9 01       	movw	r20, r18
    1172:	0e 94 41 12 	call	0x2482	; 0x2482 <LCD_displayStringRowColumn>
		while (DCMotor_Timer_Flag == 1);
    1176:	80 91 8a 01 	lds	r24, 0x018A
    117a:	81 30       	cpi	r24, 0x01	; 1
    117c:	e1 f3       	breq	.-8      	; 0x1176 <OpenDoorApplication+0xe8>
		LCD_clearScreen();
    117e:	0e 94 7d 12 	call	0x24fa	; 0x24fa <LCD_clearScreen>

		LCD_displayStringRowColumn(0, 0, "Door is Closing");
    1182:	22 e0       	ldi	r18, 0x02	; 2
    1184:	31 e0       	ldi	r19, 0x01	; 1
    1186:	80 e0       	ldi	r24, 0x00	; 0
    1188:	60 e0       	ldi	r22, 0x00	; 0
    118a:	a9 01       	movw	r20, r18
    118c:	0e 94 41 12 	call	0x2482	; 0x2482 <LCD_displayStringRowColumn>
		while (DCMotor_Timer_Flag == 2);
    1190:	80 91 8a 01 	lds	r24, 0x018A
    1194:	82 30       	cpi	r24, 0x02	; 2
    1196:	e1 f3       	breq	.-8      	; 0x1190 <OpenDoorApplication+0x102>
		LCD_clearScreen();
    1198:	0e 94 7d 12 	call	0x24fa	; 0x24fa <LCD_clearScreen>

		/*DC Motor Timer0 deactivate*/
		Timer_DeInit(Timer0);
    119c:	80 e0       	ldi	r24, 0x00	; 0
    119e:	0e 94 e8 15 	call	0x2bd0	; 0x2bd0 <Timer_DeInit>
		cli();		/*Disable Interrupts*/
    11a2:	f8 94       	cli
    11a4:	26 c0       	rjmp	.+76     	; 0x11f2 <OpenDoorApplication+0x164>
		return;
	}
	else if (PasswordMainCheck == NotMatchedPassword )
    11a6:	89 81       	ldd	r24, Y+1	; 0x01
    11a8:	88 30       	cpi	r24, 0x08	; 8
    11aa:	19 f1       	breq	.+70     	; 0x11f2 <OpenDoorApplication+0x164>
	{
		return;
	}
	else if (PasswordMainCheck == AlarmCheck )
    11ac:	89 81       	ldd	r24, Y+1	; 0x01
    11ae:	81 31       	cpi	r24, 0x11	; 17
    11b0:	01 f5       	brne	.+64     	; 0x11f2 <OpenDoorApplication+0x164>
	{
		cli();		/*Disable Interrupts*/
    11b2:	f8 94       	cli
		sei();		/*Enable Interrupts*/
    11b4:	78 94       	sei

		/*Buzzer Timer1 Call back*/
		Timer1_setCallBack(Buzzer_Processing_Time);
    11b6:	86 e1       	ldi	r24, 0x16	; 22
    11b8:	96 e0       	ldi	r25, 0x06	; 6
    11ba:	0e 94 c4 15 	call	0x2b88	; 0x2b88 <Timer1_setCallBack>

		/*
		 * Timer Type : Timer1
		 * Buzzer Timer1 initialization
		 */
		Timer_Init(Timer1,&Buzzer_timer_config);
    11be:	9e 01       	movw	r18, r28
    11c0:	2e 5f       	subi	r18, 0xFE	; 254
    11c2:	3f 4f       	sbci	r19, 0xFF	; 255
    11c4:	81 e0       	ldi	r24, 0x01	; 1
    11c6:	b9 01       	movw	r22, r18
    11c8:	0e 94 ec 13 	call	0x27d8	; 0x27d8 <Timer_Init>

		LCD_clearScreen();
    11cc:	0e 94 7d 12 	call	0x24fa	; 0x24fa <LCD_clearScreen>
		LCD_displayStringRowColumn(0, 0, "ALARM!!");
    11d0:	22 e1       	ldi	r18, 0x12	; 18
    11d2:	31 e0       	ldi	r19, 0x01	; 1
    11d4:	80 e0       	ldi	r24, 0x00	; 0
    11d6:	60 e0       	ldi	r22, 0x00	; 0
    11d8:	a9 01       	movw	r20, r18
    11da:	0e 94 41 12 	call	0x2482	; 0x2482 <LCD_displayStringRowColumn>
		while ( Buzzer_Timer_Flag != 1 );
    11de:	80 91 8b 01 	lds	r24, 0x018B
    11e2:	81 30       	cpi	r24, 0x01	; 1
    11e4:	e1 f7       	brne	.-8      	; 0x11de <OpenDoorApplication+0x150>

		LCD_clearScreen();
    11e6:	0e 94 7d 12 	call	0x24fa	; 0x24fa <LCD_clearScreen>

		/*Buzzer Timer1 deactivate*/
		Timer_DeInit(Timer1);
    11ea:	81 e0       	ldi	r24, 0x01	; 1
    11ec:	0e 94 e8 15 	call	0x2bd0	; 0x2bd0 <Timer_DeInit>
		cli();		/*Disable Interrupts*/
    11f0:	f8 94       	cli
	}
}
    11f2:	6d 96       	adiw	r28, 0x1d	; 29
    11f4:	0f b6       	in	r0, 0x3f	; 63
    11f6:	f8 94       	cli
    11f8:	de bf       	out	0x3e, r29	; 62
    11fa:	0f be       	out	0x3f, r0	; 63
    11fc:	cd bf       	out	0x3d, r28	; 61
    11fe:	cf 91       	pop	r28
    1200:	df 91       	pop	r29
    1202:	08 95       	ret

00001204 <ChnagePasswordApplication>:
/*
 * Description : Function to control the Change of password instruction
 */

void ChnagePasswordApplication (void)
{
    1204:	df 93       	push	r29
    1206:	cf 93       	push	r28
    1208:	0f 92       	push	r0
    120a:	cd b7       	in	r28, 0x3d	; 61
    120c:	de b7       	in	r29, 0x3e	; 62
	uint8 PasswordNewCheck;

	PasswordNewCheck=DisplayEnterPasswordCheck();
    120e:	0e 94 b0 07 	call	0xf60	; 0xf60 <DisplayEnterPasswordCheck>
    1212:	89 83       	std	Y+1, r24	; 0x01

	if (PasswordNewCheck == MatchedPassword)
    1214:	89 81       	ldd	r24, Y+1	; 0x01
    1216:	89 30       	cpi	r24, 0x09	; 9
    1218:	49 f4       	brne	.+18     	; 0x122c <ChnagePasswordApplication+0x28>
	{
		DisplayNewPasswordCheck();
    121a:	0e 94 3c 07 	call	0xe78	; 0xe78 <DisplayNewPasswordCheck>
		LCD_displayStringRowColumn(0, 0, "Password Changed successfully");
    121e:	2a e1       	ldi	r18, 0x1A	; 26
    1220:	31 e0       	ldi	r19, 0x01	; 1
    1222:	80 e0       	ldi	r24, 0x00	; 0
    1224:	60 e0       	ldi	r22, 0x00	; 0
    1226:	a9 01       	movw	r20, r18
    1228:	0e 94 41 12 	call	0x2482	; 0x2482 <LCD_displayStringRowColumn>
	else if (PasswordNewCheck == AlarmCheck )
	{
		return;

	}
}
    122c:	0f 90       	pop	r0
    122e:	cf 91       	pop	r28
    1230:	df 91       	pop	r29
    1232:	08 95       	ret

00001234 <MainMenuCheck>:
/*
 * Description: Function that control the main menu display options
 */

void MainMenuCheck (void)
{
    1234:	df 93       	push	r29
    1236:	cf 93       	push	r28
    1238:	00 d0       	rcall	.+0      	; 0x123a <MainMenuCheck+0x6>
    123a:	00 d0       	rcall	.+0      	; 0x123c <MainMenuCheck+0x8>
    123c:	0f 92       	push	r0
    123e:	cd b7       	in	r28, 0x3d	; 61
    1240:	de b7       	in	r29, 0x3e	; 62
	volatile uint32 cnt;
	uint8 status;

	LCD_clearScreen();
    1242:	0e 94 7d 12 	call	0x24fa	; 0x24fa <LCD_clearScreen>
	LCD_displayStringRowColumn(0, 0, "+:Open Door");
    1246:	28 e3       	ldi	r18, 0x38	; 56
    1248:	31 e0       	ldi	r19, 0x01	; 1
    124a:	80 e0       	ldi	r24, 0x00	; 0
    124c:	60 e0       	ldi	r22, 0x00	; 0
    124e:	a9 01       	movw	r20, r18
    1250:	0e 94 41 12 	call	0x2482	; 0x2482 <LCD_displayStringRowColumn>
	LCD_displayStringRowColumn(1, 0, "-:ChangePassword");
    1254:	24 e4       	ldi	r18, 0x44	; 68
    1256:	31 e0       	ldi	r19, 0x01	; 1
    1258:	81 e0       	ldi	r24, 0x01	; 1
    125a:	60 e0       	ldi	r22, 0x00	; 0
    125c:	a9 01       	movw	r20, r18
    125e:	0e 94 41 12 	call	0x2482	; 0x2482 <LCD_displayStringRowColumn>

	status = KEYPAD_getPressedKey();
    1262:	0e 94 d1 0c 	call	0x19a2	; 0x19a2 <KEYPAD_getPressedKey>
    1266:	89 83       	std	Y+1, r24	; 0x01
	for(cnt=0 ; cnt<110000 ; cnt++);
    1268:	1a 82       	std	Y+2, r1	; 0x02
    126a:	1b 82       	std	Y+3, r1	; 0x03
    126c:	1c 82       	std	Y+4, r1	; 0x04
    126e:	1d 82       	std	Y+5, r1	; 0x05
    1270:	0b c0       	rjmp	.+22     	; 0x1288 <MainMenuCheck+0x54>
    1272:	8a 81       	ldd	r24, Y+2	; 0x02
    1274:	9b 81       	ldd	r25, Y+3	; 0x03
    1276:	ac 81       	ldd	r26, Y+4	; 0x04
    1278:	bd 81       	ldd	r27, Y+5	; 0x05
    127a:	01 96       	adiw	r24, 0x01	; 1
    127c:	a1 1d       	adc	r26, r1
    127e:	b1 1d       	adc	r27, r1
    1280:	8a 83       	std	Y+2, r24	; 0x02
    1282:	9b 83       	std	Y+3, r25	; 0x03
    1284:	ac 83       	std	Y+4, r26	; 0x04
    1286:	bd 83       	std	Y+5, r27	; 0x05
    1288:	8a 81       	ldd	r24, Y+2	; 0x02
    128a:	9b 81       	ldd	r25, Y+3	; 0x03
    128c:	ac 81       	ldd	r26, Y+4	; 0x04
    128e:	bd 81       	ldd	r27, Y+5	; 0x05
    1290:	80 3b       	cpi	r24, 0xB0	; 176
    1292:	2d ea       	ldi	r18, 0xAD	; 173
    1294:	92 07       	cpc	r25, r18
    1296:	21 e0       	ldi	r18, 0x01	; 1
    1298:	a2 07       	cpc	r26, r18
    129a:	20 e0       	ldi	r18, 0x00	; 0
    129c:	b2 07       	cpc	r27, r18
    129e:	48 f3       	brcs	.-46     	; 0x1272 <MainMenuCheck+0x3e>
	/*In case of Press +, Start the motor*/
	if (status == '+')
    12a0:	89 81       	ldd	r24, Y+1	; 0x01
    12a2:	8b 32       	cpi	r24, 0x2B	; 43
    12a4:	41 f4       	brne	.+16     	; 0x12b6 <MainMenuCheck+0x82>
	{
		UART_sendByte(MenuDoorStatus);
    12a6:	87 e0       	ldi	r24, 0x07	; 7
    12a8:	0e 94 cb 16 	call	0x2d96	; 0x2d96 <UART_sendByte>

		LCD_clearScreen();
    12ac:	0e 94 7d 12 	call	0x24fa	; 0x24fa <LCD_clearScreen>

		OpenDoorApplication();
    12b0:	0e 94 47 08 	call	0x108e	; 0x108e <OpenDoorApplication>
    12b4:	30 c0       	rjmp	.+96     	; 0x1316 <MainMenuCheck+0xe2>
	}
	/*In case of press -, Change the Password*/
	else if (status == '-')
    12b6:	89 81       	ldd	r24, Y+1	; 0x01
    12b8:	8d 32       	cpi	r24, 0x2D	; 45
    12ba:	41 f4       	brne	.+16     	; 0x12cc <MainMenuCheck+0x98>
	{
		LCD_clearScreen();
    12bc:	0e 94 7d 12 	call	0x24fa	; 0x24fa <LCD_clearScreen>
		UART_sendByte(MenuChangingPassword);
    12c0:	86 e0       	ldi	r24, 0x06	; 6
    12c2:	0e 94 cb 16 	call	0x2d96	; 0x2d96 <UART_sendByte>
		ChnagePasswordApplication();
    12c6:	0e 94 02 09 	call	0x1204	; 0x1204 <ChnagePasswordApplication>
    12ca:	25 c0       	rjmp	.+74     	; 0x1316 <MainMenuCheck+0xe2>
	}
	/*In case of press other key, Display Invalid data*/
	else
	{
		LCD_clearScreen();
    12cc:	0e 94 7d 12 	call	0x24fa	; 0x24fa <LCD_clearScreen>
		LCD_displayStringRowColumn(0, 0, "Invalid Data");
    12d0:	25 e5       	ldi	r18, 0x55	; 85
    12d2:	31 e0       	ldi	r19, 0x01	; 1
    12d4:	80 e0       	ldi	r24, 0x00	; 0
    12d6:	60 e0       	ldi	r22, 0x00	; 0
    12d8:	a9 01       	movw	r20, r18
    12da:	0e 94 41 12 	call	0x2482	; 0x2482 <LCD_displayStringRowColumn>
		for(cnt=0 ; cnt<110000 ; cnt++);
    12de:	1a 82       	std	Y+2, r1	; 0x02
    12e0:	1b 82       	std	Y+3, r1	; 0x03
    12e2:	1c 82       	std	Y+4, r1	; 0x04
    12e4:	1d 82       	std	Y+5, r1	; 0x05
    12e6:	0b c0       	rjmp	.+22     	; 0x12fe <MainMenuCheck+0xca>
    12e8:	8a 81       	ldd	r24, Y+2	; 0x02
    12ea:	9b 81       	ldd	r25, Y+3	; 0x03
    12ec:	ac 81       	ldd	r26, Y+4	; 0x04
    12ee:	bd 81       	ldd	r27, Y+5	; 0x05
    12f0:	01 96       	adiw	r24, 0x01	; 1
    12f2:	a1 1d       	adc	r26, r1
    12f4:	b1 1d       	adc	r27, r1
    12f6:	8a 83       	std	Y+2, r24	; 0x02
    12f8:	9b 83       	std	Y+3, r25	; 0x03
    12fa:	ac 83       	std	Y+4, r26	; 0x04
    12fc:	bd 83       	std	Y+5, r27	; 0x05
    12fe:	8a 81       	ldd	r24, Y+2	; 0x02
    1300:	9b 81       	ldd	r25, Y+3	; 0x03
    1302:	ac 81       	ldd	r26, Y+4	; 0x04
    1304:	bd 81       	ldd	r27, Y+5	; 0x05
    1306:	80 3b       	cpi	r24, 0xB0	; 176
    1308:	2d ea       	ldi	r18, 0xAD	; 173
    130a:	92 07       	cpc	r25, r18
    130c:	21 e0       	ldi	r18, 0x01	; 1
    130e:	a2 07       	cpc	r26, r18
    1310:	20 e0       	ldi	r18, 0x00	; 0
    1312:	b2 07       	cpc	r27, r18
    1314:	48 f3       	brcs	.-46     	; 0x12e8 <MainMenuCheck+0xb4>
	}
}
    1316:	0f 90       	pop	r0
    1318:	0f 90       	pop	r0
    131a:	0f 90       	pop	r0
    131c:	0f 90       	pop	r0
    131e:	0f 90       	pop	r0
    1320:	cf 91       	pop	r28
    1322:	df 91       	pop	r29
    1324:	08 95       	ret

00001326 <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    1326:	df 93       	push	r29
    1328:	cf 93       	push	r28
    132a:	00 d0       	rcall	.+0      	; 0x132c <GPIO_setupPinDirection+0x6>
    132c:	00 d0       	rcall	.+0      	; 0x132e <GPIO_setupPinDirection+0x8>
    132e:	0f 92       	push	r0
    1330:	cd b7       	in	r28, 0x3d	; 61
    1332:	de b7       	in	r29, 0x3e	; 62
    1334:	89 83       	std	Y+1, r24	; 0x01
    1336:	6a 83       	std	Y+2, r22	; 0x02
    1338:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    133a:	8a 81       	ldd	r24, Y+2	; 0x02
    133c:	88 30       	cpi	r24, 0x08	; 8
    133e:	08 f0       	brcs	.+2      	; 0x1342 <GPIO_setupPinDirection+0x1c>
    1340:	d5 c0       	rjmp	.+426    	; 0x14ec <GPIO_setupPinDirection+0x1c6>
    1342:	89 81       	ldd	r24, Y+1	; 0x01
    1344:	84 30       	cpi	r24, 0x04	; 4
    1346:	08 f0       	brcs	.+2      	; 0x134a <GPIO_setupPinDirection+0x24>
    1348:	d1 c0       	rjmp	.+418    	; 0x14ec <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    134a:	89 81       	ldd	r24, Y+1	; 0x01
    134c:	28 2f       	mov	r18, r24
    134e:	30 e0       	ldi	r19, 0x00	; 0
    1350:	3d 83       	std	Y+5, r19	; 0x05
    1352:	2c 83       	std	Y+4, r18	; 0x04
    1354:	8c 81       	ldd	r24, Y+4	; 0x04
    1356:	9d 81       	ldd	r25, Y+5	; 0x05
    1358:	81 30       	cpi	r24, 0x01	; 1
    135a:	91 05       	cpc	r25, r1
    135c:	09 f4       	brne	.+2      	; 0x1360 <GPIO_setupPinDirection+0x3a>
    135e:	43 c0       	rjmp	.+134    	; 0x13e6 <GPIO_setupPinDirection+0xc0>
    1360:	2c 81       	ldd	r18, Y+4	; 0x04
    1362:	3d 81       	ldd	r19, Y+5	; 0x05
    1364:	22 30       	cpi	r18, 0x02	; 2
    1366:	31 05       	cpc	r19, r1
    1368:	2c f4       	brge	.+10     	; 0x1374 <GPIO_setupPinDirection+0x4e>
    136a:	8c 81       	ldd	r24, Y+4	; 0x04
    136c:	9d 81       	ldd	r25, Y+5	; 0x05
    136e:	00 97       	sbiw	r24, 0x00	; 0
    1370:	71 f0       	breq	.+28     	; 0x138e <GPIO_setupPinDirection+0x68>
    1372:	bc c0       	rjmp	.+376    	; 0x14ec <GPIO_setupPinDirection+0x1c6>
    1374:	2c 81       	ldd	r18, Y+4	; 0x04
    1376:	3d 81       	ldd	r19, Y+5	; 0x05
    1378:	22 30       	cpi	r18, 0x02	; 2
    137a:	31 05       	cpc	r19, r1
    137c:	09 f4       	brne	.+2      	; 0x1380 <GPIO_setupPinDirection+0x5a>
    137e:	5f c0       	rjmp	.+190    	; 0x143e <GPIO_setupPinDirection+0x118>
    1380:	8c 81       	ldd	r24, Y+4	; 0x04
    1382:	9d 81       	ldd	r25, Y+5	; 0x05
    1384:	83 30       	cpi	r24, 0x03	; 3
    1386:	91 05       	cpc	r25, r1
    1388:	09 f4       	brne	.+2      	; 0x138c <GPIO_setupPinDirection+0x66>
    138a:	85 c0       	rjmp	.+266    	; 0x1496 <GPIO_setupPinDirection+0x170>
    138c:	af c0       	rjmp	.+350    	; 0x14ec <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    138e:	8b 81       	ldd	r24, Y+3	; 0x03
    1390:	81 30       	cpi	r24, 0x01	; 1
    1392:	a1 f4       	brne	.+40     	; 0x13bc <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    1394:	aa e3       	ldi	r26, 0x3A	; 58
    1396:	b0 e0       	ldi	r27, 0x00	; 0
    1398:	ea e3       	ldi	r30, 0x3A	; 58
    139a:	f0 e0       	ldi	r31, 0x00	; 0
    139c:	80 81       	ld	r24, Z
    139e:	48 2f       	mov	r20, r24
    13a0:	8a 81       	ldd	r24, Y+2	; 0x02
    13a2:	28 2f       	mov	r18, r24
    13a4:	30 e0       	ldi	r19, 0x00	; 0
    13a6:	81 e0       	ldi	r24, 0x01	; 1
    13a8:	90 e0       	ldi	r25, 0x00	; 0
    13aa:	02 2e       	mov	r0, r18
    13ac:	02 c0       	rjmp	.+4      	; 0x13b2 <GPIO_setupPinDirection+0x8c>
    13ae:	88 0f       	add	r24, r24
    13b0:	99 1f       	adc	r25, r25
    13b2:	0a 94       	dec	r0
    13b4:	e2 f7       	brpl	.-8      	; 0x13ae <GPIO_setupPinDirection+0x88>
    13b6:	84 2b       	or	r24, r20
    13b8:	8c 93       	st	X, r24
    13ba:	98 c0       	rjmp	.+304    	; 0x14ec <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    13bc:	aa e3       	ldi	r26, 0x3A	; 58
    13be:	b0 e0       	ldi	r27, 0x00	; 0
    13c0:	ea e3       	ldi	r30, 0x3A	; 58
    13c2:	f0 e0       	ldi	r31, 0x00	; 0
    13c4:	80 81       	ld	r24, Z
    13c6:	48 2f       	mov	r20, r24
    13c8:	8a 81       	ldd	r24, Y+2	; 0x02
    13ca:	28 2f       	mov	r18, r24
    13cc:	30 e0       	ldi	r19, 0x00	; 0
    13ce:	81 e0       	ldi	r24, 0x01	; 1
    13d0:	90 e0       	ldi	r25, 0x00	; 0
    13d2:	02 2e       	mov	r0, r18
    13d4:	02 c0       	rjmp	.+4      	; 0x13da <GPIO_setupPinDirection+0xb4>
    13d6:	88 0f       	add	r24, r24
    13d8:	99 1f       	adc	r25, r25
    13da:	0a 94       	dec	r0
    13dc:	e2 f7       	brpl	.-8      	; 0x13d6 <GPIO_setupPinDirection+0xb0>
    13de:	80 95       	com	r24
    13e0:	84 23       	and	r24, r20
    13e2:	8c 93       	st	X, r24
    13e4:	83 c0       	rjmp	.+262    	; 0x14ec <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    13e6:	8b 81       	ldd	r24, Y+3	; 0x03
    13e8:	81 30       	cpi	r24, 0x01	; 1
    13ea:	a1 f4       	brne	.+40     	; 0x1414 <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    13ec:	a7 e3       	ldi	r26, 0x37	; 55
    13ee:	b0 e0       	ldi	r27, 0x00	; 0
    13f0:	e7 e3       	ldi	r30, 0x37	; 55
    13f2:	f0 e0       	ldi	r31, 0x00	; 0
    13f4:	80 81       	ld	r24, Z
    13f6:	48 2f       	mov	r20, r24
    13f8:	8a 81       	ldd	r24, Y+2	; 0x02
    13fa:	28 2f       	mov	r18, r24
    13fc:	30 e0       	ldi	r19, 0x00	; 0
    13fe:	81 e0       	ldi	r24, 0x01	; 1
    1400:	90 e0       	ldi	r25, 0x00	; 0
    1402:	02 2e       	mov	r0, r18
    1404:	02 c0       	rjmp	.+4      	; 0x140a <GPIO_setupPinDirection+0xe4>
    1406:	88 0f       	add	r24, r24
    1408:	99 1f       	adc	r25, r25
    140a:	0a 94       	dec	r0
    140c:	e2 f7       	brpl	.-8      	; 0x1406 <GPIO_setupPinDirection+0xe0>
    140e:	84 2b       	or	r24, r20
    1410:	8c 93       	st	X, r24
    1412:	6c c0       	rjmp	.+216    	; 0x14ec <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    1414:	a7 e3       	ldi	r26, 0x37	; 55
    1416:	b0 e0       	ldi	r27, 0x00	; 0
    1418:	e7 e3       	ldi	r30, 0x37	; 55
    141a:	f0 e0       	ldi	r31, 0x00	; 0
    141c:	80 81       	ld	r24, Z
    141e:	48 2f       	mov	r20, r24
    1420:	8a 81       	ldd	r24, Y+2	; 0x02
    1422:	28 2f       	mov	r18, r24
    1424:	30 e0       	ldi	r19, 0x00	; 0
    1426:	81 e0       	ldi	r24, 0x01	; 1
    1428:	90 e0       	ldi	r25, 0x00	; 0
    142a:	02 2e       	mov	r0, r18
    142c:	02 c0       	rjmp	.+4      	; 0x1432 <GPIO_setupPinDirection+0x10c>
    142e:	88 0f       	add	r24, r24
    1430:	99 1f       	adc	r25, r25
    1432:	0a 94       	dec	r0
    1434:	e2 f7       	brpl	.-8      	; 0x142e <GPIO_setupPinDirection+0x108>
    1436:	80 95       	com	r24
    1438:	84 23       	and	r24, r20
    143a:	8c 93       	st	X, r24
    143c:	57 c0       	rjmp	.+174    	; 0x14ec <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    143e:	8b 81       	ldd	r24, Y+3	; 0x03
    1440:	81 30       	cpi	r24, 0x01	; 1
    1442:	a1 f4       	brne	.+40     	; 0x146c <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    1444:	a4 e3       	ldi	r26, 0x34	; 52
    1446:	b0 e0       	ldi	r27, 0x00	; 0
    1448:	e4 e3       	ldi	r30, 0x34	; 52
    144a:	f0 e0       	ldi	r31, 0x00	; 0
    144c:	80 81       	ld	r24, Z
    144e:	48 2f       	mov	r20, r24
    1450:	8a 81       	ldd	r24, Y+2	; 0x02
    1452:	28 2f       	mov	r18, r24
    1454:	30 e0       	ldi	r19, 0x00	; 0
    1456:	81 e0       	ldi	r24, 0x01	; 1
    1458:	90 e0       	ldi	r25, 0x00	; 0
    145a:	02 2e       	mov	r0, r18
    145c:	02 c0       	rjmp	.+4      	; 0x1462 <GPIO_setupPinDirection+0x13c>
    145e:	88 0f       	add	r24, r24
    1460:	99 1f       	adc	r25, r25
    1462:	0a 94       	dec	r0
    1464:	e2 f7       	brpl	.-8      	; 0x145e <GPIO_setupPinDirection+0x138>
    1466:	84 2b       	or	r24, r20
    1468:	8c 93       	st	X, r24
    146a:	40 c0       	rjmp	.+128    	; 0x14ec <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    146c:	a4 e3       	ldi	r26, 0x34	; 52
    146e:	b0 e0       	ldi	r27, 0x00	; 0
    1470:	e4 e3       	ldi	r30, 0x34	; 52
    1472:	f0 e0       	ldi	r31, 0x00	; 0
    1474:	80 81       	ld	r24, Z
    1476:	48 2f       	mov	r20, r24
    1478:	8a 81       	ldd	r24, Y+2	; 0x02
    147a:	28 2f       	mov	r18, r24
    147c:	30 e0       	ldi	r19, 0x00	; 0
    147e:	81 e0       	ldi	r24, 0x01	; 1
    1480:	90 e0       	ldi	r25, 0x00	; 0
    1482:	02 2e       	mov	r0, r18
    1484:	02 c0       	rjmp	.+4      	; 0x148a <GPIO_setupPinDirection+0x164>
    1486:	88 0f       	add	r24, r24
    1488:	99 1f       	adc	r25, r25
    148a:	0a 94       	dec	r0
    148c:	e2 f7       	brpl	.-8      	; 0x1486 <GPIO_setupPinDirection+0x160>
    148e:	80 95       	com	r24
    1490:	84 23       	and	r24, r20
    1492:	8c 93       	st	X, r24
    1494:	2b c0       	rjmp	.+86     	; 0x14ec <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    1496:	8b 81       	ldd	r24, Y+3	; 0x03
    1498:	81 30       	cpi	r24, 0x01	; 1
    149a:	a1 f4       	brne	.+40     	; 0x14c4 <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    149c:	a1 e3       	ldi	r26, 0x31	; 49
    149e:	b0 e0       	ldi	r27, 0x00	; 0
    14a0:	e1 e3       	ldi	r30, 0x31	; 49
    14a2:	f0 e0       	ldi	r31, 0x00	; 0
    14a4:	80 81       	ld	r24, Z
    14a6:	48 2f       	mov	r20, r24
    14a8:	8a 81       	ldd	r24, Y+2	; 0x02
    14aa:	28 2f       	mov	r18, r24
    14ac:	30 e0       	ldi	r19, 0x00	; 0
    14ae:	81 e0       	ldi	r24, 0x01	; 1
    14b0:	90 e0       	ldi	r25, 0x00	; 0
    14b2:	02 2e       	mov	r0, r18
    14b4:	02 c0       	rjmp	.+4      	; 0x14ba <GPIO_setupPinDirection+0x194>
    14b6:	88 0f       	add	r24, r24
    14b8:	99 1f       	adc	r25, r25
    14ba:	0a 94       	dec	r0
    14bc:	e2 f7       	brpl	.-8      	; 0x14b6 <GPIO_setupPinDirection+0x190>
    14be:	84 2b       	or	r24, r20
    14c0:	8c 93       	st	X, r24
    14c2:	14 c0       	rjmp	.+40     	; 0x14ec <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    14c4:	a1 e3       	ldi	r26, 0x31	; 49
    14c6:	b0 e0       	ldi	r27, 0x00	; 0
    14c8:	e1 e3       	ldi	r30, 0x31	; 49
    14ca:	f0 e0       	ldi	r31, 0x00	; 0
    14cc:	80 81       	ld	r24, Z
    14ce:	48 2f       	mov	r20, r24
    14d0:	8a 81       	ldd	r24, Y+2	; 0x02
    14d2:	28 2f       	mov	r18, r24
    14d4:	30 e0       	ldi	r19, 0x00	; 0
    14d6:	81 e0       	ldi	r24, 0x01	; 1
    14d8:	90 e0       	ldi	r25, 0x00	; 0
    14da:	02 2e       	mov	r0, r18
    14dc:	02 c0       	rjmp	.+4      	; 0x14e2 <GPIO_setupPinDirection+0x1bc>
    14de:	88 0f       	add	r24, r24
    14e0:	99 1f       	adc	r25, r25
    14e2:	0a 94       	dec	r0
    14e4:	e2 f7       	brpl	.-8      	; 0x14de <GPIO_setupPinDirection+0x1b8>
    14e6:	80 95       	com	r24
    14e8:	84 23       	and	r24, r20
    14ea:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    14ec:	0f 90       	pop	r0
    14ee:	0f 90       	pop	r0
    14f0:	0f 90       	pop	r0
    14f2:	0f 90       	pop	r0
    14f4:	0f 90       	pop	r0
    14f6:	cf 91       	pop	r28
    14f8:	df 91       	pop	r29
    14fa:	08 95       	ret

000014fc <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    14fc:	df 93       	push	r29
    14fe:	cf 93       	push	r28
    1500:	00 d0       	rcall	.+0      	; 0x1502 <GPIO_writePin+0x6>
    1502:	00 d0       	rcall	.+0      	; 0x1504 <GPIO_writePin+0x8>
    1504:	0f 92       	push	r0
    1506:	cd b7       	in	r28, 0x3d	; 61
    1508:	de b7       	in	r29, 0x3e	; 62
    150a:	89 83       	std	Y+1, r24	; 0x01
    150c:	6a 83       	std	Y+2, r22	; 0x02
    150e:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1510:	8a 81       	ldd	r24, Y+2	; 0x02
    1512:	88 30       	cpi	r24, 0x08	; 8
    1514:	08 f0       	brcs	.+2      	; 0x1518 <GPIO_writePin+0x1c>
    1516:	d5 c0       	rjmp	.+426    	; 0x16c2 <GPIO_writePin+0x1c6>
    1518:	89 81       	ldd	r24, Y+1	; 0x01
    151a:	84 30       	cpi	r24, 0x04	; 4
    151c:	08 f0       	brcs	.+2      	; 0x1520 <GPIO_writePin+0x24>
    151e:	d1 c0       	rjmp	.+418    	; 0x16c2 <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
    1520:	89 81       	ldd	r24, Y+1	; 0x01
    1522:	28 2f       	mov	r18, r24
    1524:	30 e0       	ldi	r19, 0x00	; 0
    1526:	3d 83       	std	Y+5, r19	; 0x05
    1528:	2c 83       	std	Y+4, r18	; 0x04
    152a:	8c 81       	ldd	r24, Y+4	; 0x04
    152c:	9d 81       	ldd	r25, Y+5	; 0x05
    152e:	81 30       	cpi	r24, 0x01	; 1
    1530:	91 05       	cpc	r25, r1
    1532:	09 f4       	brne	.+2      	; 0x1536 <GPIO_writePin+0x3a>
    1534:	43 c0       	rjmp	.+134    	; 0x15bc <GPIO_writePin+0xc0>
    1536:	2c 81       	ldd	r18, Y+4	; 0x04
    1538:	3d 81       	ldd	r19, Y+5	; 0x05
    153a:	22 30       	cpi	r18, 0x02	; 2
    153c:	31 05       	cpc	r19, r1
    153e:	2c f4       	brge	.+10     	; 0x154a <GPIO_writePin+0x4e>
    1540:	8c 81       	ldd	r24, Y+4	; 0x04
    1542:	9d 81       	ldd	r25, Y+5	; 0x05
    1544:	00 97       	sbiw	r24, 0x00	; 0
    1546:	71 f0       	breq	.+28     	; 0x1564 <GPIO_writePin+0x68>
    1548:	bc c0       	rjmp	.+376    	; 0x16c2 <GPIO_writePin+0x1c6>
    154a:	2c 81       	ldd	r18, Y+4	; 0x04
    154c:	3d 81       	ldd	r19, Y+5	; 0x05
    154e:	22 30       	cpi	r18, 0x02	; 2
    1550:	31 05       	cpc	r19, r1
    1552:	09 f4       	brne	.+2      	; 0x1556 <GPIO_writePin+0x5a>
    1554:	5f c0       	rjmp	.+190    	; 0x1614 <GPIO_writePin+0x118>
    1556:	8c 81       	ldd	r24, Y+4	; 0x04
    1558:	9d 81       	ldd	r25, Y+5	; 0x05
    155a:	83 30       	cpi	r24, 0x03	; 3
    155c:	91 05       	cpc	r25, r1
    155e:	09 f4       	brne	.+2      	; 0x1562 <GPIO_writePin+0x66>
    1560:	85 c0       	rjmp	.+266    	; 0x166c <GPIO_writePin+0x170>
    1562:	af c0       	rjmp	.+350    	; 0x16c2 <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    1564:	8b 81       	ldd	r24, Y+3	; 0x03
    1566:	81 30       	cpi	r24, 0x01	; 1
    1568:	a1 f4       	brne	.+40     	; 0x1592 <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    156a:	ab e3       	ldi	r26, 0x3B	; 59
    156c:	b0 e0       	ldi	r27, 0x00	; 0
    156e:	eb e3       	ldi	r30, 0x3B	; 59
    1570:	f0 e0       	ldi	r31, 0x00	; 0
    1572:	80 81       	ld	r24, Z
    1574:	48 2f       	mov	r20, r24
    1576:	8a 81       	ldd	r24, Y+2	; 0x02
    1578:	28 2f       	mov	r18, r24
    157a:	30 e0       	ldi	r19, 0x00	; 0
    157c:	81 e0       	ldi	r24, 0x01	; 1
    157e:	90 e0       	ldi	r25, 0x00	; 0
    1580:	02 2e       	mov	r0, r18
    1582:	02 c0       	rjmp	.+4      	; 0x1588 <GPIO_writePin+0x8c>
    1584:	88 0f       	add	r24, r24
    1586:	99 1f       	adc	r25, r25
    1588:	0a 94       	dec	r0
    158a:	e2 f7       	brpl	.-8      	; 0x1584 <GPIO_writePin+0x88>
    158c:	84 2b       	or	r24, r20
    158e:	8c 93       	st	X, r24
    1590:	98 c0       	rjmp	.+304    	; 0x16c2 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    1592:	ab e3       	ldi	r26, 0x3B	; 59
    1594:	b0 e0       	ldi	r27, 0x00	; 0
    1596:	eb e3       	ldi	r30, 0x3B	; 59
    1598:	f0 e0       	ldi	r31, 0x00	; 0
    159a:	80 81       	ld	r24, Z
    159c:	48 2f       	mov	r20, r24
    159e:	8a 81       	ldd	r24, Y+2	; 0x02
    15a0:	28 2f       	mov	r18, r24
    15a2:	30 e0       	ldi	r19, 0x00	; 0
    15a4:	81 e0       	ldi	r24, 0x01	; 1
    15a6:	90 e0       	ldi	r25, 0x00	; 0
    15a8:	02 2e       	mov	r0, r18
    15aa:	02 c0       	rjmp	.+4      	; 0x15b0 <GPIO_writePin+0xb4>
    15ac:	88 0f       	add	r24, r24
    15ae:	99 1f       	adc	r25, r25
    15b0:	0a 94       	dec	r0
    15b2:	e2 f7       	brpl	.-8      	; 0x15ac <GPIO_writePin+0xb0>
    15b4:	80 95       	com	r24
    15b6:	84 23       	and	r24, r20
    15b8:	8c 93       	st	X, r24
    15ba:	83 c0       	rjmp	.+262    	; 0x16c2 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    15bc:	8b 81       	ldd	r24, Y+3	; 0x03
    15be:	81 30       	cpi	r24, 0x01	; 1
    15c0:	a1 f4       	brne	.+40     	; 0x15ea <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    15c2:	a8 e3       	ldi	r26, 0x38	; 56
    15c4:	b0 e0       	ldi	r27, 0x00	; 0
    15c6:	e8 e3       	ldi	r30, 0x38	; 56
    15c8:	f0 e0       	ldi	r31, 0x00	; 0
    15ca:	80 81       	ld	r24, Z
    15cc:	48 2f       	mov	r20, r24
    15ce:	8a 81       	ldd	r24, Y+2	; 0x02
    15d0:	28 2f       	mov	r18, r24
    15d2:	30 e0       	ldi	r19, 0x00	; 0
    15d4:	81 e0       	ldi	r24, 0x01	; 1
    15d6:	90 e0       	ldi	r25, 0x00	; 0
    15d8:	02 2e       	mov	r0, r18
    15da:	02 c0       	rjmp	.+4      	; 0x15e0 <GPIO_writePin+0xe4>
    15dc:	88 0f       	add	r24, r24
    15de:	99 1f       	adc	r25, r25
    15e0:	0a 94       	dec	r0
    15e2:	e2 f7       	brpl	.-8      	; 0x15dc <GPIO_writePin+0xe0>
    15e4:	84 2b       	or	r24, r20
    15e6:	8c 93       	st	X, r24
    15e8:	6c c0       	rjmp	.+216    	; 0x16c2 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    15ea:	a8 e3       	ldi	r26, 0x38	; 56
    15ec:	b0 e0       	ldi	r27, 0x00	; 0
    15ee:	e8 e3       	ldi	r30, 0x38	; 56
    15f0:	f0 e0       	ldi	r31, 0x00	; 0
    15f2:	80 81       	ld	r24, Z
    15f4:	48 2f       	mov	r20, r24
    15f6:	8a 81       	ldd	r24, Y+2	; 0x02
    15f8:	28 2f       	mov	r18, r24
    15fa:	30 e0       	ldi	r19, 0x00	; 0
    15fc:	81 e0       	ldi	r24, 0x01	; 1
    15fe:	90 e0       	ldi	r25, 0x00	; 0
    1600:	02 2e       	mov	r0, r18
    1602:	02 c0       	rjmp	.+4      	; 0x1608 <GPIO_writePin+0x10c>
    1604:	88 0f       	add	r24, r24
    1606:	99 1f       	adc	r25, r25
    1608:	0a 94       	dec	r0
    160a:	e2 f7       	brpl	.-8      	; 0x1604 <GPIO_writePin+0x108>
    160c:	80 95       	com	r24
    160e:	84 23       	and	r24, r20
    1610:	8c 93       	st	X, r24
    1612:	57 c0       	rjmp	.+174    	; 0x16c2 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    1614:	8b 81       	ldd	r24, Y+3	; 0x03
    1616:	81 30       	cpi	r24, 0x01	; 1
    1618:	a1 f4       	brne	.+40     	; 0x1642 <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    161a:	a5 e3       	ldi	r26, 0x35	; 53
    161c:	b0 e0       	ldi	r27, 0x00	; 0
    161e:	e5 e3       	ldi	r30, 0x35	; 53
    1620:	f0 e0       	ldi	r31, 0x00	; 0
    1622:	80 81       	ld	r24, Z
    1624:	48 2f       	mov	r20, r24
    1626:	8a 81       	ldd	r24, Y+2	; 0x02
    1628:	28 2f       	mov	r18, r24
    162a:	30 e0       	ldi	r19, 0x00	; 0
    162c:	81 e0       	ldi	r24, 0x01	; 1
    162e:	90 e0       	ldi	r25, 0x00	; 0
    1630:	02 2e       	mov	r0, r18
    1632:	02 c0       	rjmp	.+4      	; 0x1638 <GPIO_writePin+0x13c>
    1634:	88 0f       	add	r24, r24
    1636:	99 1f       	adc	r25, r25
    1638:	0a 94       	dec	r0
    163a:	e2 f7       	brpl	.-8      	; 0x1634 <GPIO_writePin+0x138>
    163c:	84 2b       	or	r24, r20
    163e:	8c 93       	st	X, r24
    1640:	40 c0       	rjmp	.+128    	; 0x16c2 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    1642:	a5 e3       	ldi	r26, 0x35	; 53
    1644:	b0 e0       	ldi	r27, 0x00	; 0
    1646:	e5 e3       	ldi	r30, 0x35	; 53
    1648:	f0 e0       	ldi	r31, 0x00	; 0
    164a:	80 81       	ld	r24, Z
    164c:	48 2f       	mov	r20, r24
    164e:	8a 81       	ldd	r24, Y+2	; 0x02
    1650:	28 2f       	mov	r18, r24
    1652:	30 e0       	ldi	r19, 0x00	; 0
    1654:	81 e0       	ldi	r24, 0x01	; 1
    1656:	90 e0       	ldi	r25, 0x00	; 0
    1658:	02 2e       	mov	r0, r18
    165a:	02 c0       	rjmp	.+4      	; 0x1660 <GPIO_writePin+0x164>
    165c:	88 0f       	add	r24, r24
    165e:	99 1f       	adc	r25, r25
    1660:	0a 94       	dec	r0
    1662:	e2 f7       	brpl	.-8      	; 0x165c <GPIO_writePin+0x160>
    1664:	80 95       	com	r24
    1666:	84 23       	and	r24, r20
    1668:	8c 93       	st	X, r24
    166a:	2b c0       	rjmp	.+86     	; 0x16c2 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    166c:	8b 81       	ldd	r24, Y+3	; 0x03
    166e:	81 30       	cpi	r24, 0x01	; 1
    1670:	a1 f4       	brne	.+40     	; 0x169a <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    1672:	a2 e3       	ldi	r26, 0x32	; 50
    1674:	b0 e0       	ldi	r27, 0x00	; 0
    1676:	e2 e3       	ldi	r30, 0x32	; 50
    1678:	f0 e0       	ldi	r31, 0x00	; 0
    167a:	80 81       	ld	r24, Z
    167c:	48 2f       	mov	r20, r24
    167e:	8a 81       	ldd	r24, Y+2	; 0x02
    1680:	28 2f       	mov	r18, r24
    1682:	30 e0       	ldi	r19, 0x00	; 0
    1684:	81 e0       	ldi	r24, 0x01	; 1
    1686:	90 e0       	ldi	r25, 0x00	; 0
    1688:	02 2e       	mov	r0, r18
    168a:	02 c0       	rjmp	.+4      	; 0x1690 <GPIO_writePin+0x194>
    168c:	88 0f       	add	r24, r24
    168e:	99 1f       	adc	r25, r25
    1690:	0a 94       	dec	r0
    1692:	e2 f7       	brpl	.-8      	; 0x168c <GPIO_writePin+0x190>
    1694:	84 2b       	or	r24, r20
    1696:	8c 93       	st	X, r24
    1698:	14 c0       	rjmp	.+40     	; 0x16c2 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    169a:	a2 e3       	ldi	r26, 0x32	; 50
    169c:	b0 e0       	ldi	r27, 0x00	; 0
    169e:	e2 e3       	ldi	r30, 0x32	; 50
    16a0:	f0 e0       	ldi	r31, 0x00	; 0
    16a2:	80 81       	ld	r24, Z
    16a4:	48 2f       	mov	r20, r24
    16a6:	8a 81       	ldd	r24, Y+2	; 0x02
    16a8:	28 2f       	mov	r18, r24
    16aa:	30 e0       	ldi	r19, 0x00	; 0
    16ac:	81 e0       	ldi	r24, 0x01	; 1
    16ae:	90 e0       	ldi	r25, 0x00	; 0
    16b0:	02 2e       	mov	r0, r18
    16b2:	02 c0       	rjmp	.+4      	; 0x16b8 <GPIO_writePin+0x1bc>
    16b4:	88 0f       	add	r24, r24
    16b6:	99 1f       	adc	r25, r25
    16b8:	0a 94       	dec	r0
    16ba:	e2 f7       	brpl	.-8      	; 0x16b4 <GPIO_writePin+0x1b8>
    16bc:	80 95       	com	r24
    16be:	84 23       	and	r24, r20
    16c0:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    16c2:	0f 90       	pop	r0
    16c4:	0f 90       	pop	r0
    16c6:	0f 90       	pop	r0
    16c8:	0f 90       	pop	r0
    16ca:	0f 90       	pop	r0
    16cc:	cf 91       	pop	r28
    16ce:	df 91       	pop	r29
    16d0:	08 95       	ret

000016d2 <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    16d2:	df 93       	push	r29
    16d4:	cf 93       	push	r28
    16d6:	00 d0       	rcall	.+0      	; 0x16d8 <GPIO_readPin+0x6>
    16d8:	00 d0       	rcall	.+0      	; 0x16da <GPIO_readPin+0x8>
    16da:	0f 92       	push	r0
    16dc:	cd b7       	in	r28, 0x3d	; 61
    16de:	de b7       	in	r29, 0x3e	; 62
    16e0:	8a 83       	std	Y+2, r24	; 0x02
    16e2:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    16e4:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    16e6:	8b 81       	ldd	r24, Y+3	; 0x03
    16e8:	88 30       	cpi	r24, 0x08	; 8
    16ea:	08 f0       	brcs	.+2      	; 0x16ee <GPIO_readPin+0x1c>
    16ec:	84 c0       	rjmp	.+264    	; 0x17f6 <GPIO_readPin+0x124>
    16ee:	8a 81       	ldd	r24, Y+2	; 0x02
    16f0:	84 30       	cpi	r24, 0x04	; 4
    16f2:	08 f0       	brcs	.+2      	; 0x16f6 <GPIO_readPin+0x24>
    16f4:	80 c0       	rjmp	.+256    	; 0x17f6 <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    16f6:	8a 81       	ldd	r24, Y+2	; 0x02
    16f8:	28 2f       	mov	r18, r24
    16fa:	30 e0       	ldi	r19, 0x00	; 0
    16fc:	3d 83       	std	Y+5, r19	; 0x05
    16fe:	2c 83       	std	Y+4, r18	; 0x04
    1700:	4c 81       	ldd	r20, Y+4	; 0x04
    1702:	5d 81       	ldd	r21, Y+5	; 0x05
    1704:	41 30       	cpi	r20, 0x01	; 1
    1706:	51 05       	cpc	r21, r1
    1708:	79 f1       	breq	.+94     	; 0x1768 <GPIO_readPin+0x96>
    170a:	8c 81       	ldd	r24, Y+4	; 0x04
    170c:	9d 81       	ldd	r25, Y+5	; 0x05
    170e:	82 30       	cpi	r24, 0x02	; 2
    1710:	91 05       	cpc	r25, r1
    1712:	34 f4       	brge	.+12     	; 0x1720 <GPIO_readPin+0x4e>
    1714:	2c 81       	ldd	r18, Y+4	; 0x04
    1716:	3d 81       	ldd	r19, Y+5	; 0x05
    1718:	21 15       	cp	r18, r1
    171a:	31 05       	cpc	r19, r1
    171c:	69 f0       	breq	.+26     	; 0x1738 <GPIO_readPin+0x66>
    171e:	6b c0       	rjmp	.+214    	; 0x17f6 <GPIO_readPin+0x124>
    1720:	4c 81       	ldd	r20, Y+4	; 0x04
    1722:	5d 81       	ldd	r21, Y+5	; 0x05
    1724:	42 30       	cpi	r20, 0x02	; 2
    1726:	51 05       	cpc	r21, r1
    1728:	b9 f1       	breq	.+110    	; 0x1798 <GPIO_readPin+0xc6>
    172a:	8c 81       	ldd	r24, Y+4	; 0x04
    172c:	9d 81       	ldd	r25, Y+5	; 0x05
    172e:	83 30       	cpi	r24, 0x03	; 3
    1730:	91 05       	cpc	r25, r1
    1732:	09 f4       	brne	.+2      	; 0x1736 <GPIO_readPin+0x64>
    1734:	49 c0       	rjmp	.+146    	; 0x17c8 <GPIO_readPin+0xf6>
    1736:	5f c0       	rjmp	.+190    	; 0x17f6 <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    1738:	e9 e3       	ldi	r30, 0x39	; 57
    173a:	f0 e0       	ldi	r31, 0x00	; 0
    173c:	80 81       	ld	r24, Z
    173e:	28 2f       	mov	r18, r24
    1740:	30 e0       	ldi	r19, 0x00	; 0
    1742:	8b 81       	ldd	r24, Y+3	; 0x03
    1744:	88 2f       	mov	r24, r24
    1746:	90 e0       	ldi	r25, 0x00	; 0
    1748:	a9 01       	movw	r20, r18
    174a:	02 c0       	rjmp	.+4      	; 0x1750 <GPIO_readPin+0x7e>
    174c:	55 95       	asr	r21
    174e:	47 95       	ror	r20
    1750:	8a 95       	dec	r24
    1752:	e2 f7       	brpl	.-8      	; 0x174c <GPIO_readPin+0x7a>
    1754:	ca 01       	movw	r24, r20
    1756:	81 70       	andi	r24, 0x01	; 1
    1758:	90 70       	andi	r25, 0x00	; 0
    175a:	88 23       	and	r24, r24
    175c:	19 f0       	breq	.+6      	; 0x1764 <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    175e:	81 e0       	ldi	r24, 0x01	; 1
    1760:	89 83       	std	Y+1, r24	; 0x01
    1762:	49 c0       	rjmp	.+146    	; 0x17f6 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1764:	19 82       	std	Y+1, r1	; 0x01
    1766:	47 c0       	rjmp	.+142    	; 0x17f6 <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    1768:	e6 e3       	ldi	r30, 0x36	; 54
    176a:	f0 e0       	ldi	r31, 0x00	; 0
    176c:	80 81       	ld	r24, Z
    176e:	28 2f       	mov	r18, r24
    1770:	30 e0       	ldi	r19, 0x00	; 0
    1772:	8b 81       	ldd	r24, Y+3	; 0x03
    1774:	88 2f       	mov	r24, r24
    1776:	90 e0       	ldi	r25, 0x00	; 0
    1778:	a9 01       	movw	r20, r18
    177a:	02 c0       	rjmp	.+4      	; 0x1780 <GPIO_readPin+0xae>
    177c:	55 95       	asr	r21
    177e:	47 95       	ror	r20
    1780:	8a 95       	dec	r24
    1782:	e2 f7       	brpl	.-8      	; 0x177c <GPIO_readPin+0xaa>
    1784:	ca 01       	movw	r24, r20
    1786:	81 70       	andi	r24, 0x01	; 1
    1788:	90 70       	andi	r25, 0x00	; 0
    178a:	88 23       	and	r24, r24
    178c:	19 f0       	breq	.+6      	; 0x1794 <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    178e:	81 e0       	ldi	r24, 0x01	; 1
    1790:	89 83       	std	Y+1, r24	; 0x01
    1792:	31 c0       	rjmp	.+98     	; 0x17f6 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1794:	19 82       	std	Y+1, r1	; 0x01
    1796:	2f c0       	rjmp	.+94     	; 0x17f6 <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    1798:	e3 e3       	ldi	r30, 0x33	; 51
    179a:	f0 e0       	ldi	r31, 0x00	; 0
    179c:	80 81       	ld	r24, Z
    179e:	28 2f       	mov	r18, r24
    17a0:	30 e0       	ldi	r19, 0x00	; 0
    17a2:	8b 81       	ldd	r24, Y+3	; 0x03
    17a4:	88 2f       	mov	r24, r24
    17a6:	90 e0       	ldi	r25, 0x00	; 0
    17a8:	a9 01       	movw	r20, r18
    17aa:	02 c0       	rjmp	.+4      	; 0x17b0 <GPIO_readPin+0xde>
    17ac:	55 95       	asr	r21
    17ae:	47 95       	ror	r20
    17b0:	8a 95       	dec	r24
    17b2:	e2 f7       	brpl	.-8      	; 0x17ac <GPIO_readPin+0xda>
    17b4:	ca 01       	movw	r24, r20
    17b6:	81 70       	andi	r24, 0x01	; 1
    17b8:	90 70       	andi	r25, 0x00	; 0
    17ba:	88 23       	and	r24, r24
    17bc:	19 f0       	breq	.+6      	; 0x17c4 <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    17be:	81 e0       	ldi	r24, 0x01	; 1
    17c0:	89 83       	std	Y+1, r24	; 0x01
    17c2:	19 c0       	rjmp	.+50     	; 0x17f6 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    17c4:	19 82       	std	Y+1, r1	; 0x01
    17c6:	17 c0       	rjmp	.+46     	; 0x17f6 <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    17c8:	e0 e3       	ldi	r30, 0x30	; 48
    17ca:	f0 e0       	ldi	r31, 0x00	; 0
    17cc:	80 81       	ld	r24, Z
    17ce:	28 2f       	mov	r18, r24
    17d0:	30 e0       	ldi	r19, 0x00	; 0
    17d2:	8b 81       	ldd	r24, Y+3	; 0x03
    17d4:	88 2f       	mov	r24, r24
    17d6:	90 e0       	ldi	r25, 0x00	; 0
    17d8:	a9 01       	movw	r20, r18
    17da:	02 c0       	rjmp	.+4      	; 0x17e0 <GPIO_readPin+0x10e>
    17dc:	55 95       	asr	r21
    17de:	47 95       	ror	r20
    17e0:	8a 95       	dec	r24
    17e2:	e2 f7       	brpl	.-8      	; 0x17dc <GPIO_readPin+0x10a>
    17e4:	ca 01       	movw	r24, r20
    17e6:	81 70       	andi	r24, 0x01	; 1
    17e8:	90 70       	andi	r25, 0x00	; 0
    17ea:	88 23       	and	r24, r24
    17ec:	19 f0       	breq	.+6      	; 0x17f4 <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    17ee:	81 e0       	ldi	r24, 0x01	; 1
    17f0:	89 83       	std	Y+1, r24	; 0x01
    17f2:	01 c0       	rjmp	.+2      	; 0x17f6 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    17f4:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    17f6:	89 81       	ldd	r24, Y+1	; 0x01
}
    17f8:	0f 90       	pop	r0
    17fa:	0f 90       	pop	r0
    17fc:	0f 90       	pop	r0
    17fe:	0f 90       	pop	r0
    1800:	0f 90       	pop	r0
    1802:	cf 91       	pop	r28
    1804:	df 91       	pop	r29
    1806:	08 95       	ret

00001808 <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    1808:	df 93       	push	r29
    180a:	cf 93       	push	r28
    180c:	00 d0       	rcall	.+0      	; 0x180e <GPIO_setupPortDirection+0x6>
    180e:	00 d0       	rcall	.+0      	; 0x1810 <GPIO_setupPortDirection+0x8>
    1810:	cd b7       	in	r28, 0x3d	; 61
    1812:	de b7       	in	r29, 0x3e	; 62
    1814:	89 83       	std	Y+1, r24	; 0x01
    1816:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1818:	89 81       	ldd	r24, Y+1	; 0x01
    181a:	84 30       	cpi	r24, 0x04	; 4
    181c:	90 f5       	brcc	.+100    	; 0x1882 <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    181e:	89 81       	ldd	r24, Y+1	; 0x01
    1820:	28 2f       	mov	r18, r24
    1822:	30 e0       	ldi	r19, 0x00	; 0
    1824:	3c 83       	std	Y+4, r19	; 0x04
    1826:	2b 83       	std	Y+3, r18	; 0x03
    1828:	8b 81       	ldd	r24, Y+3	; 0x03
    182a:	9c 81       	ldd	r25, Y+4	; 0x04
    182c:	81 30       	cpi	r24, 0x01	; 1
    182e:	91 05       	cpc	r25, r1
    1830:	d1 f0       	breq	.+52     	; 0x1866 <GPIO_setupPortDirection+0x5e>
    1832:	2b 81       	ldd	r18, Y+3	; 0x03
    1834:	3c 81       	ldd	r19, Y+4	; 0x04
    1836:	22 30       	cpi	r18, 0x02	; 2
    1838:	31 05       	cpc	r19, r1
    183a:	2c f4       	brge	.+10     	; 0x1846 <GPIO_setupPortDirection+0x3e>
    183c:	8b 81       	ldd	r24, Y+3	; 0x03
    183e:	9c 81       	ldd	r25, Y+4	; 0x04
    1840:	00 97       	sbiw	r24, 0x00	; 0
    1842:	61 f0       	breq	.+24     	; 0x185c <GPIO_setupPortDirection+0x54>
    1844:	1e c0       	rjmp	.+60     	; 0x1882 <GPIO_setupPortDirection+0x7a>
    1846:	2b 81       	ldd	r18, Y+3	; 0x03
    1848:	3c 81       	ldd	r19, Y+4	; 0x04
    184a:	22 30       	cpi	r18, 0x02	; 2
    184c:	31 05       	cpc	r19, r1
    184e:	81 f0       	breq	.+32     	; 0x1870 <GPIO_setupPortDirection+0x68>
    1850:	8b 81       	ldd	r24, Y+3	; 0x03
    1852:	9c 81       	ldd	r25, Y+4	; 0x04
    1854:	83 30       	cpi	r24, 0x03	; 3
    1856:	91 05       	cpc	r25, r1
    1858:	81 f0       	breq	.+32     	; 0x187a <GPIO_setupPortDirection+0x72>
    185a:	13 c0       	rjmp	.+38     	; 0x1882 <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    185c:	ea e3       	ldi	r30, 0x3A	; 58
    185e:	f0 e0       	ldi	r31, 0x00	; 0
    1860:	8a 81       	ldd	r24, Y+2	; 0x02
    1862:	80 83       	st	Z, r24
    1864:	0e c0       	rjmp	.+28     	; 0x1882 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    1866:	e7 e3       	ldi	r30, 0x37	; 55
    1868:	f0 e0       	ldi	r31, 0x00	; 0
    186a:	8a 81       	ldd	r24, Y+2	; 0x02
    186c:	80 83       	st	Z, r24
    186e:	09 c0       	rjmp	.+18     	; 0x1882 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    1870:	e4 e3       	ldi	r30, 0x34	; 52
    1872:	f0 e0       	ldi	r31, 0x00	; 0
    1874:	8a 81       	ldd	r24, Y+2	; 0x02
    1876:	80 83       	st	Z, r24
    1878:	04 c0       	rjmp	.+8      	; 0x1882 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    187a:	e1 e3       	ldi	r30, 0x31	; 49
    187c:	f0 e0       	ldi	r31, 0x00	; 0
    187e:	8a 81       	ldd	r24, Y+2	; 0x02
    1880:	80 83       	st	Z, r24
			break;
		}
	}
}
    1882:	0f 90       	pop	r0
    1884:	0f 90       	pop	r0
    1886:	0f 90       	pop	r0
    1888:	0f 90       	pop	r0
    188a:	cf 91       	pop	r28
    188c:	df 91       	pop	r29
    188e:	08 95       	ret

00001890 <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    1890:	df 93       	push	r29
    1892:	cf 93       	push	r28
    1894:	00 d0       	rcall	.+0      	; 0x1896 <GPIO_writePort+0x6>
    1896:	00 d0       	rcall	.+0      	; 0x1898 <GPIO_writePort+0x8>
    1898:	cd b7       	in	r28, 0x3d	; 61
    189a:	de b7       	in	r29, 0x3e	; 62
    189c:	89 83       	std	Y+1, r24	; 0x01
    189e:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    18a0:	89 81       	ldd	r24, Y+1	; 0x01
    18a2:	84 30       	cpi	r24, 0x04	; 4
    18a4:	90 f5       	brcc	.+100    	; 0x190a <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    18a6:	89 81       	ldd	r24, Y+1	; 0x01
    18a8:	28 2f       	mov	r18, r24
    18aa:	30 e0       	ldi	r19, 0x00	; 0
    18ac:	3c 83       	std	Y+4, r19	; 0x04
    18ae:	2b 83       	std	Y+3, r18	; 0x03
    18b0:	8b 81       	ldd	r24, Y+3	; 0x03
    18b2:	9c 81       	ldd	r25, Y+4	; 0x04
    18b4:	81 30       	cpi	r24, 0x01	; 1
    18b6:	91 05       	cpc	r25, r1
    18b8:	d1 f0       	breq	.+52     	; 0x18ee <GPIO_writePort+0x5e>
    18ba:	2b 81       	ldd	r18, Y+3	; 0x03
    18bc:	3c 81       	ldd	r19, Y+4	; 0x04
    18be:	22 30       	cpi	r18, 0x02	; 2
    18c0:	31 05       	cpc	r19, r1
    18c2:	2c f4       	brge	.+10     	; 0x18ce <GPIO_writePort+0x3e>
    18c4:	8b 81       	ldd	r24, Y+3	; 0x03
    18c6:	9c 81       	ldd	r25, Y+4	; 0x04
    18c8:	00 97       	sbiw	r24, 0x00	; 0
    18ca:	61 f0       	breq	.+24     	; 0x18e4 <GPIO_writePort+0x54>
    18cc:	1e c0       	rjmp	.+60     	; 0x190a <GPIO_writePort+0x7a>
    18ce:	2b 81       	ldd	r18, Y+3	; 0x03
    18d0:	3c 81       	ldd	r19, Y+4	; 0x04
    18d2:	22 30       	cpi	r18, 0x02	; 2
    18d4:	31 05       	cpc	r19, r1
    18d6:	81 f0       	breq	.+32     	; 0x18f8 <GPIO_writePort+0x68>
    18d8:	8b 81       	ldd	r24, Y+3	; 0x03
    18da:	9c 81       	ldd	r25, Y+4	; 0x04
    18dc:	83 30       	cpi	r24, 0x03	; 3
    18de:	91 05       	cpc	r25, r1
    18e0:	81 f0       	breq	.+32     	; 0x1902 <GPIO_writePort+0x72>
    18e2:	13 c0       	rjmp	.+38     	; 0x190a <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    18e4:	eb e3       	ldi	r30, 0x3B	; 59
    18e6:	f0 e0       	ldi	r31, 0x00	; 0
    18e8:	8a 81       	ldd	r24, Y+2	; 0x02
    18ea:	80 83       	st	Z, r24
    18ec:	0e c0       	rjmp	.+28     	; 0x190a <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    18ee:	e8 e3       	ldi	r30, 0x38	; 56
    18f0:	f0 e0       	ldi	r31, 0x00	; 0
    18f2:	8a 81       	ldd	r24, Y+2	; 0x02
    18f4:	80 83       	st	Z, r24
    18f6:	09 c0       	rjmp	.+18     	; 0x190a <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    18f8:	e5 e3       	ldi	r30, 0x35	; 53
    18fa:	f0 e0       	ldi	r31, 0x00	; 0
    18fc:	8a 81       	ldd	r24, Y+2	; 0x02
    18fe:	80 83       	st	Z, r24
    1900:	04 c0       	rjmp	.+8      	; 0x190a <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    1902:	e2 e3       	ldi	r30, 0x32	; 50
    1904:	f0 e0       	ldi	r31, 0x00	; 0
    1906:	8a 81       	ldd	r24, Y+2	; 0x02
    1908:	80 83       	st	Z, r24
			break;
		}
	}
}
    190a:	0f 90       	pop	r0
    190c:	0f 90       	pop	r0
    190e:	0f 90       	pop	r0
    1910:	0f 90       	pop	r0
    1912:	cf 91       	pop	r28
    1914:	df 91       	pop	r29
    1916:	08 95       	ret

00001918 <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    1918:	df 93       	push	r29
    191a:	cf 93       	push	r28
    191c:	00 d0       	rcall	.+0      	; 0x191e <GPIO_readPort+0x6>
    191e:	00 d0       	rcall	.+0      	; 0x1920 <GPIO_readPort+0x8>
    1920:	cd b7       	in	r28, 0x3d	; 61
    1922:	de b7       	in	r29, 0x3e	; 62
    1924:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    1926:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1928:	8a 81       	ldd	r24, Y+2	; 0x02
    192a:	84 30       	cpi	r24, 0x04	; 4
    192c:	90 f5       	brcc	.+100    	; 0x1992 <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    192e:	8a 81       	ldd	r24, Y+2	; 0x02
    1930:	28 2f       	mov	r18, r24
    1932:	30 e0       	ldi	r19, 0x00	; 0
    1934:	3c 83       	std	Y+4, r19	; 0x04
    1936:	2b 83       	std	Y+3, r18	; 0x03
    1938:	8b 81       	ldd	r24, Y+3	; 0x03
    193a:	9c 81       	ldd	r25, Y+4	; 0x04
    193c:	81 30       	cpi	r24, 0x01	; 1
    193e:	91 05       	cpc	r25, r1
    1940:	d1 f0       	breq	.+52     	; 0x1976 <GPIO_readPort+0x5e>
    1942:	2b 81       	ldd	r18, Y+3	; 0x03
    1944:	3c 81       	ldd	r19, Y+4	; 0x04
    1946:	22 30       	cpi	r18, 0x02	; 2
    1948:	31 05       	cpc	r19, r1
    194a:	2c f4       	brge	.+10     	; 0x1956 <GPIO_readPort+0x3e>
    194c:	8b 81       	ldd	r24, Y+3	; 0x03
    194e:	9c 81       	ldd	r25, Y+4	; 0x04
    1950:	00 97       	sbiw	r24, 0x00	; 0
    1952:	61 f0       	breq	.+24     	; 0x196c <GPIO_readPort+0x54>
    1954:	1e c0       	rjmp	.+60     	; 0x1992 <GPIO_readPort+0x7a>
    1956:	2b 81       	ldd	r18, Y+3	; 0x03
    1958:	3c 81       	ldd	r19, Y+4	; 0x04
    195a:	22 30       	cpi	r18, 0x02	; 2
    195c:	31 05       	cpc	r19, r1
    195e:	81 f0       	breq	.+32     	; 0x1980 <GPIO_readPort+0x68>
    1960:	8b 81       	ldd	r24, Y+3	; 0x03
    1962:	9c 81       	ldd	r25, Y+4	; 0x04
    1964:	83 30       	cpi	r24, 0x03	; 3
    1966:	91 05       	cpc	r25, r1
    1968:	81 f0       	breq	.+32     	; 0x198a <GPIO_readPort+0x72>
    196a:	13 c0       	rjmp	.+38     	; 0x1992 <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    196c:	e9 e3       	ldi	r30, 0x39	; 57
    196e:	f0 e0       	ldi	r31, 0x00	; 0
    1970:	80 81       	ld	r24, Z
    1972:	89 83       	std	Y+1, r24	; 0x01
    1974:	0e c0       	rjmp	.+28     	; 0x1992 <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    1976:	e6 e3       	ldi	r30, 0x36	; 54
    1978:	f0 e0       	ldi	r31, 0x00	; 0
    197a:	80 81       	ld	r24, Z
    197c:	89 83       	std	Y+1, r24	; 0x01
    197e:	09 c0       	rjmp	.+18     	; 0x1992 <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    1980:	e3 e3       	ldi	r30, 0x33	; 51
    1982:	f0 e0       	ldi	r31, 0x00	; 0
    1984:	80 81       	ld	r24, Z
    1986:	89 83       	std	Y+1, r24	; 0x01
    1988:	04 c0       	rjmp	.+8      	; 0x1992 <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    198a:	e0 e3       	ldi	r30, 0x30	; 48
    198c:	f0 e0       	ldi	r31, 0x00	; 0
    198e:	80 81       	ld	r24, Z
    1990:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    1992:	89 81       	ldd	r24, Y+1	; 0x01
}
    1994:	0f 90       	pop	r0
    1996:	0f 90       	pop	r0
    1998:	0f 90       	pop	r0
    199a:	0f 90       	pop	r0
    199c:	cf 91       	pop	r28
    199e:	df 91       	pop	r29
    19a0:	08 95       	ret

000019a2 <KEYPAD_getPressedKey>:

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
uint8 KEYPAD_getPressedKey(void)
{
    19a2:	df 93       	push	r29
    19a4:	cf 93       	push	r28
    19a6:	00 d0       	rcall	.+0      	; 0x19a8 <KEYPAD_getPressedKey+0x6>
    19a8:	0f 92       	push	r0
    19aa:	cd b7       	in	r28, 0x3d	; 61
    19ac:	de b7       	in	r29, 0x3e	; 62
	uint8 col,row;
	uint8 keypad_port_value = 0;
    19ae:	19 82       	std	Y+1, r1	; 0x01
	while(1)
	{
		for(col=0;col<KEYPAD_NUM_COLS;col++) /* loop for columns */
    19b0:	1b 82       	std	Y+3, r1	; 0x03
    19b2:	43 c0       	rjmp	.+134    	; 0x1a3a <KEYPAD_getPressedKey+0x98>
		{
			/* 
			 * Each time setup the direction for all keypad port as input pins,
			 * except this column will be output pin
			 */
			GPIO_setupPortDirection(KEYPAD_PORT_ID,PORT_INPUT);
    19b4:	80 e0       	ldi	r24, 0x00	; 0
    19b6:	60 e0       	ldi	r22, 0x00	; 0
    19b8:	0e 94 04 0c 	call	0x1808	; 0x1808 <GPIO_setupPortDirection>
			GPIO_setupPinDirection(KEYPAD_PORT_ID,KEYPAD_FIRST_COLUMN_PIN_ID+col,PIN_OUTPUT);
    19bc:	8b 81       	ldd	r24, Y+3	; 0x03
    19be:	98 2f       	mov	r25, r24
    19c0:	9c 5f       	subi	r25, 0xFC	; 252
    19c2:	80 e0       	ldi	r24, 0x00	; 0
    19c4:	69 2f       	mov	r22, r25
    19c6:	41 e0       	ldi	r20, 0x01	; 1
    19c8:	0e 94 93 09 	call	0x1326	; 0x1326 <GPIO_setupPinDirection>
			
#if(KEYPAD_BUTTON_PRESSED == LOGIC_LOW)
			/* Clear the column output pin and set the rest pins value */
			keypad_port_value = ~(1<<(KEYPAD_FIRST_COLUMN_PIN_ID+col));
    19cc:	8b 81       	ldd	r24, Y+3	; 0x03
    19ce:	88 2f       	mov	r24, r24
    19d0:	90 e0       	ldi	r25, 0x00	; 0
    19d2:	9c 01       	movw	r18, r24
    19d4:	2c 5f       	subi	r18, 0xFC	; 252
    19d6:	3f 4f       	sbci	r19, 0xFF	; 255
    19d8:	81 e0       	ldi	r24, 0x01	; 1
    19da:	90 e0       	ldi	r25, 0x00	; 0
    19dc:	02 c0       	rjmp	.+4      	; 0x19e2 <KEYPAD_getPressedKey+0x40>
    19de:	88 0f       	add	r24, r24
    19e0:	99 1f       	adc	r25, r25
    19e2:	2a 95       	dec	r18
    19e4:	e2 f7       	brpl	.-8      	; 0x19de <KEYPAD_getPressedKey+0x3c>
    19e6:	80 95       	com	r24
    19e8:	89 83       	std	Y+1, r24	; 0x01
#else
			/* Set the column output pin and clear the rest pins value */
			keypad_port_value = (1<<(KEYPAD_FIRST_COLUMN_PIN_ID+col));
#endif
			GPIO_writePort(KEYPAD_PORT_ID,keypad_port_value);
    19ea:	80 e0       	ldi	r24, 0x00	; 0
    19ec:	69 81       	ldd	r22, Y+1	; 0x01
    19ee:	0e 94 48 0c 	call	0x1890	; 0x1890 <GPIO_writePort>

			for(row=0;row<KEYPAD_NUM_ROWS;row++) /* loop for rows */
    19f2:	1a 82       	std	Y+2, r1	; 0x02
    19f4:	1c c0       	rjmp	.+56     	; 0x1a2e <KEYPAD_getPressedKey+0x8c>
			{
				/* Check if the switch is pressed in this row */
				if(GPIO_readPin(KEYPAD_PORT_ID,row+KEYPAD_FIRST_ROW_PIN_ID) == KEYPAD_BUTTON_PRESSED)
    19f6:	80 e0       	ldi	r24, 0x00	; 0
    19f8:	6a 81       	ldd	r22, Y+2	; 0x02
    19fa:	0e 94 69 0b 	call	0x16d2	; 0x16d2 <GPIO_readPin>
    19fe:	88 23       	and	r24, r24
    1a00:	99 f4       	brne	.+38     	; 0x1a28 <KEYPAD_getPressedKey+0x86>
				{
					#if (KEYPAD_NUM_COLS == 3)
						return KEYPAD_4x3_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
					#elif (KEYPAD_NUM_COLS == 4)
						return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
    1a02:	8a 81       	ldd	r24, Y+2	; 0x02
    1a04:	88 2f       	mov	r24, r24
    1a06:	90 e0       	ldi	r25, 0x00	; 0
    1a08:	88 0f       	add	r24, r24
    1a0a:	99 1f       	adc	r25, r25
    1a0c:	88 0f       	add	r24, r24
    1a0e:	99 1f       	adc	r25, r25
    1a10:	98 2f       	mov	r25, r24
    1a12:	8b 81       	ldd	r24, Y+3	; 0x03
    1a14:	89 0f       	add	r24, r25
    1a16:	8f 5f       	subi	r24, 0xFF	; 255
    1a18:	0e 94 22 0d 	call	0x1a44	; 0x1a44 <KEYPAD_4x4_adjustKeyNumber>
					#endif
				}
			}
		}
	}	
}
    1a1c:	0f 90       	pop	r0
    1a1e:	0f 90       	pop	r0
    1a20:	0f 90       	pop	r0
    1a22:	cf 91       	pop	r28
    1a24:	df 91       	pop	r29
    1a26:	08 95       	ret
			/* Set the column output pin and clear the rest pins value */
			keypad_port_value = (1<<(KEYPAD_FIRST_COLUMN_PIN_ID+col));
#endif
			GPIO_writePort(KEYPAD_PORT_ID,keypad_port_value);

			for(row=0;row<KEYPAD_NUM_ROWS;row++) /* loop for rows */
    1a28:	8a 81       	ldd	r24, Y+2	; 0x02
    1a2a:	8f 5f       	subi	r24, 0xFF	; 255
    1a2c:	8a 83       	std	Y+2, r24	; 0x02
    1a2e:	8a 81       	ldd	r24, Y+2	; 0x02
    1a30:	84 30       	cpi	r24, 0x04	; 4
    1a32:	08 f3       	brcs	.-62     	; 0x19f6 <KEYPAD_getPressedKey+0x54>
{
	uint8 col,row;
	uint8 keypad_port_value = 0;
	while(1)
	{
		for(col=0;col<KEYPAD_NUM_COLS;col++) /* loop for columns */
    1a34:	8b 81       	ldd	r24, Y+3	; 0x03
    1a36:	8f 5f       	subi	r24, 0xFF	; 255
    1a38:	8b 83       	std	Y+3, r24	; 0x03
    1a3a:	8b 81       	ldd	r24, Y+3	; 0x03
    1a3c:	84 30       	cpi	r24, 0x04	; 4
    1a3e:	08 f4       	brcc	.+2      	; 0x1a42 <KEYPAD_getPressedKey+0xa0>
    1a40:	b9 cf       	rjmp	.-142    	; 0x19b4 <KEYPAD_getPressedKey+0x12>
    1a42:	b6 cf       	rjmp	.-148    	; 0x19b0 <KEYPAD_getPressedKey+0xe>

00001a44 <KEYPAD_4x4_adjustKeyNumber>:
/*
 * Description :
 * Update the keypad pressed button value with the correct one in keypad 4x4 shape
 */
static uint8 KEYPAD_4x4_adjustKeyNumber(uint8 button_number)
{
    1a44:	df 93       	push	r29
    1a46:	cf 93       	push	r28
    1a48:	00 d0       	rcall	.+0      	; 0x1a4a <KEYPAD_4x4_adjustKeyNumber+0x6>
    1a4a:	00 d0       	rcall	.+0      	; 0x1a4c <KEYPAD_4x4_adjustKeyNumber+0x8>
    1a4c:	cd b7       	in	r28, 0x3d	; 61
    1a4e:	de b7       	in	r29, 0x3e	; 62
    1a50:	8a 83       	std	Y+2, r24	; 0x02
	uint8 keypad_button = 0;
    1a52:	19 82       	std	Y+1, r1	; 0x01
	switch(button_number)
    1a54:	8a 81       	ldd	r24, Y+2	; 0x02
    1a56:	28 2f       	mov	r18, r24
    1a58:	30 e0       	ldi	r19, 0x00	; 0
    1a5a:	3c 83       	std	Y+4, r19	; 0x04
    1a5c:	2b 83       	std	Y+3, r18	; 0x03
    1a5e:	8b 81       	ldd	r24, Y+3	; 0x03
    1a60:	9c 81       	ldd	r25, Y+4	; 0x04
    1a62:	88 30       	cpi	r24, 0x08	; 8
    1a64:	91 05       	cpc	r25, r1
    1a66:	09 f4       	brne	.+2      	; 0x1a6a <KEYPAD_4x4_adjustKeyNumber+0x26>
    1a68:	70 c0       	rjmp	.+224    	; 0x1b4a <KEYPAD_4x4_adjustKeyNumber+0x106>
    1a6a:	2b 81       	ldd	r18, Y+3	; 0x03
    1a6c:	3c 81       	ldd	r19, Y+4	; 0x04
    1a6e:	29 30       	cpi	r18, 0x09	; 9
    1a70:	31 05       	cpc	r19, r1
    1a72:	5c f5       	brge	.+86     	; 0x1aca <KEYPAD_4x4_adjustKeyNumber+0x86>
    1a74:	8b 81       	ldd	r24, Y+3	; 0x03
    1a76:	9c 81       	ldd	r25, Y+4	; 0x04
    1a78:	84 30       	cpi	r24, 0x04	; 4
    1a7a:	91 05       	cpc	r25, r1
    1a7c:	09 f4       	brne	.+2      	; 0x1a80 <KEYPAD_4x4_adjustKeyNumber+0x3c>
    1a7e:	59 c0       	rjmp	.+178    	; 0x1b32 <KEYPAD_4x4_adjustKeyNumber+0xee>
    1a80:	2b 81       	ldd	r18, Y+3	; 0x03
    1a82:	3c 81       	ldd	r19, Y+4	; 0x04
    1a84:	25 30       	cpi	r18, 0x05	; 5
    1a86:	31 05       	cpc	r19, r1
    1a88:	9c f4       	brge	.+38     	; 0x1ab0 <KEYPAD_4x4_adjustKeyNumber+0x6c>
    1a8a:	8b 81       	ldd	r24, Y+3	; 0x03
    1a8c:	9c 81       	ldd	r25, Y+4	; 0x04
    1a8e:	82 30       	cpi	r24, 0x02	; 2
    1a90:	91 05       	cpc	r25, r1
    1a92:	09 f4       	brne	.+2      	; 0x1a96 <KEYPAD_4x4_adjustKeyNumber+0x52>
    1a94:	48 c0       	rjmp	.+144    	; 0x1b26 <KEYPAD_4x4_adjustKeyNumber+0xe2>
    1a96:	2b 81       	ldd	r18, Y+3	; 0x03
    1a98:	3c 81       	ldd	r19, Y+4	; 0x04
    1a9a:	23 30       	cpi	r18, 0x03	; 3
    1a9c:	31 05       	cpc	r19, r1
    1a9e:	0c f0       	brlt	.+2      	; 0x1aa2 <KEYPAD_4x4_adjustKeyNumber+0x5e>
    1aa0:	45 c0       	rjmp	.+138    	; 0x1b2c <KEYPAD_4x4_adjustKeyNumber+0xe8>
    1aa2:	8b 81       	ldd	r24, Y+3	; 0x03
    1aa4:	9c 81       	ldd	r25, Y+4	; 0x04
    1aa6:	81 30       	cpi	r24, 0x01	; 1
    1aa8:	91 05       	cpc	r25, r1
    1aaa:	09 f4       	brne	.+2      	; 0x1aae <KEYPAD_4x4_adjustKeyNumber+0x6a>
    1aac:	39 c0       	rjmp	.+114    	; 0x1b20 <KEYPAD_4x4_adjustKeyNumber+0xdc>
    1aae:	67 c0       	rjmp	.+206    	; 0x1b7e <KEYPAD_4x4_adjustKeyNumber+0x13a>
    1ab0:	2b 81       	ldd	r18, Y+3	; 0x03
    1ab2:	3c 81       	ldd	r19, Y+4	; 0x04
    1ab4:	26 30       	cpi	r18, 0x06	; 6
    1ab6:	31 05       	cpc	r19, r1
    1ab8:	09 f4       	brne	.+2      	; 0x1abc <KEYPAD_4x4_adjustKeyNumber+0x78>
    1aba:	41 c0       	rjmp	.+130    	; 0x1b3e <KEYPAD_4x4_adjustKeyNumber+0xfa>
    1abc:	8b 81       	ldd	r24, Y+3	; 0x03
    1abe:	9c 81       	ldd	r25, Y+4	; 0x04
    1ac0:	87 30       	cpi	r24, 0x07	; 7
    1ac2:	91 05       	cpc	r25, r1
    1ac4:	0c f0       	brlt	.+2      	; 0x1ac8 <KEYPAD_4x4_adjustKeyNumber+0x84>
    1ac6:	3e c0       	rjmp	.+124    	; 0x1b44 <KEYPAD_4x4_adjustKeyNumber+0x100>
    1ac8:	37 c0       	rjmp	.+110    	; 0x1b38 <KEYPAD_4x4_adjustKeyNumber+0xf4>
    1aca:	2b 81       	ldd	r18, Y+3	; 0x03
    1acc:	3c 81       	ldd	r19, Y+4	; 0x04
    1ace:	2c 30       	cpi	r18, 0x0C	; 12
    1ad0:	31 05       	cpc	r19, r1
    1ad2:	09 f4       	brne	.+2      	; 0x1ad6 <KEYPAD_4x4_adjustKeyNumber+0x92>
    1ad4:	46 c0       	rjmp	.+140    	; 0x1b62 <KEYPAD_4x4_adjustKeyNumber+0x11e>
    1ad6:	8b 81       	ldd	r24, Y+3	; 0x03
    1ad8:	9c 81       	ldd	r25, Y+4	; 0x04
    1ada:	8d 30       	cpi	r24, 0x0D	; 13
    1adc:	91 05       	cpc	r25, r1
    1ade:	5c f4       	brge	.+22     	; 0x1af6 <KEYPAD_4x4_adjustKeyNumber+0xb2>
    1ae0:	2b 81       	ldd	r18, Y+3	; 0x03
    1ae2:	3c 81       	ldd	r19, Y+4	; 0x04
    1ae4:	2a 30       	cpi	r18, 0x0A	; 10
    1ae6:	31 05       	cpc	r19, r1
    1ae8:	b1 f1       	breq	.+108    	; 0x1b56 <KEYPAD_4x4_adjustKeyNumber+0x112>
    1aea:	8b 81       	ldd	r24, Y+3	; 0x03
    1aec:	9c 81       	ldd	r25, Y+4	; 0x04
    1aee:	8b 30       	cpi	r24, 0x0B	; 11
    1af0:	91 05       	cpc	r25, r1
    1af2:	a4 f5       	brge	.+104    	; 0x1b5c <KEYPAD_4x4_adjustKeyNumber+0x118>
    1af4:	2d c0       	rjmp	.+90     	; 0x1b50 <KEYPAD_4x4_adjustKeyNumber+0x10c>
    1af6:	2b 81       	ldd	r18, Y+3	; 0x03
    1af8:	3c 81       	ldd	r19, Y+4	; 0x04
    1afa:	2e 30       	cpi	r18, 0x0E	; 14
    1afc:	31 05       	cpc	r19, r1
    1afe:	b9 f1       	breq	.+110    	; 0x1b6e <KEYPAD_4x4_adjustKeyNumber+0x12a>
    1b00:	8b 81       	ldd	r24, Y+3	; 0x03
    1b02:	9c 81       	ldd	r25, Y+4	; 0x04
    1b04:	8e 30       	cpi	r24, 0x0E	; 14
    1b06:	91 05       	cpc	r25, r1
    1b08:	7c f1       	brlt	.+94     	; 0x1b68 <KEYPAD_4x4_adjustKeyNumber+0x124>
    1b0a:	2b 81       	ldd	r18, Y+3	; 0x03
    1b0c:	3c 81       	ldd	r19, Y+4	; 0x04
    1b0e:	2f 30       	cpi	r18, 0x0F	; 15
    1b10:	31 05       	cpc	r19, r1
    1b12:	79 f1       	breq	.+94     	; 0x1b72 <KEYPAD_4x4_adjustKeyNumber+0x12e>
    1b14:	8b 81       	ldd	r24, Y+3	; 0x03
    1b16:	9c 81       	ldd	r25, Y+4	; 0x04
    1b18:	80 31       	cpi	r24, 0x10	; 16
    1b1a:	91 05       	cpc	r25, r1
    1b1c:	69 f1       	breq	.+90     	; 0x1b78 <KEYPAD_4x4_adjustKeyNumber+0x134>
    1b1e:	2f c0       	rjmp	.+94     	; 0x1b7e <KEYPAD_4x4_adjustKeyNumber+0x13a>
	{
		case 1: keypad_button = 7;
    1b20:	87 e0       	ldi	r24, 0x07	; 7
    1b22:	89 83       	std	Y+1, r24	; 0x01
    1b24:	2e c0       	rjmp	.+92     	; 0x1b82 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 2: keypad_button = 8;
    1b26:	88 e0       	ldi	r24, 0x08	; 8
    1b28:	89 83       	std	Y+1, r24	; 0x01
    1b2a:	2b c0       	rjmp	.+86     	; 0x1b82 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 3: keypad_button = 9;
    1b2c:	89 e0       	ldi	r24, 0x09	; 9
    1b2e:	89 83       	std	Y+1, r24	; 0x01
    1b30:	28 c0       	rjmp	.+80     	; 0x1b82 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 4: keypad_button = '%'; // ASCII Code of %
    1b32:	85 e2       	ldi	r24, 0x25	; 37
    1b34:	89 83       	std	Y+1, r24	; 0x01
    1b36:	25 c0       	rjmp	.+74     	; 0x1b82 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 5: keypad_button = 4;
    1b38:	84 e0       	ldi	r24, 0x04	; 4
    1b3a:	89 83       	std	Y+1, r24	; 0x01
    1b3c:	22 c0       	rjmp	.+68     	; 0x1b82 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 6: keypad_button = 5;
    1b3e:	85 e0       	ldi	r24, 0x05	; 5
    1b40:	89 83       	std	Y+1, r24	; 0x01
    1b42:	1f c0       	rjmp	.+62     	; 0x1b82 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 7: keypad_button = 6;
    1b44:	86 e0       	ldi	r24, 0x06	; 6
    1b46:	89 83       	std	Y+1, r24	; 0x01
    1b48:	1c c0       	rjmp	.+56     	; 0x1b82 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 8: keypad_button = '*'; /* ASCII Code of '*' */
    1b4a:	8a e2       	ldi	r24, 0x2A	; 42
    1b4c:	89 83       	std	Y+1, r24	; 0x01
    1b4e:	19 c0       	rjmp	.+50     	; 0x1b82 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;		
		case 9: keypad_button = 1;
    1b50:	81 e0       	ldi	r24, 0x01	; 1
    1b52:	89 83       	std	Y+1, r24	; 0x01
    1b54:	16 c0       	rjmp	.+44     	; 0x1b82 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 10: keypad_button = 2;
    1b56:	82 e0       	ldi	r24, 0x02	; 2
    1b58:	89 83       	std	Y+1, r24	; 0x01
    1b5a:	13 c0       	rjmp	.+38     	; 0x1b82 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 11: keypad_button = 3;
    1b5c:	83 e0       	ldi	r24, 0x03	; 3
    1b5e:	89 83       	std	Y+1, r24	; 0x01
    1b60:	10 c0       	rjmp	.+32     	; 0x1b82 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 12: keypad_button = '-'; /* ASCII Code of '-' */
    1b62:	8d e2       	ldi	r24, 0x2D	; 45
    1b64:	89 83       	std	Y+1, r24	; 0x01
    1b66:	0d c0       	rjmp	.+26     	; 0x1b82 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 13: keypad_button = 13;  /* ASCII of Enter */
    1b68:	8d e0       	ldi	r24, 0x0D	; 13
    1b6a:	89 83       	std	Y+1, r24	; 0x01
    1b6c:	0a c0       	rjmp	.+20     	; 0x1b82 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;			
		case 14: keypad_button = 0;
    1b6e:	19 82       	std	Y+1, r1	; 0x01
    1b70:	08 c0       	rjmp	.+16     	; 0x1b82 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 15: keypad_button = '='; /* ASCII Code of '=' */
    1b72:	8d e3       	ldi	r24, 0x3D	; 61
    1b74:	89 83       	std	Y+1, r24	; 0x01
    1b76:	05 c0       	rjmp	.+10     	; 0x1b82 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 16: keypad_button = '+'; /* ASCII Code of '+' */
    1b78:	8b e2       	ldi	r24, 0x2B	; 43
    1b7a:	89 83       	std	Y+1, r24	; 0x01
    1b7c:	02 c0       	rjmp	.+4      	; 0x1b82 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		default: keypad_button = button_number;
    1b7e:	8a 81       	ldd	r24, Y+2	; 0x02
    1b80:	89 83       	std	Y+1, r24	; 0x01
				break;
	}
	return keypad_button;
    1b82:	89 81       	ldd	r24, Y+1	; 0x01
} 
    1b84:	0f 90       	pop	r0
    1b86:	0f 90       	pop	r0
    1b88:	0f 90       	pop	r0
    1b8a:	0f 90       	pop	r0
    1b8c:	cf 91       	pop	r28
    1b8e:	df 91       	pop	r29
    1b90:	08 95       	ret

00001b92 <LCD_init>:
 * Initialize the LCD:
 * 1. Setup the LCD pins directions by use the GPIO driver.
 * 2. Setup the LCD Data Mode 4-bits or 8-bits.
 */
void LCD_init(void)
{
    1b92:	df 93       	push	r29
    1b94:	cf 93       	push	r28
    1b96:	cd b7       	in	r28, 0x3d	; 61
    1b98:	de b7       	in	r29, 0x3e	; 62
	/* Configure the direction for RS, RW and E pins as output pins */
	GPIO_setupPinDirection(LCD_RS_PORT_ID,LCD_RS_PIN_ID,PIN_OUTPUT);
    1b9a:	81 e0       	ldi	r24, 0x01	; 1
    1b9c:	60 e0       	ldi	r22, 0x00	; 0
    1b9e:	41 e0       	ldi	r20, 0x01	; 1
    1ba0:	0e 94 93 09 	call	0x1326	; 0x1326 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_RW_PORT_ID,LCD_RW_PIN_ID,PIN_OUTPUT);
    1ba4:	81 e0       	ldi	r24, 0x01	; 1
    1ba6:	61 e0       	ldi	r22, 0x01	; 1
    1ba8:	41 e0       	ldi	r20, 0x01	; 1
    1baa:	0e 94 93 09 	call	0x1326	; 0x1326 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID,LCD_E_PIN_ID,PIN_OUTPUT);
    1bae:	81 e0       	ldi	r24, 0x01	; 1
    1bb0:	62 e0       	ldi	r22, 0x02	; 2
    1bb2:	41 e0       	ldi	r20, 0x01	; 1
    1bb4:	0e 94 93 09 	call	0x1326	; 0x1326 <GPIO_setupPinDirection>
	LCD_sendCommand(LCD_GO_TO_HOME);
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE); /* use 2-line lcd + 4-bit Data Mode + 5*7 dot display Mode */

#elif (LCD_DATA_BITS_MODE == 8)
	/* Configure the data port as output port */
	GPIO_setupPortDirection(LCD_DATA_PORT_ID,PORT_OUTPUT);
    1bb8:	82 e0       	ldi	r24, 0x02	; 2
    1bba:	6f ef       	ldi	r22, 0xFF	; 255
    1bbc:	0e 94 04 0c 	call	0x1808	; 0x1808 <GPIO_setupPortDirection>
	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE); /* use 2-line lcd + 8-bit Data Mode + 5*7 dot display Mode */
    1bc0:	88 e3       	ldi	r24, 0x38	; 56
    1bc2:	0e 94 ec 0d 	call	0x1bd8	; 0x1bd8 <LCD_sendCommand>
#endif

	LCD_sendCommand(LCD_CURSOR_OFF); /* cursor off */
    1bc6:	8c e0       	ldi	r24, 0x0C	; 12
    1bc8:	0e 94 ec 0d 	call	0x1bd8	; 0x1bd8 <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* clear LCD at the beginning */
    1bcc:	81 e0       	ldi	r24, 0x01	; 1
    1bce:	0e 94 ec 0d 	call	0x1bd8	; 0x1bd8 <LCD_sendCommand>
}
    1bd2:	cf 91       	pop	r28
    1bd4:	df 91       	pop	r29
    1bd6:	08 95       	ret

00001bd8 <LCD_sendCommand>:
/*
 * Description :
 * Send the required command to the screen
 */
void LCD_sendCommand(uint8 command)
{
    1bd8:	df 93       	push	r29
    1bda:	cf 93       	push	r28
    1bdc:	cd b7       	in	r28, 0x3d	; 61
    1bde:	de b7       	in	r29, 0x3e	; 62
    1be0:	ea 97       	sbiw	r28, 0x3a	; 58
    1be2:	0f b6       	in	r0, 0x3f	; 63
    1be4:	f8 94       	cli
    1be6:	de bf       	out	0x3e, r29	; 62
    1be8:	0f be       	out	0x3f, r0	; 63
    1bea:	cd bf       	out	0x3d, r28	; 61
    1bec:	8a af       	std	Y+58, r24	; 0x3a
	uint8 lcd_port_value = 0;
    1bee:	19 ae       	std	Y+57, r1	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_LOW); /* Instruction Mode RS=0 */
    1bf0:	81 e0       	ldi	r24, 0x01	; 1
    1bf2:	60 e0       	ldi	r22, 0x00	; 0
    1bf4:	40 e0       	ldi	r20, 0x00	; 0
    1bf6:	0e 94 7e 0a 	call	0x14fc	; 0x14fc <GPIO_writePin>
	GPIO_writePin(LCD_RW_PORT_ID,LCD_RW_PIN_ID,LOGIC_LOW); /* write data to LCD so RW=0 */
    1bfa:	81 e0       	ldi	r24, 0x01	; 1
    1bfc:	61 e0       	ldi	r22, 0x01	; 1
    1bfe:	40 e0       	ldi	r20, 0x00	; 0
    1c00:	0e 94 7e 0a 	call	0x14fc	; 0x14fc <GPIO_writePin>
    1c04:	80 e0       	ldi	r24, 0x00	; 0
    1c06:	90 e0       	ldi	r25, 0x00	; 0
    1c08:	a0 e8       	ldi	r26, 0x80	; 128
    1c0a:	bf e3       	ldi	r27, 0x3F	; 63
    1c0c:	8d ab       	std	Y+53, r24	; 0x35
    1c0e:	9e ab       	std	Y+54, r25	; 0x36
    1c10:	af ab       	std	Y+55, r26	; 0x37
    1c12:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c14:	6d a9       	ldd	r22, Y+53	; 0x35
    1c16:	7e a9       	ldd	r23, Y+54	; 0x36
    1c18:	8f a9       	ldd	r24, Y+55	; 0x37
    1c1a:	98 ad       	ldd	r25, Y+56	; 0x38
    1c1c:	20 e0       	ldi	r18, 0x00	; 0
    1c1e:	30 e0       	ldi	r19, 0x00	; 0
    1c20:	4a ef       	ldi	r20, 0xFA	; 250
    1c22:	54 e4       	ldi	r21, 0x44	; 68
    1c24:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c28:	dc 01       	movw	r26, r24
    1c2a:	cb 01       	movw	r24, r22
    1c2c:	89 ab       	std	Y+49, r24	; 0x31
    1c2e:	9a ab       	std	Y+50, r25	; 0x32
    1c30:	ab ab       	std	Y+51, r26	; 0x33
    1c32:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1c34:	69 a9       	ldd	r22, Y+49	; 0x31
    1c36:	7a a9       	ldd	r23, Y+50	; 0x32
    1c38:	8b a9       	ldd	r24, Y+51	; 0x33
    1c3a:	9c a9       	ldd	r25, Y+52	; 0x34
    1c3c:	20 e0       	ldi	r18, 0x00	; 0
    1c3e:	30 e0       	ldi	r19, 0x00	; 0
    1c40:	40 e8       	ldi	r20, 0x80	; 128
    1c42:	5f e3       	ldi	r21, 0x3F	; 63
    1c44:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1c48:	88 23       	and	r24, r24
    1c4a:	2c f4       	brge	.+10     	; 0x1c56 <LCD_sendCommand+0x7e>
		__ticks = 1;
    1c4c:	81 e0       	ldi	r24, 0x01	; 1
    1c4e:	90 e0       	ldi	r25, 0x00	; 0
    1c50:	98 ab       	std	Y+48, r25	; 0x30
    1c52:	8f a7       	std	Y+47, r24	; 0x2f
    1c54:	3f c0       	rjmp	.+126    	; 0x1cd4 <LCD_sendCommand+0xfc>
	else if (__tmp > 65535)
    1c56:	69 a9       	ldd	r22, Y+49	; 0x31
    1c58:	7a a9       	ldd	r23, Y+50	; 0x32
    1c5a:	8b a9       	ldd	r24, Y+51	; 0x33
    1c5c:	9c a9       	ldd	r25, Y+52	; 0x34
    1c5e:	20 e0       	ldi	r18, 0x00	; 0
    1c60:	3f ef       	ldi	r19, 0xFF	; 255
    1c62:	4f e7       	ldi	r20, 0x7F	; 127
    1c64:	57 e4       	ldi	r21, 0x47	; 71
    1c66:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1c6a:	18 16       	cp	r1, r24
    1c6c:	4c f5       	brge	.+82     	; 0x1cc0 <LCD_sendCommand+0xe8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c6e:	6d a9       	ldd	r22, Y+53	; 0x35
    1c70:	7e a9       	ldd	r23, Y+54	; 0x36
    1c72:	8f a9       	ldd	r24, Y+55	; 0x37
    1c74:	98 ad       	ldd	r25, Y+56	; 0x38
    1c76:	20 e0       	ldi	r18, 0x00	; 0
    1c78:	30 e0       	ldi	r19, 0x00	; 0
    1c7a:	40 e2       	ldi	r20, 0x20	; 32
    1c7c:	51 e4       	ldi	r21, 0x41	; 65
    1c7e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c82:	dc 01       	movw	r26, r24
    1c84:	cb 01       	movw	r24, r22
    1c86:	bc 01       	movw	r22, r24
    1c88:	cd 01       	movw	r24, r26
    1c8a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c8e:	dc 01       	movw	r26, r24
    1c90:	cb 01       	movw	r24, r22
    1c92:	98 ab       	std	Y+48, r25	; 0x30
    1c94:	8f a7       	std	Y+47, r24	; 0x2f
    1c96:	0f c0       	rjmp	.+30     	; 0x1cb6 <LCD_sendCommand+0xde>
    1c98:	88 ec       	ldi	r24, 0xC8	; 200
    1c9a:	90 e0       	ldi	r25, 0x00	; 0
    1c9c:	9e a7       	std	Y+46, r25	; 0x2e
    1c9e:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1ca0:	8d a5       	ldd	r24, Y+45	; 0x2d
    1ca2:	9e a5       	ldd	r25, Y+46	; 0x2e
    1ca4:	01 97       	sbiw	r24, 0x01	; 1
    1ca6:	f1 f7       	brne	.-4      	; 0x1ca4 <LCD_sendCommand+0xcc>
    1ca8:	9e a7       	std	Y+46, r25	; 0x2e
    1caa:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1cac:	8f a5       	ldd	r24, Y+47	; 0x2f
    1cae:	98 a9       	ldd	r25, Y+48	; 0x30
    1cb0:	01 97       	sbiw	r24, 0x01	; 1
    1cb2:	98 ab       	std	Y+48, r25	; 0x30
    1cb4:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1cb6:	8f a5       	ldd	r24, Y+47	; 0x2f
    1cb8:	98 a9       	ldd	r25, Y+48	; 0x30
    1cba:	00 97       	sbiw	r24, 0x00	; 0
    1cbc:	69 f7       	brne	.-38     	; 0x1c98 <LCD_sendCommand+0xc0>
    1cbe:	14 c0       	rjmp	.+40     	; 0x1ce8 <LCD_sendCommand+0x110>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1cc0:	69 a9       	ldd	r22, Y+49	; 0x31
    1cc2:	7a a9       	ldd	r23, Y+50	; 0x32
    1cc4:	8b a9       	ldd	r24, Y+51	; 0x33
    1cc6:	9c a9       	ldd	r25, Y+52	; 0x34
    1cc8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ccc:	dc 01       	movw	r26, r24
    1cce:	cb 01       	movw	r24, r22
    1cd0:	98 ab       	std	Y+48, r25	; 0x30
    1cd2:	8f a7       	std	Y+47, r24	; 0x2f
    1cd4:	8f a5       	ldd	r24, Y+47	; 0x2f
    1cd6:	98 a9       	ldd	r25, Y+48	; 0x30
    1cd8:	9c a7       	std	Y+44, r25	; 0x2c
    1cda:	8b a7       	std	Y+43, r24	; 0x2b
    1cdc:	8b a5       	ldd	r24, Y+43	; 0x2b
    1cde:	9c a5       	ldd	r25, Y+44	; 0x2c
    1ce0:	01 97       	sbiw	r24, 0x01	; 1
    1ce2:	f1 f7       	brne	.-4      	; 0x1ce0 <LCD_sendCommand+0x108>
    1ce4:	9c a7       	std	Y+44, r25	; 0x2c
    1ce6:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    1ce8:	81 e0       	ldi	r24, 0x01	; 1
    1cea:	62 e0       	ldi	r22, 0x02	; 2
    1cec:	41 e0       	ldi	r20, 0x01	; 1
    1cee:	0e 94 7e 0a 	call	0x14fc	; 0x14fc <GPIO_writePin>
    1cf2:	80 e0       	ldi	r24, 0x00	; 0
    1cf4:	90 e0       	ldi	r25, 0x00	; 0
    1cf6:	a0 e8       	ldi	r26, 0x80	; 128
    1cf8:	bf e3       	ldi	r27, 0x3F	; 63
    1cfa:	8f a3       	std	Y+39, r24	; 0x27
    1cfc:	98 a7       	std	Y+40, r25	; 0x28
    1cfe:	a9 a7       	std	Y+41, r26	; 0x29
    1d00:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d02:	6f a1       	ldd	r22, Y+39	; 0x27
    1d04:	78 a5       	ldd	r23, Y+40	; 0x28
    1d06:	89 a5       	ldd	r24, Y+41	; 0x29
    1d08:	9a a5       	ldd	r25, Y+42	; 0x2a
    1d0a:	20 e0       	ldi	r18, 0x00	; 0
    1d0c:	30 e0       	ldi	r19, 0x00	; 0
    1d0e:	4a ef       	ldi	r20, 0xFA	; 250
    1d10:	54 e4       	ldi	r21, 0x44	; 68
    1d12:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d16:	dc 01       	movw	r26, r24
    1d18:	cb 01       	movw	r24, r22
    1d1a:	8b a3       	std	Y+35, r24	; 0x23
    1d1c:	9c a3       	std	Y+36, r25	; 0x24
    1d1e:	ad a3       	std	Y+37, r26	; 0x25
    1d20:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1d22:	6b a1       	ldd	r22, Y+35	; 0x23
    1d24:	7c a1       	ldd	r23, Y+36	; 0x24
    1d26:	8d a1       	ldd	r24, Y+37	; 0x25
    1d28:	9e a1       	ldd	r25, Y+38	; 0x26
    1d2a:	20 e0       	ldi	r18, 0x00	; 0
    1d2c:	30 e0       	ldi	r19, 0x00	; 0
    1d2e:	40 e8       	ldi	r20, 0x80	; 128
    1d30:	5f e3       	ldi	r21, 0x3F	; 63
    1d32:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1d36:	88 23       	and	r24, r24
    1d38:	2c f4       	brge	.+10     	; 0x1d44 <LCD_sendCommand+0x16c>
		__ticks = 1;
    1d3a:	81 e0       	ldi	r24, 0x01	; 1
    1d3c:	90 e0       	ldi	r25, 0x00	; 0
    1d3e:	9a a3       	std	Y+34, r25	; 0x22
    1d40:	89 a3       	std	Y+33, r24	; 0x21
    1d42:	3f c0       	rjmp	.+126    	; 0x1dc2 <LCD_sendCommand+0x1ea>
	else if (__tmp > 65535)
    1d44:	6b a1       	ldd	r22, Y+35	; 0x23
    1d46:	7c a1       	ldd	r23, Y+36	; 0x24
    1d48:	8d a1       	ldd	r24, Y+37	; 0x25
    1d4a:	9e a1       	ldd	r25, Y+38	; 0x26
    1d4c:	20 e0       	ldi	r18, 0x00	; 0
    1d4e:	3f ef       	ldi	r19, 0xFF	; 255
    1d50:	4f e7       	ldi	r20, 0x7F	; 127
    1d52:	57 e4       	ldi	r21, 0x47	; 71
    1d54:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1d58:	18 16       	cp	r1, r24
    1d5a:	4c f5       	brge	.+82     	; 0x1dae <LCD_sendCommand+0x1d6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d5c:	6f a1       	ldd	r22, Y+39	; 0x27
    1d5e:	78 a5       	ldd	r23, Y+40	; 0x28
    1d60:	89 a5       	ldd	r24, Y+41	; 0x29
    1d62:	9a a5       	ldd	r25, Y+42	; 0x2a
    1d64:	20 e0       	ldi	r18, 0x00	; 0
    1d66:	30 e0       	ldi	r19, 0x00	; 0
    1d68:	40 e2       	ldi	r20, 0x20	; 32
    1d6a:	51 e4       	ldi	r21, 0x41	; 65
    1d6c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d70:	dc 01       	movw	r26, r24
    1d72:	cb 01       	movw	r24, r22
    1d74:	bc 01       	movw	r22, r24
    1d76:	cd 01       	movw	r24, r26
    1d78:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d7c:	dc 01       	movw	r26, r24
    1d7e:	cb 01       	movw	r24, r22
    1d80:	9a a3       	std	Y+34, r25	; 0x22
    1d82:	89 a3       	std	Y+33, r24	; 0x21
    1d84:	0f c0       	rjmp	.+30     	; 0x1da4 <LCD_sendCommand+0x1cc>
    1d86:	88 ec       	ldi	r24, 0xC8	; 200
    1d88:	90 e0       	ldi	r25, 0x00	; 0
    1d8a:	98 a3       	std	Y+32, r25	; 0x20
    1d8c:	8f 8f       	std	Y+31, r24	; 0x1f
    1d8e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1d90:	98 a1       	ldd	r25, Y+32	; 0x20
    1d92:	01 97       	sbiw	r24, 0x01	; 1
    1d94:	f1 f7       	brne	.-4      	; 0x1d92 <LCD_sendCommand+0x1ba>
    1d96:	98 a3       	std	Y+32, r25	; 0x20
    1d98:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d9a:	89 a1       	ldd	r24, Y+33	; 0x21
    1d9c:	9a a1       	ldd	r25, Y+34	; 0x22
    1d9e:	01 97       	sbiw	r24, 0x01	; 1
    1da0:	9a a3       	std	Y+34, r25	; 0x22
    1da2:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1da4:	89 a1       	ldd	r24, Y+33	; 0x21
    1da6:	9a a1       	ldd	r25, Y+34	; 0x22
    1da8:	00 97       	sbiw	r24, 0x00	; 0
    1daa:	69 f7       	brne	.-38     	; 0x1d86 <LCD_sendCommand+0x1ae>
    1dac:	14 c0       	rjmp	.+40     	; 0x1dd6 <LCD_sendCommand+0x1fe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1dae:	6b a1       	ldd	r22, Y+35	; 0x23
    1db0:	7c a1       	ldd	r23, Y+36	; 0x24
    1db2:	8d a1       	ldd	r24, Y+37	; 0x25
    1db4:	9e a1       	ldd	r25, Y+38	; 0x26
    1db6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1dba:	dc 01       	movw	r26, r24
    1dbc:	cb 01       	movw	r24, r22
    1dbe:	9a a3       	std	Y+34, r25	; 0x22
    1dc0:	89 a3       	std	Y+33, r24	; 0x21
    1dc2:	89 a1       	ldd	r24, Y+33	; 0x21
    1dc4:	9a a1       	ldd	r25, Y+34	; 0x22
    1dc6:	9e 8f       	std	Y+30, r25	; 0x1e
    1dc8:	8d 8f       	std	Y+29, r24	; 0x1d
    1dca:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1dcc:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1dce:	01 97       	sbiw	r24, 0x01	; 1
    1dd0:	f1 f7       	brne	.-4      	; 0x1dce <LCD_sendCommand+0x1f6>
    1dd2:	9e 8f       	std	Y+30, r25	; 0x1e
    1dd4:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */

#elif (LCD_DATA_BITS_MODE == 8)
	GPIO_writePort(LCD_DATA_PORT_ID,command); /* out the required command to the data bus D0 --> D7 */
    1dd6:	82 e0       	ldi	r24, 0x02	; 2
    1dd8:	6a ad       	ldd	r22, Y+58	; 0x3a
    1dda:	0e 94 48 0c 	call	0x1890	; 0x1890 <GPIO_writePort>
    1dde:	80 e0       	ldi	r24, 0x00	; 0
    1de0:	90 e0       	ldi	r25, 0x00	; 0
    1de2:	a0 e8       	ldi	r26, 0x80	; 128
    1de4:	bf e3       	ldi	r27, 0x3F	; 63
    1de6:	89 8f       	std	Y+25, r24	; 0x19
    1de8:	9a 8f       	std	Y+26, r25	; 0x1a
    1dea:	ab 8f       	std	Y+27, r26	; 0x1b
    1dec:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1dee:	69 8d       	ldd	r22, Y+25	; 0x19
    1df0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1df2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1df4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1df6:	20 e0       	ldi	r18, 0x00	; 0
    1df8:	30 e0       	ldi	r19, 0x00	; 0
    1dfa:	4a ef       	ldi	r20, 0xFA	; 250
    1dfc:	54 e4       	ldi	r21, 0x44	; 68
    1dfe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e02:	dc 01       	movw	r26, r24
    1e04:	cb 01       	movw	r24, r22
    1e06:	8d 8b       	std	Y+21, r24	; 0x15
    1e08:	9e 8b       	std	Y+22, r25	; 0x16
    1e0a:	af 8b       	std	Y+23, r26	; 0x17
    1e0c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1e0e:	6d 89       	ldd	r22, Y+21	; 0x15
    1e10:	7e 89       	ldd	r23, Y+22	; 0x16
    1e12:	8f 89       	ldd	r24, Y+23	; 0x17
    1e14:	98 8d       	ldd	r25, Y+24	; 0x18
    1e16:	20 e0       	ldi	r18, 0x00	; 0
    1e18:	30 e0       	ldi	r19, 0x00	; 0
    1e1a:	40 e8       	ldi	r20, 0x80	; 128
    1e1c:	5f e3       	ldi	r21, 0x3F	; 63
    1e1e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1e22:	88 23       	and	r24, r24
    1e24:	2c f4       	brge	.+10     	; 0x1e30 <LCD_sendCommand+0x258>
		__ticks = 1;
    1e26:	81 e0       	ldi	r24, 0x01	; 1
    1e28:	90 e0       	ldi	r25, 0x00	; 0
    1e2a:	9c 8b       	std	Y+20, r25	; 0x14
    1e2c:	8b 8b       	std	Y+19, r24	; 0x13
    1e2e:	3f c0       	rjmp	.+126    	; 0x1eae <LCD_sendCommand+0x2d6>
	else if (__tmp > 65535)
    1e30:	6d 89       	ldd	r22, Y+21	; 0x15
    1e32:	7e 89       	ldd	r23, Y+22	; 0x16
    1e34:	8f 89       	ldd	r24, Y+23	; 0x17
    1e36:	98 8d       	ldd	r25, Y+24	; 0x18
    1e38:	20 e0       	ldi	r18, 0x00	; 0
    1e3a:	3f ef       	ldi	r19, 0xFF	; 255
    1e3c:	4f e7       	ldi	r20, 0x7F	; 127
    1e3e:	57 e4       	ldi	r21, 0x47	; 71
    1e40:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1e44:	18 16       	cp	r1, r24
    1e46:	4c f5       	brge	.+82     	; 0x1e9a <LCD_sendCommand+0x2c2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e48:	69 8d       	ldd	r22, Y+25	; 0x19
    1e4a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1e4c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1e4e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1e50:	20 e0       	ldi	r18, 0x00	; 0
    1e52:	30 e0       	ldi	r19, 0x00	; 0
    1e54:	40 e2       	ldi	r20, 0x20	; 32
    1e56:	51 e4       	ldi	r21, 0x41	; 65
    1e58:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e5c:	dc 01       	movw	r26, r24
    1e5e:	cb 01       	movw	r24, r22
    1e60:	bc 01       	movw	r22, r24
    1e62:	cd 01       	movw	r24, r26
    1e64:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e68:	dc 01       	movw	r26, r24
    1e6a:	cb 01       	movw	r24, r22
    1e6c:	9c 8b       	std	Y+20, r25	; 0x14
    1e6e:	8b 8b       	std	Y+19, r24	; 0x13
    1e70:	0f c0       	rjmp	.+30     	; 0x1e90 <LCD_sendCommand+0x2b8>
    1e72:	88 ec       	ldi	r24, 0xC8	; 200
    1e74:	90 e0       	ldi	r25, 0x00	; 0
    1e76:	9a 8b       	std	Y+18, r25	; 0x12
    1e78:	89 8b       	std	Y+17, r24	; 0x11
    1e7a:	89 89       	ldd	r24, Y+17	; 0x11
    1e7c:	9a 89       	ldd	r25, Y+18	; 0x12
    1e7e:	01 97       	sbiw	r24, 0x01	; 1
    1e80:	f1 f7       	brne	.-4      	; 0x1e7e <LCD_sendCommand+0x2a6>
    1e82:	9a 8b       	std	Y+18, r25	; 0x12
    1e84:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e86:	8b 89       	ldd	r24, Y+19	; 0x13
    1e88:	9c 89       	ldd	r25, Y+20	; 0x14
    1e8a:	01 97       	sbiw	r24, 0x01	; 1
    1e8c:	9c 8b       	std	Y+20, r25	; 0x14
    1e8e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e90:	8b 89       	ldd	r24, Y+19	; 0x13
    1e92:	9c 89       	ldd	r25, Y+20	; 0x14
    1e94:	00 97       	sbiw	r24, 0x00	; 0
    1e96:	69 f7       	brne	.-38     	; 0x1e72 <LCD_sendCommand+0x29a>
    1e98:	14 c0       	rjmp	.+40     	; 0x1ec2 <LCD_sendCommand+0x2ea>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e9a:	6d 89       	ldd	r22, Y+21	; 0x15
    1e9c:	7e 89       	ldd	r23, Y+22	; 0x16
    1e9e:	8f 89       	ldd	r24, Y+23	; 0x17
    1ea0:	98 8d       	ldd	r25, Y+24	; 0x18
    1ea2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ea6:	dc 01       	movw	r26, r24
    1ea8:	cb 01       	movw	r24, r22
    1eaa:	9c 8b       	std	Y+20, r25	; 0x14
    1eac:	8b 8b       	std	Y+19, r24	; 0x13
    1eae:	8b 89       	ldd	r24, Y+19	; 0x13
    1eb0:	9c 89       	ldd	r25, Y+20	; 0x14
    1eb2:	98 8b       	std	Y+16, r25	; 0x10
    1eb4:	8f 87       	std	Y+15, r24	; 0x0f
    1eb6:	8f 85       	ldd	r24, Y+15	; 0x0f
    1eb8:	98 89       	ldd	r25, Y+16	; 0x10
    1eba:	01 97       	sbiw	r24, 0x01	; 1
    1ebc:	f1 f7       	brne	.-4      	; 0x1eba <LCD_sendCommand+0x2e2>
    1ebe:	98 8b       	std	Y+16, r25	; 0x10
    1ec0:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    1ec2:	81 e0       	ldi	r24, 0x01	; 1
    1ec4:	62 e0       	ldi	r22, 0x02	; 2
    1ec6:	40 e0       	ldi	r20, 0x00	; 0
    1ec8:	0e 94 7e 0a 	call	0x14fc	; 0x14fc <GPIO_writePin>
    1ecc:	80 e0       	ldi	r24, 0x00	; 0
    1ece:	90 e0       	ldi	r25, 0x00	; 0
    1ed0:	a0 e8       	ldi	r26, 0x80	; 128
    1ed2:	bf e3       	ldi	r27, 0x3F	; 63
    1ed4:	8b 87       	std	Y+11, r24	; 0x0b
    1ed6:	9c 87       	std	Y+12, r25	; 0x0c
    1ed8:	ad 87       	std	Y+13, r26	; 0x0d
    1eda:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1edc:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ede:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ee0:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ee2:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ee4:	20 e0       	ldi	r18, 0x00	; 0
    1ee6:	30 e0       	ldi	r19, 0x00	; 0
    1ee8:	4a ef       	ldi	r20, 0xFA	; 250
    1eea:	54 e4       	ldi	r21, 0x44	; 68
    1eec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ef0:	dc 01       	movw	r26, r24
    1ef2:	cb 01       	movw	r24, r22
    1ef4:	8f 83       	std	Y+7, r24	; 0x07
    1ef6:	98 87       	std	Y+8, r25	; 0x08
    1ef8:	a9 87       	std	Y+9, r26	; 0x09
    1efa:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1efc:	6f 81       	ldd	r22, Y+7	; 0x07
    1efe:	78 85       	ldd	r23, Y+8	; 0x08
    1f00:	89 85       	ldd	r24, Y+9	; 0x09
    1f02:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f04:	20 e0       	ldi	r18, 0x00	; 0
    1f06:	30 e0       	ldi	r19, 0x00	; 0
    1f08:	40 e8       	ldi	r20, 0x80	; 128
    1f0a:	5f e3       	ldi	r21, 0x3F	; 63
    1f0c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1f10:	88 23       	and	r24, r24
    1f12:	2c f4       	brge	.+10     	; 0x1f1e <LCD_sendCommand+0x346>
		__ticks = 1;
    1f14:	81 e0       	ldi	r24, 0x01	; 1
    1f16:	90 e0       	ldi	r25, 0x00	; 0
    1f18:	9e 83       	std	Y+6, r25	; 0x06
    1f1a:	8d 83       	std	Y+5, r24	; 0x05
    1f1c:	3f c0       	rjmp	.+126    	; 0x1f9c <LCD_sendCommand+0x3c4>
	else if (__tmp > 65535)
    1f1e:	6f 81       	ldd	r22, Y+7	; 0x07
    1f20:	78 85       	ldd	r23, Y+8	; 0x08
    1f22:	89 85       	ldd	r24, Y+9	; 0x09
    1f24:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f26:	20 e0       	ldi	r18, 0x00	; 0
    1f28:	3f ef       	ldi	r19, 0xFF	; 255
    1f2a:	4f e7       	ldi	r20, 0x7F	; 127
    1f2c:	57 e4       	ldi	r21, 0x47	; 71
    1f2e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1f32:	18 16       	cp	r1, r24
    1f34:	4c f5       	brge	.+82     	; 0x1f88 <LCD_sendCommand+0x3b0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f36:	6b 85       	ldd	r22, Y+11	; 0x0b
    1f38:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f3a:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f3c:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f3e:	20 e0       	ldi	r18, 0x00	; 0
    1f40:	30 e0       	ldi	r19, 0x00	; 0
    1f42:	40 e2       	ldi	r20, 0x20	; 32
    1f44:	51 e4       	ldi	r21, 0x41	; 65
    1f46:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f4a:	dc 01       	movw	r26, r24
    1f4c:	cb 01       	movw	r24, r22
    1f4e:	bc 01       	movw	r22, r24
    1f50:	cd 01       	movw	r24, r26
    1f52:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f56:	dc 01       	movw	r26, r24
    1f58:	cb 01       	movw	r24, r22
    1f5a:	9e 83       	std	Y+6, r25	; 0x06
    1f5c:	8d 83       	std	Y+5, r24	; 0x05
    1f5e:	0f c0       	rjmp	.+30     	; 0x1f7e <LCD_sendCommand+0x3a6>
    1f60:	88 ec       	ldi	r24, 0xC8	; 200
    1f62:	90 e0       	ldi	r25, 0x00	; 0
    1f64:	9c 83       	std	Y+4, r25	; 0x04
    1f66:	8b 83       	std	Y+3, r24	; 0x03
    1f68:	8b 81       	ldd	r24, Y+3	; 0x03
    1f6a:	9c 81       	ldd	r25, Y+4	; 0x04
    1f6c:	01 97       	sbiw	r24, 0x01	; 1
    1f6e:	f1 f7       	brne	.-4      	; 0x1f6c <LCD_sendCommand+0x394>
    1f70:	9c 83       	std	Y+4, r25	; 0x04
    1f72:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f74:	8d 81       	ldd	r24, Y+5	; 0x05
    1f76:	9e 81       	ldd	r25, Y+6	; 0x06
    1f78:	01 97       	sbiw	r24, 0x01	; 1
    1f7a:	9e 83       	std	Y+6, r25	; 0x06
    1f7c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f7e:	8d 81       	ldd	r24, Y+5	; 0x05
    1f80:	9e 81       	ldd	r25, Y+6	; 0x06
    1f82:	00 97       	sbiw	r24, 0x00	; 0
    1f84:	69 f7       	brne	.-38     	; 0x1f60 <LCD_sendCommand+0x388>
    1f86:	14 c0       	rjmp	.+40     	; 0x1fb0 <LCD_sendCommand+0x3d8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f88:	6f 81       	ldd	r22, Y+7	; 0x07
    1f8a:	78 85       	ldd	r23, Y+8	; 0x08
    1f8c:	89 85       	ldd	r24, Y+9	; 0x09
    1f8e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f90:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f94:	dc 01       	movw	r26, r24
    1f96:	cb 01       	movw	r24, r22
    1f98:	9e 83       	std	Y+6, r25	; 0x06
    1f9a:	8d 83       	std	Y+5, r24	; 0x05
    1f9c:	8d 81       	ldd	r24, Y+5	; 0x05
    1f9e:	9e 81       	ldd	r25, Y+6	; 0x06
    1fa0:	9a 83       	std	Y+2, r25	; 0x02
    1fa2:	89 83       	std	Y+1, r24	; 0x01
    1fa4:	89 81       	ldd	r24, Y+1	; 0x01
    1fa6:	9a 81       	ldd	r25, Y+2	; 0x02
    1fa8:	01 97       	sbiw	r24, 0x01	; 1
    1faa:	f1 f7       	brne	.-4      	; 0x1fa8 <LCD_sendCommand+0x3d0>
    1fac:	9a 83       	std	Y+2, r25	; 0x02
    1fae:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    1fb0:	ea 96       	adiw	r28, 0x3a	; 58
    1fb2:	0f b6       	in	r0, 0x3f	; 63
    1fb4:	f8 94       	cli
    1fb6:	de bf       	out	0x3e, r29	; 62
    1fb8:	0f be       	out	0x3f, r0	; 63
    1fba:	cd bf       	out	0x3d, r28	; 61
    1fbc:	cf 91       	pop	r28
    1fbe:	df 91       	pop	r29
    1fc0:	08 95       	ret

00001fc2 <LCD_displayCharacter>:
/*
 * Description :
 * Display the required character on the screen
 */
void LCD_displayCharacter(uint8 data)
{
    1fc2:	df 93       	push	r29
    1fc4:	cf 93       	push	r28
    1fc6:	cd b7       	in	r28, 0x3d	; 61
    1fc8:	de b7       	in	r29, 0x3e	; 62
    1fca:	ea 97       	sbiw	r28, 0x3a	; 58
    1fcc:	0f b6       	in	r0, 0x3f	; 63
    1fce:	f8 94       	cli
    1fd0:	de bf       	out	0x3e, r29	; 62
    1fd2:	0f be       	out	0x3f, r0	; 63
    1fd4:	cd bf       	out	0x3d, r28	; 61
    1fd6:	8a af       	std	Y+58, r24	; 0x3a
	uint8 lcd_port_value = 0;
    1fd8:	19 ae       	std	Y+57, r1	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_HIGH); /* Data Mode RS=1 */
    1fda:	81 e0       	ldi	r24, 0x01	; 1
    1fdc:	60 e0       	ldi	r22, 0x00	; 0
    1fde:	41 e0       	ldi	r20, 0x01	; 1
    1fe0:	0e 94 7e 0a 	call	0x14fc	; 0x14fc <GPIO_writePin>
	GPIO_writePin(LCD_RW_PORT_ID,LCD_RW_PIN_ID,LOGIC_LOW); /* write data to LCD so RW=0 */
    1fe4:	81 e0       	ldi	r24, 0x01	; 1
    1fe6:	61 e0       	ldi	r22, 0x01	; 1
    1fe8:	40 e0       	ldi	r20, 0x00	; 0
    1fea:	0e 94 7e 0a 	call	0x14fc	; 0x14fc <GPIO_writePin>
    1fee:	80 e0       	ldi	r24, 0x00	; 0
    1ff0:	90 e0       	ldi	r25, 0x00	; 0
    1ff2:	a0 e8       	ldi	r26, 0x80	; 128
    1ff4:	bf e3       	ldi	r27, 0x3F	; 63
    1ff6:	8d ab       	std	Y+53, r24	; 0x35
    1ff8:	9e ab       	std	Y+54, r25	; 0x36
    1ffa:	af ab       	std	Y+55, r26	; 0x37
    1ffc:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ffe:	6d a9       	ldd	r22, Y+53	; 0x35
    2000:	7e a9       	ldd	r23, Y+54	; 0x36
    2002:	8f a9       	ldd	r24, Y+55	; 0x37
    2004:	98 ad       	ldd	r25, Y+56	; 0x38
    2006:	20 e0       	ldi	r18, 0x00	; 0
    2008:	30 e0       	ldi	r19, 0x00	; 0
    200a:	4a ef       	ldi	r20, 0xFA	; 250
    200c:	54 e4       	ldi	r21, 0x44	; 68
    200e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2012:	dc 01       	movw	r26, r24
    2014:	cb 01       	movw	r24, r22
    2016:	89 ab       	std	Y+49, r24	; 0x31
    2018:	9a ab       	std	Y+50, r25	; 0x32
    201a:	ab ab       	std	Y+51, r26	; 0x33
    201c:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    201e:	69 a9       	ldd	r22, Y+49	; 0x31
    2020:	7a a9       	ldd	r23, Y+50	; 0x32
    2022:	8b a9       	ldd	r24, Y+51	; 0x33
    2024:	9c a9       	ldd	r25, Y+52	; 0x34
    2026:	20 e0       	ldi	r18, 0x00	; 0
    2028:	30 e0       	ldi	r19, 0x00	; 0
    202a:	40 e8       	ldi	r20, 0x80	; 128
    202c:	5f e3       	ldi	r21, 0x3F	; 63
    202e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2032:	88 23       	and	r24, r24
    2034:	2c f4       	brge	.+10     	; 0x2040 <LCD_displayCharacter+0x7e>
		__ticks = 1;
    2036:	81 e0       	ldi	r24, 0x01	; 1
    2038:	90 e0       	ldi	r25, 0x00	; 0
    203a:	98 ab       	std	Y+48, r25	; 0x30
    203c:	8f a7       	std	Y+47, r24	; 0x2f
    203e:	3f c0       	rjmp	.+126    	; 0x20be <LCD_displayCharacter+0xfc>
	else if (__tmp > 65535)
    2040:	69 a9       	ldd	r22, Y+49	; 0x31
    2042:	7a a9       	ldd	r23, Y+50	; 0x32
    2044:	8b a9       	ldd	r24, Y+51	; 0x33
    2046:	9c a9       	ldd	r25, Y+52	; 0x34
    2048:	20 e0       	ldi	r18, 0x00	; 0
    204a:	3f ef       	ldi	r19, 0xFF	; 255
    204c:	4f e7       	ldi	r20, 0x7F	; 127
    204e:	57 e4       	ldi	r21, 0x47	; 71
    2050:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2054:	18 16       	cp	r1, r24
    2056:	4c f5       	brge	.+82     	; 0x20aa <LCD_displayCharacter+0xe8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2058:	6d a9       	ldd	r22, Y+53	; 0x35
    205a:	7e a9       	ldd	r23, Y+54	; 0x36
    205c:	8f a9       	ldd	r24, Y+55	; 0x37
    205e:	98 ad       	ldd	r25, Y+56	; 0x38
    2060:	20 e0       	ldi	r18, 0x00	; 0
    2062:	30 e0       	ldi	r19, 0x00	; 0
    2064:	40 e2       	ldi	r20, 0x20	; 32
    2066:	51 e4       	ldi	r21, 0x41	; 65
    2068:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    206c:	dc 01       	movw	r26, r24
    206e:	cb 01       	movw	r24, r22
    2070:	bc 01       	movw	r22, r24
    2072:	cd 01       	movw	r24, r26
    2074:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2078:	dc 01       	movw	r26, r24
    207a:	cb 01       	movw	r24, r22
    207c:	98 ab       	std	Y+48, r25	; 0x30
    207e:	8f a7       	std	Y+47, r24	; 0x2f
    2080:	0f c0       	rjmp	.+30     	; 0x20a0 <LCD_displayCharacter+0xde>
    2082:	88 ec       	ldi	r24, 0xC8	; 200
    2084:	90 e0       	ldi	r25, 0x00	; 0
    2086:	9e a7       	std	Y+46, r25	; 0x2e
    2088:	8d a7       	std	Y+45, r24	; 0x2d
    208a:	8d a5       	ldd	r24, Y+45	; 0x2d
    208c:	9e a5       	ldd	r25, Y+46	; 0x2e
    208e:	01 97       	sbiw	r24, 0x01	; 1
    2090:	f1 f7       	brne	.-4      	; 0x208e <LCD_displayCharacter+0xcc>
    2092:	9e a7       	std	Y+46, r25	; 0x2e
    2094:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2096:	8f a5       	ldd	r24, Y+47	; 0x2f
    2098:	98 a9       	ldd	r25, Y+48	; 0x30
    209a:	01 97       	sbiw	r24, 0x01	; 1
    209c:	98 ab       	std	Y+48, r25	; 0x30
    209e:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    20a0:	8f a5       	ldd	r24, Y+47	; 0x2f
    20a2:	98 a9       	ldd	r25, Y+48	; 0x30
    20a4:	00 97       	sbiw	r24, 0x00	; 0
    20a6:	69 f7       	brne	.-38     	; 0x2082 <LCD_displayCharacter+0xc0>
    20a8:	14 c0       	rjmp	.+40     	; 0x20d2 <LCD_displayCharacter+0x110>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    20aa:	69 a9       	ldd	r22, Y+49	; 0x31
    20ac:	7a a9       	ldd	r23, Y+50	; 0x32
    20ae:	8b a9       	ldd	r24, Y+51	; 0x33
    20b0:	9c a9       	ldd	r25, Y+52	; 0x34
    20b2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20b6:	dc 01       	movw	r26, r24
    20b8:	cb 01       	movw	r24, r22
    20ba:	98 ab       	std	Y+48, r25	; 0x30
    20bc:	8f a7       	std	Y+47, r24	; 0x2f
    20be:	8f a5       	ldd	r24, Y+47	; 0x2f
    20c0:	98 a9       	ldd	r25, Y+48	; 0x30
    20c2:	9c a7       	std	Y+44, r25	; 0x2c
    20c4:	8b a7       	std	Y+43, r24	; 0x2b
    20c6:	8b a5       	ldd	r24, Y+43	; 0x2b
    20c8:	9c a5       	ldd	r25, Y+44	; 0x2c
    20ca:	01 97       	sbiw	r24, 0x01	; 1
    20cc:	f1 f7       	brne	.-4      	; 0x20ca <LCD_displayCharacter+0x108>
    20ce:	9c a7       	std	Y+44, r25	; 0x2c
    20d0:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    20d2:	81 e0       	ldi	r24, 0x01	; 1
    20d4:	62 e0       	ldi	r22, 0x02	; 2
    20d6:	41 e0       	ldi	r20, 0x01	; 1
    20d8:	0e 94 7e 0a 	call	0x14fc	; 0x14fc <GPIO_writePin>
    20dc:	80 e0       	ldi	r24, 0x00	; 0
    20de:	90 e0       	ldi	r25, 0x00	; 0
    20e0:	a0 e8       	ldi	r26, 0x80	; 128
    20e2:	bf e3       	ldi	r27, 0x3F	; 63
    20e4:	8f a3       	std	Y+39, r24	; 0x27
    20e6:	98 a7       	std	Y+40, r25	; 0x28
    20e8:	a9 a7       	std	Y+41, r26	; 0x29
    20ea:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    20ec:	6f a1       	ldd	r22, Y+39	; 0x27
    20ee:	78 a5       	ldd	r23, Y+40	; 0x28
    20f0:	89 a5       	ldd	r24, Y+41	; 0x29
    20f2:	9a a5       	ldd	r25, Y+42	; 0x2a
    20f4:	20 e0       	ldi	r18, 0x00	; 0
    20f6:	30 e0       	ldi	r19, 0x00	; 0
    20f8:	4a ef       	ldi	r20, 0xFA	; 250
    20fa:	54 e4       	ldi	r21, 0x44	; 68
    20fc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2100:	dc 01       	movw	r26, r24
    2102:	cb 01       	movw	r24, r22
    2104:	8b a3       	std	Y+35, r24	; 0x23
    2106:	9c a3       	std	Y+36, r25	; 0x24
    2108:	ad a3       	std	Y+37, r26	; 0x25
    210a:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    210c:	6b a1       	ldd	r22, Y+35	; 0x23
    210e:	7c a1       	ldd	r23, Y+36	; 0x24
    2110:	8d a1       	ldd	r24, Y+37	; 0x25
    2112:	9e a1       	ldd	r25, Y+38	; 0x26
    2114:	20 e0       	ldi	r18, 0x00	; 0
    2116:	30 e0       	ldi	r19, 0x00	; 0
    2118:	40 e8       	ldi	r20, 0x80	; 128
    211a:	5f e3       	ldi	r21, 0x3F	; 63
    211c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2120:	88 23       	and	r24, r24
    2122:	2c f4       	brge	.+10     	; 0x212e <LCD_displayCharacter+0x16c>
		__ticks = 1;
    2124:	81 e0       	ldi	r24, 0x01	; 1
    2126:	90 e0       	ldi	r25, 0x00	; 0
    2128:	9a a3       	std	Y+34, r25	; 0x22
    212a:	89 a3       	std	Y+33, r24	; 0x21
    212c:	3f c0       	rjmp	.+126    	; 0x21ac <LCD_displayCharacter+0x1ea>
	else if (__tmp > 65535)
    212e:	6b a1       	ldd	r22, Y+35	; 0x23
    2130:	7c a1       	ldd	r23, Y+36	; 0x24
    2132:	8d a1       	ldd	r24, Y+37	; 0x25
    2134:	9e a1       	ldd	r25, Y+38	; 0x26
    2136:	20 e0       	ldi	r18, 0x00	; 0
    2138:	3f ef       	ldi	r19, 0xFF	; 255
    213a:	4f e7       	ldi	r20, 0x7F	; 127
    213c:	57 e4       	ldi	r21, 0x47	; 71
    213e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2142:	18 16       	cp	r1, r24
    2144:	4c f5       	brge	.+82     	; 0x2198 <LCD_displayCharacter+0x1d6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2146:	6f a1       	ldd	r22, Y+39	; 0x27
    2148:	78 a5       	ldd	r23, Y+40	; 0x28
    214a:	89 a5       	ldd	r24, Y+41	; 0x29
    214c:	9a a5       	ldd	r25, Y+42	; 0x2a
    214e:	20 e0       	ldi	r18, 0x00	; 0
    2150:	30 e0       	ldi	r19, 0x00	; 0
    2152:	40 e2       	ldi	r20, 0x20	; 32
    2154:	51 e4       	ldi	r21, 0x41	; 65
    2156:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    215a:	dc 01       	movw	r26, r24
    215c:	cb 01       	movw	r24, r22
    215e:	bc 01       	movw	r22, r24
    2160:	cd 01       	movw	r24, r26
    2162:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2166:	dc 01       	movw	r26, r24
    2168:	cb 01       	movw	r24, r22
    216a:	9a a3       	std	Y+34, r25	; 0x22
    216c:	89 a3       	std	Y+33, r24	; 0x21
    216e:	0f c0       	rjmp	.+30     	; 0x218e <LCD_displayCharacter+0x1cc>
    2170:	88 ec       	ldi	r24, 0xC8	; 200
    2172:	90 e0       	ldi	r25, 0x00	; 0
    2174:	98 a3       	std	Y+32, r25	; 0x20
    2176:	8f 8f       	std	Y+31, r24	; 0x1f
    2178:	8f 8d       	ldd	r24, Y+31	; 0x1f
    217a:	98 a1       	ldd	r25, Y+32	; 0x20
    217c:	01 97       	sbiw	r24, 0x01	; 1
    217e:	f1 f7       	brne	.-4      	; 0x217c <LCD_displayCharacter+0x1ba>
    2180:	98 a3       	std	Y+32, r25	; 0x20
    2182:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2184:	89 a1       	ldd	r24, Y+33	; 0x21
    2186:	9a a1       	ldd	r25, Y+34	; 0x22
    2188:	01 97       	sbiw	r24, 0x01	; 1
    218a:	9a a3       	std	Y+34, r25	; 0x22
    218c:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    218e:	89 a1       	ldd	r24, Y+33	; 0x21
    2190:	9a a1       	ldd	r25, Y+34	; 0x22
    2192:	00 97       	sbiw	r24, 0x00	; 0
    2194:	69 f7       	brne	.-38     	; 0x2170 <LCD_displayCharacter+0x1ae>
    2196:	14 c0       	rjmp	.+40     	; 0x21c0 <LCD_displayCharacter+0x1fe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2198:	6b a1       	ldd	r22, Y+35	; 0x23
    219a:	7c a1       	ldd	r23, Y+36	; 0x24
    219c:	8d a1       	ldd	r24, Y+37	; 0x25
    219e:	9e a1       	ldd	r25, Y+38	; 0x26
    21a0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21a4:	dc 01       	movw	r26, r24
    21a6:	cb 01       	movw	r24, r22
    21a8:	9a a3       	std	Y+34, r25	; 0x22
    21aa:	89 a3       	std	Y+33, r24	; 0x21
    21ac:	89 a1       	ldd	r24, Y+33	; 0x21
    21ae:	9a a1       	ldd	r25, Y+34	; 0x22
    21b0:	9e 8f       	std	Y+30, r25	; 0x1e
    21b2:	8d 8f       	std	Y+29, r24	; 0x1d
    21b4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    21b6:	9e 8d       	ldd	r25, Y+30	; 0x1e
    21b8:	01 97       	sbiw	r24, 0x01	; 1
    21ba:	f1 f7       	brne	.-4      	; 0x21b8 <LCD_displayCharacter+0x1f6>
    21bc:	9e 8f       	std	Y+30, r25	; 0x1e
    21be:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */

#elif (LCD_DATA_BITS_MODE == 8)
	GPIO_writePort(LCD_DATA_PORT_ID,data); /* out the required data to the data bus D0 --> D7 */
    21c0:	82 e0       	ldi	r24, 0x02	; 2
    21c2:	6a ad       	ldd	r22, Y+58	; 0x3a
    21c4:	0e 94 48 0c 	call	0x1890	; 0x1890 <GPIO_writePort>
    21c8:	80 e0       	ldi	r24, 0x00	; 0
    21ca:	90 e0       	ldi	r25, 0x00	; 0
    21cc:	a0 e8       	ldi	r26, 0x80	; 128
    21ce:	bf e3       	ldi	r27, 0x3F	; 63
    21d0:	89 8f       	std	Y+25, r24	; 0x19
    21d2:	9a 8f       	std	Y+26, r25	; 0x1a
    21d4:	ab 8f       	std	Y+27, r26	; 0x1b
    21d6:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    21d8:	69 8d       	ldd	r22, Y+25	; 0x19
    21da:	7a 8d       	ldd	r23, Y+26	; 0x1a
    21dc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    21de:	9c 8d       	ldd	r25, Y+28	; 0x1c
    21e0:	20 e0       	ldi	r18, 0x00	; 0
    21e2:	30 e0       	ldi	r19, 0x00	; 0
    21e4:	4a ef       	ldi	r20, 0xFA	; 250
    21e6:	54 e4       	ldi	r21, 0x44	; 68
    21e8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21ec:	dc 01       	movw	r26, r24
    21ee:	cb 01       	movw	r24, r22
    21f0:	8d 8b       	std	Y+21, r24	; 0x15
    21f2:	9e 8b       	std	Y+22, r25	; 0x16
    21f4:	af 8b       	std	Y+23, r26	; 0x17
    21f6:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    21f8:	6d 89       	ldd	r22, Y+21	; 0x15
    21fa:	7e 89       	ldd	r23, Y+22	; 0x16
    21fc:	8f 89       	ldd	r24, Y+23	; 0x17
    21fe:	98 8d       	ldd	r25, Y+24	; 0x18
    2200:	20 e0       	ldi	r18, 0x00	; 0
    2202:	30 e0       	ldi	r19, 0x00	; 0
    2204:	40 e8       	ldi	r20, 0x80	; 128
    2206:	5f e3       	ldi	r21, 0x3F	; 63
    2208:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    220c:	88 23       	and	r24, r24
    220e:	2c f4       	brge	.+10     	; 0x221a <LCD_displayCharacter+0x258>
		__ticks = 1;
    2210:	81 e0       	ldi	r24, 0x01	; 1
    2212:	90 e0       	ldi	r25, 0x00	; 0
    2214:	9c 8b       	std	Y+20, r25	; 0x14
    2216:	8b 8b       	std	Y+19, r24	; 0x13
    2218:	3f c0       	rjmp	.+126    	; 0x2298 <LCD_displayCharacter+0x2d6>
	else if (__tmp > 65535)
    221a:	6d 89       	ldd	r22, Y+21	; 0x15
    221c:	7e 89       	ldd	r23, Y+22	; 0x16
    221e:	8f 89       	ldd	r24, Y+23	; 0x17
    2220:	98 8d       	ldd	r25, Y+24	; 0x18
    2222:	20 e0       	ldi	r18, 0x00	; 0
    2224:	3f ef       	ldi	r19, 0xFF	; 255
    2226:	4f e7       	ldi	r20, 0x7F	; 127
    2228:	57 e4       	ldi	r21, 0x47	; 71
    222a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    222e:	18 16       	cp	r1, r24
    2230:	4c f5       	brge	.+82     	; 0x2284 <LCD_displayCharacter+0x2c2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2232:	69 8d       	ldd	r22, Y+25	; 0x19
    2234:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2236:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2238:	9c 8d       	ldd	r25, Y+28	; 0x1c
    223a:	20 e0       	ldi	r18, 0x00	; 0
    223c:	30 e0       	ldi	r19, 0x00	; 0
    223e:	40 e2       	ldi	r20, 0x20	; 32
    2240:	51 e4       	ldi	r21, 0x41	; 65
    2242:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2246:	dc 01       	movw	r26, r24
    2248:	cb 01       	movw	r24, r22
    224a:	bc 01       	movw	r22, r24
    224c:	cd 01       	movw	r24, r26
    224e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2252:	dc 01       	movw	r26, r24
    2254:	cb 01       	movw	r24, r22
    2256:	9c 8b       	std	Y+20, r25	; 0x14
    2258:	8b 8b       	std	Y+19, r24	; 0x13
    225a:	0f c0       	rjmp	.+30     	; 0x227a <LCD_displayCharacter+0x2b8>
    225c:	88 ec       	ldi	r24, 0xC8	; 200
    225e:	90 e0       	ldi	r25, 0x00	; 0
    2260:	9a 8b       	std	Y+18, r25	; 0x12
    2262:	89 8b       	std	Y+17, r24	; 0x11
    2264:	89 89       	ldd	r24, Y+17	; 0x11
    2266:	9a 89       	ldd	r25, Y+18	; 0x12
    2268:	01 97       	sbiw	r24, 0x01	; 1
    226a:	f1 f7       	brne	.-4      	; 0x2268 <LCD_displayCharacter+0x2a6>
    226c:	9a 8b       	std	Y+18, r25	; 0x12
    226e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2270:	8b 89       	ldd	r24, Y+19	; 0x13
    2272:	9c 89       	ldd	r25, Y+20	; 0x14
    2274:	01 97       	sbiw	r24, 0x01	; 1
    2276:	9c 8b       	std	Y+20, r25	; 0x14
    2278:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    227a:	8b 89       	ldd	r24, Y+19	; 0x13
    227c:	9c 89       	ldd	r25, Y+20	; 0x14
    227e:	00 97       	sbiw	r24, 0x00	; 0
    2280:	69 f7       	brne	.-38     	; 0x225c <LCD_displayCharacter+0x29a>
    2282:	14 c0       	rjmp	.+40     	; 0x22ac <LCD_displayCharacter+0x2ea>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2284:	6d 89       	ldd	r22, Y+21	; 0x15
    2286:	7e 89       	ldd	r23, Y+22	; 0x16
    2288:	8f 89       	ldd	r24, Y+23	; 0x17
    228a:	98 8d       	ldd	r25, Y+24	; 0x18
    228c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2290:	dc 01       	movw	r26, r24
    2292:	cb 01       	movw	r24, r22
    2294:	9c 8b       	std	Y+20, r25	; 0x14
    2296:	8b 8b       	std	Y+19, r24	; 0x13
    2298:	8b 89       	ldd	r24, Y+19	; 0x13
    229a:	9c 89       	ldd	r25, Y+20	; 0x14
    229c:	98 8b       	std	Y+16, r25	; 0x10
    229e:	8f 87       	std	Y+15, r24	; 0x0f
    22a0:	8f 85       	ldd	r24, Y+15	; 0x0f
    22a2:	98 89       	ldd	r25, Y+16	; 0x10
    22a4:	01 97       	sbiw	r24, 0x01	; 1
    22a6:	f1 f7       	brne	.-4      	; 0x22a4 <LCD_displayCharacter+0x2e2>
    22a8:	98 8b       	std	Y+16, r25	; 0x10
    22aa:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    22ac:	81 e0       	ldi	r24, 0x01	; 1
    22ae:	62 e0       	ldi	r22, 0x02	; 2
    22b0:	40 e0       	ldi	r20, 0x00	; 0
    22b2:	0e 94 7e 0a 	call	0x14fc	; 0x14fc <GPIO_writePin>
    22b6:	80 e0       	ldi	r24, 0x00	; 0
    22b8:	90 e0       	ldi	r25, 0x00	; 0
    22ba:	a0 e8       	ldi	r26, 0x80	; 128
    22bc:	bf e3       	ldi	r27, 0x3F	; 63
    22be:	8b 87       	std	Y+11, r24	; 0x0b
    22c0:	9c 87       	std	Y+12, r25	; 0x0c
    22c2:	ad 87       	std	Y+13, r26	; 0x0d
    22c4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    22c6:	6b 85       	ldd	r22, Y+11	; 0x0b
    22c8:	7c 85       	ldd	r23, Y+12	; 0x0c
    22ca:	8d 85       	ldd	r24, Y+13	; 0x0d
    22cc:	9e 85       	ldd	r25, Y+14	; 0x0e
    22ce:	20 e0       	ldi	r18, 0x00	; 0
    22d0:	30 e0       	ldi	r19, 0x00	; 0
    22d2:	4a ef       	ldi	r20, 0xFA	; 250
    22d4:	54 e4       	ldi	r21, 0x44	; 68
    22d6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22da:	dc 01       	movw	r26, r24
    22dc:	cb 01       	movw	r24, r22
    22de:	8f 83       	std	Y+7, r24	; 0x07
    22e0:	98 87       	std	Y+8, r25	; 0x08
    22e2:	a9 87       	std	Y+9, r26	; 0x09
    22e4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    22e6:	6f 81       	ldd	r22, Y+7	; 0x07
    22e8:	78 85       	ldd	r23, Y+8	; 0x08
    22ea:	89 85       	ldd	r24, Y+9	; 0x09
    22ec:	9a 85       	ldd	r25, Y+10	; 0x0a
    22ee:	20 e0       	ldi	r18, 0x00	; 0
    22f0:	30 e0       	ldi	r19, 0x00	; 0
    22f2:	40 e8       	ldi	r20, 0x80	; 128
    22f4:	5f e3       	ldi	r21, 0x3F	; 63
    22f6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    22fa:	88 23       	and	r24, r24
    22fc:	2c f4       	brge	.+10     	; 0x2308 <LCD_displayCharacter+0x346>
		__ticks = 1;
    22fe:	81 e0       	ldi	r24, 0x01	; 1
    2300:	90 e0       	ldi	r25, 0x00	; 0
    2302:	9e 83       	std	Y+6, r25	; 0x06
    2304:	8d 83       	std	Y+5, r24	; 0x05
    2306:	3f c0       	rjmp	.+126    	; 0x2386 <LCD_displayCharacter+0x3c4>
	else if (__tmp > 65535)
    2308:	6f 81       	ldd	r22, Y+7	; 0x07
    230a:	78 85       	ldd	r23, Y+8	; 0x08
    230c:	89 85       	ldd	r24, Y+9	; 0x09
    230e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2310:	20 e0       	ldi	r18, 0x00	; 0
    2312:	3f ef       	ldi	r19, 0xFF	; 255
    2314:	4f e7       	ldi	r20, 0x7F	; 127
    2316:	57 e4       	ldi	r21, 0x47	; 71
    2318:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    231c:	18 16       	cp	r1, r24
    231e:	4c f5       	brge	.+82     	; 0x2372 <LCD_displayCharacter+0x3b0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2320:	6b 85       	ldd	r22, Y+11	; 0x0b
    2322:	7c 85       	ldd	r23, Y+12	; 0x0c
    2324:	8d 85       	ldd	r24, Y+13	; 0x0d
    2326:	9e 85       	ldd	r25, Y+14	; 0x0e
    2328:	20 e0       	ldi	r18, 0x00	; 0
    232a:	30 e0       	ldi	r19, 0x00	; 0
    232c:	40 e2       	ldi	r20, 0x20	; 32
    232e:	51 e4       	ldi	r21, 0x41	; 65
    2330:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2334:	dc 01       	movw	r26, r24
    2336:	cb 01       	movw	r24, r22
    2338:	bc 01       	movw	r22, r24
    233a:	cd 01       	movw	r24, r26
    233c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2340:	dc 01       	movw	r26, r24
    2342:	cb 01       	movw	r24, r22
    2344:	9e 83       	std	Y+6, r25	; 0x06
    2346:	8d 83       	std	Y+5, r24	; 0x05
    2348:	0f c0       	rjmp	.+30     	; 0x2368 <LCD_displayCharacter+0x3a6>
    234a:	88 ec       	ldi	r24, 0xC8	; 200
    234c:	90 e0       	ldi	r25, 0x00	; 0
    234e:	9c 83       	std	Y+4, r25	; 0x04
    2350:	8b 83       	std	Y+3, r24	; 0x03
    2352:	8b 81       	ldd	r24, Y+3	; 0x03
    2354:	9c 81       	ldd	r25, Y+4	; 0x04
    2356:	01 97       	sbiw	r24, 0x01	; 1
    2358:	f1 f7       	brne	.-4      	; 0x2356 <LCD_displayCharacter+0x394>
    235a:	9c 83       	std	Y+4, r25	; 0x04
    235c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    235e:	8d 81       	ldd	r24, Y+5	; 0x05
    2360:	9e 81       	ldd	r25, Y+6	; 0x06
    2362:	01 97       	sbiw	r24, 0x01	; 1
    2364:	9e 83       	std	Y+6, r25	; 0x06
    2366:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2368:	8d 81       	ldd	r24, Y+5	; 0x05
    236a:	9e 81       	ldd	r25, Y+6	; 0x06
    236c:	00 97       	sbiw	r24, 0x00	; 0
    236e:	69 f7       	brne	.-38     	; 0x234a <LCD_displayCharacter+0x388>
    2370:	14 c0       	rjmp	.+40     	; 0x239a <LCD_displayCharacter+0x3d8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2372:	6f 81       	ldd	r22, Y+7	; 0x07
    2374:	78 85       	ldd	r23, Y+8	; 0x08
    2376:	89 85       	ldd	r24, Y+9	; 0x09
    2378:	9a 85       	ldd	r25, Y+10	; 0x0a
    237a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    237e:	dc 01       	movw	r26, r24
    2380:	cb 01       	movw	r24, r22
    2382:	9e 83       	std	Y+6, r25	; 0x06
    2384:	8d 83       	std	Y+5, r24	; 0x05
    2386:	8d 81       	ldd	r24, Y+5	; 0x05
    2388:	9e 81       	ldd	r25, Y+6	; 0x06
    238a:	9a 83       	std	Y+2, r25	; 0x02
    238c:	89 83       	std	Y+1, r24	; 0x01
    238e:	89 81       	ldd	r24, Y+1	; 0x01
    2390:	9a 81       	ldd	r25, Y+2	; 0x02
    2392:	01 97       	sbiw	r24, 0x01	; 1
    2394:	f1 f7       	brne	.-4      	; 0x2392 <LCD_displayCharacter+0x3d0>
    2396:	9a 83       	std	Y+2, r25	; 0x02
    2398:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    239a:	ea 96       	adiw	r28, 0x3a	; 58
    239c:	0f b6       	in	r0, 0x3f	; 63
    239e:	f8 94       	cli
    23a0:	de bf       	out	0x3e, r29	; 62
    23a2:	0f be       	out	0x3f, r0	; 63
    23a4:	cd bf       	out	0x3d, r28	; 61
    23a6:	cf 91       	pop	r28
    23a8:	df 91       	pop	r29
    23aa:	08 95       	ret

000023ac <LCD_displayString>:
/*
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
    23ac:	df 93       	push	r29
    23ae:	cf 93       	push	r28
    23b0:	00 d0       	rcall	.+0      	; 0x23b2 <LCD_displayString+0x6>
    23b2:	0f 92       	push	r0
    23b4:	cd b7       	in	r28, 0x3d	; 61
    23b6:	de b7       	in	r29, 0x3e	; 62
    23b8:	9b 83       	std	Y+3, r25	; 0x03
    23ba:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    23bc:	19 82       	std	Y+1, r1	; 0x01
    23be:	0e c0       	rjmp	.+28     	; 0x23dc <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    23c0:	89 81       	ldd	r24, Y+1	; 0x01
    23c2:	28 2f       	mov	r18, r24
    23c4:	30 e0       	ldi	r19, 0x00	; 0
    23c6:	8a 81       	ldd	r24, Y+2	; 0x02
    23c8:	9b 81       	ldd	r25, Y+3	; 0x03
    23ca:	fc 01       	movw	r30, r24
    23cc:	e2 0f       	add	r30, r18
    23ce:	f3 1f       	adc	r31, r19
    23d0:	80 81       	ld	r24, Z
    23d2:	0e 94 e1 0f 	call	0x1fc2	; 0x1fc2 <LCD_displayCharacter>
		i++;
    23d6:	89 81       	ldd	r24, Y+1	; 0x01
    23d8:	8f 5f       	subi	r24, 0xFF	; 255
    23da:	89 83       	std	Y+1, r24	; 0x01
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    23dc:	89 81       	ldd	r24, Y+1	; 0x01
    23de:	28 2f       	mov	r18, r24
    23e0:	30 e0       	ldi	r19, 0x00	; 0
    23e2:	8a 81       	ldd	r24, Y+2	; 0x02
    23e4:	9b 81       	ldd	r25, Y+3	; 0x03
    23e6:	fc 01       	movw	r30, r24
    23e8:	e2 0f       	add	r30, r18
    23ea:	f3 1f       	adc	r31, r19
    23ec:	80 81       	ld	r24, Z
    23ee:	88 23       	and	r24, r24
    23f0:	39 f7       	brne	.-50     	; 0x23c0 <LCD_displayString+0x14>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}		
	*********************************************************/
}
    23f2:	0f 90       	pop	r0
    23f4:	0f 90       	pop	r0
    23f6:	0f 90       	pop	r0
    23f8:	cf 91       	pop	r28
    23fa:	df 91       	pop	r29
    23fc:	08 95       	ret

000023fe <LCD_moveCursor>:
/*
 * Description :
 * Move the cursor to a specified row and column index on the screen
 */
void LCD_moveCursor(uint8 row,uint8 col)
{
    23fe:	df 93       	push	r29
    2400:	cf 93       	push	r28
    2402:	00 d0       	rcall	.+0      	; 0x2404 <LCD_moveCursor+0x6>
    2404:	00 d0       	rcall	.+0      	; 0x2406 <LCD_moveCursor+0x8>
    2406:	0f 92       	push	r0
    2408:	cd b7       	in	r28, 0x3d	; 61
    240a:	de b7       	in	r29, 0x3e	; 62
    240c:	8a 83       	std	Y+2, r24	; 0x02
    240e:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memory_address;
	
	/* Calculate the required address in the LCD DDRAM */
	switch(row)
    2410:	8a 81       	ldd	r24, Y+2	; 0x02
    2412:	28 2f       	mov	r18, r24
    2414:	30 e0       	ldi	r19, 0x00	; 0
    2416:	3d 83       	std	Y+5, r19	; 0x05
    2418:	2c 83       	std	Y+4, r18	; 0x04
    241a:	8c 81       	ldd	r24, Y+4	; 0x04
    241c:	9d 81       	ldd	r25, Y+5	; 0x05
    241e:	81 30       	cpi	r24, 0x01	; 1
    2420:	91 05       	cpc	r25, r1
    2422:	c1 f0       	breq	.+48     	; 0x2454 <LCD_moveCursor+0x56>
    2424:	2c 81       	ldd	r18, Y+4	; 0x04
    2426:	3d 81       	ldd	r19, Y+5	; 0x05
    2428:	22 30       	cpi	r18, 0x02	; 2
    242a:	31 05       	cpc	r19, r1
    242c:	2c f4       	brge	.+10     	; 0x2438 <LCD_moveCursor+0x3a>
    242e:	8c 81       	ldd	r24, Y+4	; 0x04
    2430:	9d 81       	ldd	r25, Y+5	; 0x05
    2432:	00 97       	sbiw	r24, 0x00	; 0
    2434:	61 f0       	breq	.+24     	; 0x244e <LCD_moveCursor+0x50>
    2436:	19 c0       	rjmp	.+50     	; 0x246a <LCD_moveCursor+0x6c>
    2438:	2c 81       	ldd	r18, Y+4	; 0x04
    243a:	3d 81       	ldd	r19, Y+5	; 0x05
    243c:	22 30       	cpi	r18, 0x02	; 2
    243e:	31 05       	cpc	r19, r1
    2440:	69 f0       	breq	.+26     	; 0x245c <LCD_moveCursor+0x5e>
    2442:	8c 81       	ldd	r24, Y+4	; 0x04
    2444:	9d 81       	ldd	r25, Y+5	; 0x05
    2446:	83 30       	cpi	r24, 0x03	; 3
    2448:	91 05       	cpc	r25, r1
    244a:	61 f0       	breq	.+24     	; 0x2464 <LCD_moveCursor+0x66>
    244c:	0e c0       	rjmp	.+28     	; 0x246a <LCD_moveCursor+0x6c>
	{
		case 0:
			lcd_memory_address=col;
    244e:	8b 81       	ldd	r24, Y+3	; 0x03
    2450:	89 83       	std	Y+1, r24	; 0x01
    2452:	0b c0       	rjmp	.+22     	; 0x246a <LCD_moveCursor+0x6c>
				break;
		case 1:
			lcd_memory_address=col+0x40;
    2454:	8b 81       	ldd	r24, Y+3	; 0x03
    2456:	80 5c       	subi	r24, 0xC0	; 192
    2458:	89 83       	std	Y+1, r24	; 0x01
    245a:	07 c0       	rjmp	.+14     	; 0x246a <LCD_moveCursor+0x6c>
				break;
		case 2:
			lcd_memory_address=col+0x10;
    245c:	8b 81       	ldd	r24, Y+3	; 0x03
    245e:	80 5f       	subi	r24, 0xF0	; 240
    2460:	89 83       	std	Y+1, r24	; 0x01
    2462:	03 c0       	rjmp	.+6      	; 0x246a <LCD_moveCursor+0x6c>
				break;
		case 3:
			lcd_memory_address=col+0x50;
    2464:	8b 81       	ldd	r24, Y+3	; 0x03
    2466:	80 5b       	subi	r24, 0xB0	; 176
    2468:	89 83       	std	Y+1, r24	; 0x01
				break;

	}					
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
    246a:	89 81       	ldd	r24, Y+1	; 0x01
    246c:	80 68       	ori	r24, 0x80	; 128
    246e:	0e 94 ec 0d 	call	0x1bd8	; 0x1bd8 <LCD_sendCommand>
}
    2472:	0f 90       	pop	r0
    2474:	0f 90       	pop	r0
    2476:	0f 90       	pop	r0
    2478:	0f 90       	pop	r0
    247a:	0f 90       	pop	r0
    247c:	cf 91       	pop	r28
    247e:	df 91       	pop	r29
    2480:	08 95       	ret

00002482 <LCD_displayStringRowColumn>:
/*
 * Description :
 * Display the required string in a specified row and column index on the screen
 */
void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    2482:	df 93       	push	r29
    2484:	cf 93       	push	r28
    2486:	00 d0       	rcall	.+0      	; 0x2488 <LCD_displayStringRowColumn+0x6>
    2488:	00 d0       	rcall	.+0      	; 0x248a <LCD_displayStringRowColumn+0x8>
    248a:	cd b7       	in	r28, 0x3d	; 61
    248c:	de b7       	in	r29, 0x3e	; 62
    248e:	89 83       	std	Y+1, r24	; 0x01
    2490:	6a 83       	std	Y+2, r22	; 0x02
    2492:	5c 83       	std	Y+4, r21	; 0x04
    2494:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row,col); /* go to to the required LCD position */
    2496:	89 81       	ldd	r24, Y+1	; 0x01
    2498:	6a 81       	ldd	r22, Y+2	; 0x02
    249a:	0e 94 ff 11 	call	0x23fe	; 0x23fe <LCD_moveCursor>
	LCD_displayString(Str); /* display the string */
    249e:	8b 81       	ldd	r24, Y+3	; 0x03
    24a0:	9c 81       	ldd	r25, Y+4	; 0x04
    24a2:	0e 94 d6 11 	call	0x23ac	; 0x23ac <LCD_displayString>
}
    24a6:	0f 90       	pop	r0
    24a8:	0f 90       	pop	r0
    24aa:	0f 90       	pop	r0
    24ac:	0f 90       	pop	r0
    24ae:	cf 91       	pop	r28
    24b0:	df 91       	pop	r29
    24b2:	08 95       	ret

000024b4 <LCD_intgerToString>:
/*
 * Description :
 * Display the required decimal value on the screen
 */
void LCD_intgerToString(int data)
{
    24b4:	df 93       	push	r29
    24b6:	cf 93       	push	r28
    24b8:	cd b7       	in	r28, 0x3d	; 61
    24ba:	de b7       	in	r29, 0x3e	; 62
    24bc:	62 97       	sbiw	r28, 0x12	; 18
    24be:	0f b6       	in	r0, 0x3f	; 63
    24c0:	f8 94       	cli
    24c2:	de bf       	out	0x3e, r29	; 62
    24c4:	0f be       	out	0x3f, r0	; 63
    24c6:	cd bf       	out	0x3d, r28	; 61
    24c8:	9a 8b       	std	Y+18, r25	; 0x12
    24ca:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    24cc:	89 89       	ldd	r24, Y+17	; 0x11
    24ce:	9a 89       	ldd	r25, Y+18	; 0x12
    24d0:	9e 01       	movw	r18, r28
    24d2:	2f 5f       	subi	r18, 0xFF	; 255
    24d4:	3f 4f       	sbci	r19, 0xFF	; 255
    24d6:	b9 01       	movw	r22, r18
    24d8:	4a e0       	ldi	r20, 0x0A	; 10
    24da:	50 e0       	ldi	r21, 0x00	; 0
    24dc:	0e 94 b6 17 	call	0x2f6c	; 0x2f6c <itoa>
   LCD_displayString(buff); /* Display the string */
    24e0:	ce 01       	movw	r24, r28
    24e2:	01 96       	adiw	r24, 0x01	; 1
    24e4:	0e 94 d6 11 	call	0x23ac	; 0x23ac <LCD_displayString>
}
    24e8:	62 96       	adiw	r28, 0x12	; 18
    24ea:	0f b6       	in	r0, 0x3f	; 63
    24ec:	f8 94       	cli
    24ee:	de bf       	out	0x3e, r29	; 62
    24f0:	0f be       	out	0x3f, r0	; 63
    24f2:	cd bf       	out	0x3d, r28	; 61
    24f4:	cf 91       	pop	r28
    24f6:	df 91       	pop	r29
    24f8:	08 95       	ret

000024fa <LCD_clearScreen>:
/*
 * Description :
 * Send the clear screen command
 */
void LCD_clearScreen(void)
{
    24fa:	df 93       	push	r29
    24fc:	cf 93       	push	r28
    24fe:	cd b7       	in	r28, 0x3d	; 61
    2500:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* Send clear display command */
    2502:	81 e0       	ldi	r24, 0x01	; 1
    2504:	0e 94 ec 0d 	call	0x1bd8	; 0x1bd8 <LCD_sendCommand>
}
    2508:	cf 91       	pop	r28
    250a:	df 91       	pop	r29
    250c:	08 95       	ret

0000250e <__vector_19>:

static volatile void (*g_callBackPtr2)(void) = NULL_PTR;

ISR (TIMER0_COMP_vect)

{
    250e:	1f 92       	push	r1
    2510:	0f 92       	push	r0
    2512:	0f b6       	in	r0, 0x3f	; 63
    2514:	0f 92       	push	r0
    2516:	11 24       	eor	r1, r1
    2518:	2f 93       	push	r18
    251a:	3f 93       	push	r19
    251c:	4f 93       	push	r20
    251e:	5f 93       	push	r21
    2520:	6f 93       	push	r22
    2522:	7f 93       	push	r23
    2524:	8f 93       	push	r24
    2526:	9f 93       	push	r25
    2528:	af 93       	push	r26
    252a:	bf 93       	push	r27
    252c:	ef 93       	push	r30
    252e:	ff 93       	push	r31
    2530:	df 93       	push	r29
    2532:	cf 93       	push	r28
    2534:	cd b7       	in	r28, 0x3d	; 61
    2536:	de b7       	in	r29, 0x3e	; 62
	if (g_callBackPtr0 != NULL_PTR)
    2538:	80 91 8c 01 	lds	r24, 0x018C
    253c:	90 91 8d 01 	lds	r25, 0x018D
    2540:	00 97       	sbiw	r24, 0x00	; 0
    2542:	29 f0       	breq	.+10     	; 0x254e <__vector_19+0x40>
	{
		(*g_callBackPtr0)();
    2544:	e0 91 8c 01 	lds	r30, 0x018C
    2548:	f0 91 8d 01 	lds	r31, 0x018D
    254c:	09 95       	icall
	}
}
    254e:	cf 91       	pop	r28
    2550:	df 91       	pop	r29
    2552:	ff 91       	pop	r31
    2554:	ef 91       	pop	r30
    2556:	bf 91       	pop	r27
    2558:	af 91       	pop	r26
    255a:	9f 91       	pop	r25
    255c:	8f 91       	pop	r24
    255e:	7f 91       	pop	r23
    2560:	6f 91       	pop	r22
    2562:	5f 91       	pop	r21
    2564:	4f 91       	pop	r20
    2566:	3f 91       	pop	r19
    2568:	2f 91       	pop	r18
    256a:	0f 90       	pop	r0
    256c:	0f be       	out	0x3f, r0	; 63
    256e:	0f 90       	pop	r0
    2570:	1f 90       	pop	r1
    2572:	18 95       	reti

00002574 <__vector_9>:

ISR (TIMER0_OVF_vect)

{
    2574:	1f 92       	push	r1
    2576:	0f 92       	push	r0
    2578:	0f b6       	in	r0, 0x3f	; 63
    257a:	0f 92       	push	r0
    257c:	11 24       	eor	r1, r1
    257e:	2f 93       	push	r18
    2580:	3f 93       	push	r19
    2582:	4f 93       	push	r20
    2584:	5f 93       	push	r21
    2586:	6f 93       	push	r22
    2588:	7f 93       	push	r23
    258a:	8f 93       	push	r24
    258c:	9f 93       	push	r25
    258e:	af 93       	push	r26
    2590:	bf 93       	push	r27
    2592:	ef 93       	push	r30
    2594:	ff 93       	push	r31
    2596:	df 93       	push	r29
    2598:	cf 93       	push	r28
    259a:	cd b7       	in	r28, 0x3d	; 61
    259c:	de b7       	in	r29, 0x3e	; 62
	if (g_callBackPtr0 != NULL_PTR)
    259e:	80 91 8c 01 	lds	r24, 0x018C
    25a2:	90 91 8d 01 	lds	r25, 0x018D
    25a6:	00 97       	sbiw	r24, 0x00	; 0
    25a8:	29 f0       	breq	.+10     	; 0x25b4 <__vector_9+0x40>
	{
		(*g_callBackPtr0)();
    25aa:	e0 91 8c 01 	lds	r30, 0x018C
    25ae:	f0 91 8d 01 	lds	r31, 0x018D
    25b2:	09 95       	icall
	}
}
    25b4:	cf 91       	pop	r28
    25b6:	df 91       	pop	r29
    25b8:	ff 91       	pop	r31
    25ba:	ef 91       	pop	r30
    25bc:	bf 91       	pop	r27
    25be:	af 91       	pop	r26
    25c0:	9f 91       	pop	r25
    25c2:	8f 91       	pop	r24
    25c4:	7f 91       	pop	r23
    25c6:	6f 91       	pop	r22
    25c8:	5f 91       	pop	r21
    25ca:	4f 91       	pop	r20
    25cc:	3f 91       	pop	r19
    25ce:	2f 91       	pop	r18
    25d0:	0f 90       	pop	r0
    25d2:	0f be       	out	0x3f, r0	; 63
    25d4:	0f 90       	pop	r0
    25d6:	1f 90       	pop	r1
    25d8:	18 95       	reti

000025da <__vector_6>:

ISR (TIMER1_COMPA_vect)

{
    25da:	1f 92       	push	r1
    25dc:	0f 92       	push	r0
    25de:	0f b6       	in	r0, 0x3f	; 63
    25e0:	0f 92       	push	r0
    25e2:	11 24       	eor	r1, r1
    25e4:	2f 93       	push	r18
    25e6:	3f 93       	push	r19
    25e8:	4f 93       	push	r20
    25ea:	5f 93       	push	r21
    25ec:	6f 93       	push	r22
    25ee:	7f 93       	push	r23
    25f0:	8f 93       	push	r24
    25f2:	9f 93       	push	r25
    25f4:	af 93       	push	r26
    25f6:	bf 93       	push	r27
    25f8:	ef 93       	push	r30
    25fa:	ff 93       	push	r31
    25fc:	df 93       	push	r29
    25fe:	cf 93       	push	r28
    2600:	cd b7       	in	r28, 0x3d	; 61
    2602:	de b7       	in	r29, 0x3e	; 62
	if (g_callBackPtr1 != NULL_PTR)
    2604:	80 91 8e 01 	lds	r24, 0x018E
    2608:	90 91 8f 01 	lds	r25, 0x018F
    260c:	00 97       	sbiw	r24, 0x00	; 0
    260e:	29 f0       	breq	.+10     	; 0x261a <__vector_6+0x40>
	{
		(*g_callBackPtr1)();
    2610:	e0 91 8e 01 	lds	r30, 0x018E
    2614:	f0 91 8f 01 	lds	r31, 0x018F
    2618:	09 95       	icall
	}
}
    261a:	cf 91       	pop	r28
    261c:	df 91       	pop	r29
    261e:	ff 91       	pop	r31
    2620:	ef 91       	pop	r30
    2622:	bf 91       	pop	r27
    2624:	af 91       	pop	r26
    2626:	9f 91       	pop	r25
    2628:	8f 91       	pop	r24
    262a:	7f 91       	pop	r23
    262c:	6f 91       	pop	r22
    262e:	5f 91       	pop	r21
    2630:	4f 91       	pop	r20
    2632:	3f 91       	pop	r19
    2634:	2f 91       	pop	r18
    2636:	0f 90       	pop	r0
    2638:	0f be       	out	0x3f, r0	; 63
    263a:	0f 90       	pop	r0
    263c:	1f 90       	pop	r1
    263e:	18 95       	reti

00002640 <__vector_7>:

ISR (TIMER1_COMPB_vect)

{
    2640:	1f 92       	push	r1
    2642:	0f 92       	push	r0
    2644:	0f b6       	in	r0, 0x3f	; 63
    2646:	0f 92       	push	r0
    2648:	11 24       	eor	r1, r1
    264a:	2f 93       	push	r18
    264c:	3f 93       	push	r19
    264e:	4f 93       	push	r20
    2650:	5f 93       	push	r21
    2652:	6f 93       	push	r22
    2654:	7f 93       	push	r23
    2656:	8f 93       	push	r24
    2658:	9f 93       	push	r25
    265a:	af 93       	push	r26
    265c:	bf 93       	push	r27
    265e:	ef 93       	push	r30
    2660:	ff 93       	push	r31
    2662:	df 93       	push	r29
    2664:	cf 93       	push	r28
    2666:	cd b7       	in	r28, 0x3d	; 61
    2668:	de b7       	in	r29, 0x3e	; 62
	if (g_callBackPtr1 != NULL_PTR)
    266a:	80 91 8e 01 	lds	r24, 0x018E
    266e:	90 91 8f 01 	lds	r25, 0x018F
    2672:	00 97       	sbiw	r24, 0x00	; 0
    2674:	29 f0       	breq	.+10     	; 0x2680 <__vector_7+0x40>
	{
		(*g_callBackPtr1)();
    2676:	e0 91 8e 01 	lds	r30, 0x018E
    267a:	f0 91 8f 01 	lds	r31, 0x018F
    267e:	09 95       	icall
	}
}
    2680:	cf 91       	pop	r28
    2682:	df 91       	pop	r29
    2684:	ff 91       	pop	r31
    2686:	ef 91       	pop	r30
    2688:	bf 91       	pop	r27
    268a:	af 91       	pop	r26
    268c:	9f 91       	pop	r25
    268e:	8f 91       	pop	r24
    2690:	7f 91       	pop	r23
    2692:	6f 91       	pop	r22
    2694:	5f 91       	pop	r21
    2696:	4f 91       	pop	r20
    2698:	3f 91       	pop	r19
    269a:	2f 91       	pop	r18
    269c:	0f 90       	pop	r0
    269e:	0f be       	out	0x3f, r0	; 63
    26a0:	0f 90       	pop	r0
    26a2:	1f 90       	pop	r1
    26a4:	18 95       	reti

000026a6 <__vector_8>:

ISR (TIMER1_OVF_vect)

{
    26a6:	1f 92       	push	r1
    26a8:	0f 92       	push	r0
    26aa:	0f b6       	in	r0, 0x3f	; 63
    26ac:	0f 92       	push	r0
    26ae:	11 24       	eor	r1, r1
    26b0:	2f 93       	push	r18
    26b2:	3f 93       	push	r19
    26b4:	4f 93       	push	r20
    26b6:	5f 93       	push	r21
    26b8:	6f 93       	push	r22
    26ba:	7f 93       	push	r23
    26bc:	8f 93       	push	r24
    26be:	9f 93       	push	r25
    26c0:	af 93       	push	r26
    26c2:	bf 93       	push	r27
    26c4:	ef 93       	push	r30
    26c6:	ff 93       	push	r31
    26c8:	df 93       	push	r29
    26ca:	cf 93       	push	r28
    26cc:	cd b7       	in	r28, 0x3d	; 61
    26ce:	de b7       	in	r29, 0x3e	; 62
	if (g_callBackPtr1 != NULL_PTR)
    26d0:	80 91 8e 01 	lds	r24, 0x018E
    26d4:	90 91 8f 01 	lds	r25, 0x018F
    26d8:	00 97       	sbiw	r24, 0x00	; 0
    26da:	29 f0       	breq	.+10     	; 0x26e6 <__vector_8+0x40>
	{
		(*g_callBackPtr1)();
    26dc:	e0 91 8e 01 	lds	r30, 0x018E
    26e0:	f0 91 8f 01 	lds	r31, 0x018F
    26e4:	09 95       	icall
	}
}
    26e6:	cf 91       	pop	r28
    26e8:	df 91       	pop	r29
    26ea:	ff 91       	pop	r31
    26ec:	ef 91       	pop	r30
    26ee:	bf 91       	pop	r27
    26f0:	af 91       	pop	r26
    26f2:	9f 91       	pop	r25
    26f4:	8f 91       	pop	r24
    26f6:	7f 91       	pop	r23
    26f8:	6f 91       	pop	r22
    26fa:	5f 91       	pop	r21
    26fc:	4f 91       	pop	r20
    26fe:	3f 91       	pop	r19
    2700:	2f 91       	pop	r18
    2702:	0f 90       	pop	r0
    2704:	0f be       	out	0x3f, r0	; 63
    2706:	0f 90       	pop	r0
    2708:	1f 90       	pop	r1
    270a:	18 95       	reti

0000270c <__vector_3>:

ISR (TIMER2_COMP_vect)

{
    270c:	1f 92       	push	r1
    270e:	0f 92       	push	r0
    2710:	0f b6       	in	r0, 0x3f	; 63
    2712:	0f 92       	push	r0
    2714:	11 24       	eor	r1, r1
    2716:	2f 93       	push	r18
    2718:	3f 93       	push	r19
    271a:	4f 93       	push	r20
    271c:	5f 93       	push	r21
    271e:	6f 93       	push	r22
    2720:	7f 93       	push	r23
    2722:	8f 93       	push	r24
    2724:	9f 93       	push	r25
    2726:	af 93       	push	r26
    2728:	bf 93       	push	r27
    272a:	ef 93       	push	r30
    272c:	ff 93       	push	r31
    272e:	df 93       	push	r29
    2730:	cf 93       	push	r28
    2732:	cd b7       	in	r28, 0x3d	; 61
    2734:	de b7       	in	r29, 0x3e	; 62
	if (g_callBackPtr2 != NULL_PTR)
    2736:	80 91 90 01 	lds	r24, 0x0190
    273a:	90 91 91 01 	lds	r25, 0x0191
    273e:	00 97       	sbiw	r24, 0x00	; 0
    2740:	29 f0       	breq	.+10     	; 0x274c <__vector_3+0x40>
	{
		(*g_callBackPtr2)();
    2742:	e0 91 90 01 	lds	r30, 0x0190
    2746:	f0 91 91 01 	lds	r31, 0x0191
    274a:	09 95       	icall
	}
}
    274c:	cf 91       	pop	r28
    274e:	df 91       	pop	r29
    2750:	ff 91       	pop	r31
    2752:	ef 91       	pop	r30
    2754:	bf 91       	pop	r27
    2756:	af 91       	pop	r26
    2758:	9f 91       	pop	r25
    275a:	8f 91       	pop	r24
    275c:	7f 91       	pop	r23
    275e:	6f 91       	pop	r22
    2760:	5f 91       	pop	r21
    2762:	4f 91       	pop	r20
    2764:	3f 91       	pop	r19
    2766:	2f 91       	pop	r18
    2768:	0f 90       	pop	r0
    276a:	0f be       	out	0x3f, r0	; 63
    276c:	0f 90       	pop	r0
    276e:	1f 90       	pop	r1
    2770:	18 95       	reti

00002772 <__vector_4>:

ISR (TIMER2_OVF_vect)

{
    2772:	1f 92       	push	r1
    2774:	0f 92       	push	r0
    2776:	0f b6       	in	r0, 0x3f	; 63
    2778:	0f 92       	push	r0
    277a:	11 24       	eor	r1, r1
    277c:	2f 93       	push	r18
    277e:	3f 93       	push	r19
    2780:	4f 93       	push	r20
    2782:	5f 93       	push	r21
    2784:	6f 93       	push	r22
    2786:	7f 93       	push	r23
    2788:	8f 93       	push	r24
    278a:	9f 93       	push	r25
    278c:	af 93       	push	r26
    278e:	bf 93       	push	r27
    2790:	ef 93       	push	r30
    2792:	ff 93       	push	r31
    2794:	df 93       	push	r29
    2796:	cf 93       	push	r28
    2798:	cd b7       	in	r28, 0x3d	; 61
    279a:	de b7       	in	r29, 0x3e	; 62
	if (g_callBackPtr2 != NULL_PTR)
    279c:	80 91 90 01 	lds	r24, 0x0190
    27a0:	90 91 91 01 	lds	r25, 0x0191
    27a4:	00 97       	sbiw	r24, 0x00	; 0
    27a6:	29 f0       	breq	.+10     	; 0x27b2 <__vector_4+0x40>
	{
		(*g_callBackPtr2)();
    27a8:	e0 91 90 01 	lds	r30, 0x0190
    27ac:	f0 91 91 01 	lds	r31, 0x0191
    27b0:	09 95       	icall
	}
}
    27b2:	cf 91       	pop	r28
    27b4:	df 91       	pop	r29
    27b6:	ff 91       	pop	r31
    27b8:	ef 91       	pop	r30
    27ba:	bf 91       	pop	r27
    27bc:	af 91       	pop	r26
    27be:	9f 91       	pop	r25
    27c0:	8f 91       	pop	r24
    27c2:	7f 91       	pop	r23
    27c4:	6f 91       	pop	r22
    27c6:	5f 91       	pop	r21
    27c8:	4f 91       	pop	r20
    27ca:	3f 91       	pop	r19
    27cc:	2f 91       	pop	r18
    27ce:	0f 90       	pop	r0
    27d0:	0f be       	out	0x3f, r0	; 63
    27d2:	0f 90       	pop	r0
    27d4:	1f 90       	pop	r1
    27d6:	18 95       	reti

000027d8 <Timer_Init>:

void Timer_Init (uint8 TimerNumber,const Timer_Config *config_Ptr )
{
    27d8:	df 93       	push	r29
    27da:	cf 93       	push	r28
    27dc:	00 d0       	rcall	.+0      	; 0x27de <Timer_Init+0x6>
    27de:	0f 92       	push	r0
    27e0:	cd b7       	in	r28, 0x3d	; 61
    27e2:	de b7       	in	r29, 0x3e	; 62
    27e4:	89 83       	std	Y+1, r24	; 0x01
    27e6:	7b 83       	std	Y+3, r23	; 0x03
    27e8:	6a 83       	std	Y+2, r22	; 0x02
	if (TimerNumber == Timer0)
    27ea:	89 81       	ldd	r24, Y+1	; 0x01
    27ec:	88 23       	and	r24, r24
    27ee:	09 f0       	breq	.+2      	; 0x27f2 <Timer_Init+0x1a>
    27f0:	6e c0       	rjmp	.+220    	; 0x28ce <Timer_Init+0xf6>
	{
		TCNT0 = config_Ptr ->Init_Timer_Value;
    27f2:	a2 e5       	ldi	r26, 0x52	; 82
    27f4:	b0 e0       	ldi	r27, 0x00	; 0
    27f6:	ea 81       	ldd	r30, Y+2	; 0x02
    27f8:	fb 81       	ldd	r31, Y+3	; 0x03
    27fa:	84 81       	ldd	r24, Z+4	; 0x04
    27fc:	8c 93       	st	X, r24

		TCCR0 =  (TCCR0 & 0xF8) | (config_Ptr ->prescaler);
    27fe:	a3 e5       	ldi	r26, 0x53	; 83
    2800:	b0 e0       	ldi	r27, 0x00	; 0
    2802:	e3 e5       	ldi	r30, 0x53	; 83
    2804:	f0 e0       	ldi	r31, 0x00	; 0
    2806:	80 81       	ld	r24, Z
    2808:	98 2f       	mov	r25, r24
    280a:	98 7f       	andi	r25, 0xF8	; 248
    280c:	ea 81       	ldd	r30, Y+2	; 0x02
    280e:	fb 81       	ldd	r31, Y+3	; 0x03
    2810:	81 81       	ldd	r24, Z+1	; 0x01
    2812:	89 2b       	or	r24, r25
    2814:	8c 93       	st	X, r24

		SET_BIT( TCCR0, FOC0);
    2816:	a3 e5       	ldi	r26, 0x53	; 83
    2818:	b0 e0       	ldi	r27, 0x00	; 0
    281a:	e3 e5       	ldi	r30, 0x53	; 83
    281c:	f0 e0       	ldi	r31, 0x00	; 0
    281e:	80 81       	ld	r24, Z
    2820:	80 68       	ori	r24, 0x80	; 128
    2822:	8c 93       	st	X, r24


		if ((config_Ptr ->mode) == Normal)
    2824:	ea 81       	ldd	r30, Y+2	; 0x02
    2826:	fb 81       	ldd	r31, Y+3	; 0x03
    2828:	80 81       	ld	r24, Z
    282a:	88 23       	and	r24, r24
    282c:	b1 f4       	brne	.+44     	; 0x285a <Timer_Init+0x82>
		{
			CLEAR_BIT( TCCR0, WGM00);
    282e:	a3 e5       	ldi	r26, 0x53	; 83
    2830:	b0 e0       	ldi	r27, 0x00	; 0
    2832:	e3 e5       	ldi	r30, 0x53	; 83
    2834:	f0 e0       	ldi	r31, 0x00	; 0
    2836:	80 81       	ld	r24, Z
    2838:	8f 7b       	andi	r24, 0xBF	; 191
    283a:	8c 93       	st	X, r24

			CLEAR_BIT( TCCR0, WGM01);
    283c:	a3 e5       	ldi	r26, 0x53	; 83
    283e:	b0 e0       	ldi	r27, 0x00	; 0
    2840:	e3 e5       	ldi	r30, 0x53	; 83
    2842:	f0 e0       	ldi	r31, 0x00	; 0
    2844:	80 81       	ld	r24, Z
    2846:	87 7f       	andi	r24, 0xF7	; 247
    2848:	8c 93       	st	X, r24

			SET_BIT (TIMSK , TOIE0);
    284a:	a9 e5       	ldi	r26, 0x59	; 89
    284c:	b0 e0       	ldi	r27, 0x00	; 0
    284e:	e9 e5       	ldi	r30, 0x59	; 89
    2850:	f0 e0       	ldi	r31, 0x00	; 0
    2852:	80 81       	ld	r24, Z
    2854:	81 60       	ori	r24, 0x01	; 1
    2856:	8c 93       	st	X, r24
    2858:	7f c1       	rjmp	.+766    	; 0x2b58 <Timer_Init+0x380>
		}
		else if ((config_Ptr ->mode) == CTC)
    285a:	ea 81       	ldd	r30, Y+2	; 0x02
    285c:	fb 81       	ldd	r31, Y+3	; 0x03
    285e:	80 81       	ld	r24, Z
    2860:	82 30       	cpi	r24, 0x02	; 2
    2862:	09 f0       	breq	.+2      	; 0x2866 <Timer_Init+0x8e>
    2864:	79 c1       	rjmp	.+754    	; 0x2b58 <Timer_Init+0x380>
		{
			CLEAR_BIT( TCCR0, WGM00);
    2866:	a3 e5       	ldi	r26, 0x53	; 83
    2868:	b0 e0       	ldi	r27, 0x00	; 0
    286a:	e3 e5       	ldi	r30, 0x53	; 83
    286c:	f0 e0       	ldi	r31, 0x00	; 0
    286e:	80 81       	ld	r24, Z
    2870:	8f 7b       	andi	r24, 0xBF	; 191
    2872:	8c 93       	st	X, r24

			SET_BIT( TCCR0, WGM01);
    2874:	a3 e5       	ldi	r26, 0x53	; 83
    2876:	b0 e0       	ldi	r27, 0x00	; 0
    2878:	e3 e5       	ldi	r30, 0x53	; 83
    287a:	f0 e0       	ldi	r31, 0x00	; 0
    287c:	80 81       	ld	r24, Z
    287e:	88 60       	ori	r24, 0x08	; 8
    2880:	8c 93       	st	X, r24

			OCR0 = config_Ptr ->Final_Timer_Value;
    2882:	2c e5       	ldi	r18, 0x5C	; 92
    2884:	30 e0       	ldi	r19, 0x00	; 0
    2886:	ea 81       	ldd	r30, Y+2	; 0x02
    2888:	fb 81       	ldd	r31, Y+3	; 0x03
    288a:	85 81       	ldd	r24, Z+5	; 0x05
    288c:	96 81       	ldd	r25, Z+6	; 0x06
    288e:	a7 81       	ldd	r26, Z+7	; 0x07
    2890:	b0 85       	ldd	r27, Z+8	; 0x08
    2892:	f9 01       	movw	r30, r18
    2894:	80 83       	st	Z, r24

			TCCR0 = (TCCR0 & 0XCF) | ((config_Ptr->CompareMode)<<4);
    2896:	a3 e5       	ldi	r26, 0x53	; 83
    2898:	b0 e0       	ldi	r27, 0x00	; 0
    289a:	e3 e5       	ldi	r30, 0x53	; 83
    289c:	f0 e0       	ldi	r31, 0x00	; 0
    289e:	80 81       	ld	r24, Z
    28a0:	28 2f       	mov	r18, r24
    28a2:	2f 7c       	andi	r18, 0xCF	; 207
    28a4:	ea 81       	ldd	r30, Y+2	; 0x02
    28a6:	fb 81       	ldd	r31, Y+3	; 0x03
    28a8:	82 81       	ldd	r24, Z+2	; 0x02
    28aa:	88 2f       	mov	r24, r24
    28ac:	90 e0       	ldi	r25, 0x00	; 0
    28ae:	82 95       	swap	r24
    28b0:	92 95       	swap	r25
    28b2:	90 7f       	andi	r25, 0xF0	; 240
    28b4:	98 27       	eor	r25, r24
    28b6:	80 7f       	andi	r24, 0xF0	; 240
    28b8:	98 27       	eor	r25, r24
    28ba:	82 2b       	or	r24, r18
    28bc:	8c 93       	st	X, r24

			SET_BIT(TIMSK, OCIE0);
    28be:	a9 e5       	ldi	r26, 0x59	; 89
    28c0:	b0 e0       	ldi	r27, 0x00	; 0
    28c2:	e9 e5       	ldi	r30, 0x59	; 89
    28c4:	f0 e0       	ldi	r31, 0x00	; 0
    28c6:	80 81       	ld	r24, Z
    28c8:	82 60       	ori	r24, 0x02	; 2
    28ca:	8c 93       	st	X, r24
    28cc:	45 c1       	rjmp	.+650    	; 0x2b58 <Timer_Init+0x380>
		}
	}
	else if (TimerNumber == Timer1)
    28ce:	89 81       	ldd	r24, Y+1	; 0x01
    28d0:	81 30       	cpi	r24, 0x01	; 1
    28d2:	09 f0       	breq	.+2      	; 0x28d6 <Timer_Init+0xfe>
    28d4:	d1 c0       	rjmp	.+418    	; 0x2a78 <Timer_Init+0x2a0>
	{
		SET_BIT ( TCCR1A, FOC1A );
    28d6:	af e4       	ldi	r26, 0x4F	; 79
    28d8:	b0 e0       	ldi	r27, 0x00	; 0
    28da:	ef e4       	ldi	r30, 0x4F	; 79
    28dc:	f0 e0       	ldi	r31, 0x00	; 0
    28de:	80 81       	ld	r24, Z
    28e0:	88 60       	ori	r24, 0x08	; 8
    28e2:	8c 93       	st	X, r24

		SET_BIT ( TCCR1B, FOC1B );
    28e4:	ae e4       	ldi	r26, 0x4E	; 78
    28e6:	b0 e0       	ldi	r27, 0x00	; 0
    28e8:	ee e4       	ldi	r30, 0x4E	; 78
    28ea:	f0 e0       	ldi	r31, 0x00	; 0
    28ec:	80 81       	ld	r24, Z
    28ee:	84 60       	ori	r24, 0x04	; 4
    28f0:	8c 93       	st	X, r24

		TCNT1 = config_Ptr ->Init_Timer_Value;
    28f2:	ac e4       	ldi	r26, 0x4C	; 76
    28f4:	b0 e0       	ldi	r27, 0x00	; 0
    28f6:	ea 81       	ldd	r30, Y+2	; 0x02
    28f8:	fb 81       	ldd	r31, Y+3	; 0x03
    28fa:	84 81       	ldd	r24, Z+4	; 0x04
    28fc:	88 2f       	mov	r24, r24
    28fe:	90 e0       	ldi	r25, 0x00	; 0
    2900:	11 96       	adiw	r26, 0x01	; 1
    2902:	9c 93       	st	X, r25
    2904:	8e 93       	st	-X, r24

		TCCR1B = (TCCR1B & 0XF8) | (config_Ptr ->prescaler);
    2906:	ae e4       	ldi	r26, 0x4E	; 78
    2908:	b0 e0       	ldi	r27, 0x00	; 0
    290a:	ee e4       	ldi	r30, 0x4E	; 78
    290c:	f0 e0       	ldi	r31, 0x00	; 0
    290e:	80 81       	ld	r24, Z
    2910:	98 2f       	mov	r25, r24
    2912:	98 7f       	andi	r25, 0xF8	; 248
    2914:	ea 81       	ldd	r30, Y+2	; 0x02
    2916:	fb 81       	ldd	r31, Y+3	; 0x03
    2918:	81 81       	ldd	r24, Z+1	; 0x01
    291a:	89 2b       	or	r24, r25
    291c:	8c 93       	st	X, r24

		if ((config_Ptr ->mode) == Normal)
    291e:	ea 81       	ldd	r30, Y+2	; 0x02
    2920:	fb 81       	ldd	r31, Y+3	; 0x03
    2922:	80 81       	ld	r24, Z
    2924:	88 23       	and	r24, r24
    2926:	09 f0       	breq	.+2      	; 0x292a <Timer_Init+0x152>
    2928:	40 c0       	rjmp	.+128    	; 0x29aa <Timer_Init+0x1d2>
		{
			CLEAR_BIT ( TCCR1A, COM1B0 );
    292a:	af e4       	ldi	r26, 0x4F	; 79
    292c:	b0 e0       	ldi	r27, 0x00	; 0
    292e:	ef e4       	ldi	r30, 0x4F	; 79
    2930:	f0 e0       	ldi	r31, 0x00	; 0
    2932:	80 81       	ld	r24, Z
    2934:	8f 7e       	andi	r24, 0xEF	; 239
    2936:	8c 93       	st	X, r24

			CLEAR_BIT ( TCCR1A, COM1B1 );
    2938:	af e4       	ldi	r26, 0x4F	; 79
    293a:	b0 e0       	ldi	r27, 0x00	; 0
    293c:	ef e4       	ldi	r30, 0x4F	; 79
    293e:	f0 e0       	ldi	r31, 0x00	; 0
    2940:	80 81       	ld	r24, Z
    2942:	8f 7d       	andi	r24, 0xDF	; 223
    2944:	8c 93       	st	X, r24

			CLEAR_BIT ( TCCR1A, COM1A0 );
    2946:	af e4       	ldi	r26, 0x4F	; 79
    2948:	b0 e0       	ldi	r27, 0x00	; 0
    294a:	ef e4       	ldi	r30, 0x4F	; 79
    294c:	f0 e0       	ldi	r31, 0x00	; 0
    294e:	80 81       	ld	r24, Z
    2950:	8f 7b       	andi	r24, 0xBF	; 191
    2952:	8c 93       	st	X, r24

			CLEAR_BIT ( TCCR1A, COM1A1 );
    2954:	af e4       	ldi	r26, 0x4F	; 79
    2956:	b0 e0       	ldi	r27, 0x00	; 0
    2958:	ef e4       	ldi	r30, 0x4F	; 79
    295a:	f0 e0       	ldi	r31, 0x00	; 0
    295c:	80 81       	ld	r24, Z
    295e:	8f 77       	andi	r24, 0x7F	; 127
    2960:	8c 93       	st	X, r24


			CLEAR_BIT ( TCCR1B, WGM10 );
    2962:	ae e4       	ldi	r26, 0x4E	; 78
    2964:	b0 e0       	ldi	r27, 0x00	; 0
    2966:	ee e4       	ldi	r30, 0x4E	; 78
    2968:	f0 e0       	ldi	r31, 0x00	; 0
    296a:	80 81       	ld	r24, Z
    296c:	8e 7f       	andi	r24, 0xFE	; 254
    296e:	8c 93       	st	X, r24

			CLEAR_BIT ( TCCR1B, WGM11 );
    2970:	ae e4       	ldi	r26, 0x4E	; 78
    2972:	b0 e0       	ldi	r27, 0x00	; 0
    2974:	ee e4       	ldi	r30, 0x4E	; 78
    2976:	f0 e0       	ldi	r31, 0x00	; 0
    2978:	80 81       	ld	r24, Z
    297a:	8d 7f       	andi	r24, 0xFD	; 253
    297c:	8c 93       	st	X, r24

			CLEAR_BIT ( TCCR1B, WGM12 );
    297e:	ae e4       	ldi	r26, 0x4E	; 78
    2980:	b0 e0       	ldi	r27, 0x00	; 0
    2982:	ee e4       	ldi	r30, 0x4E	; 78
    2984:	f0 e0       	ldi	r31, 0x00	; 0
    2986:	80 81       	ld	r24, Z
    2988:	87 7f       	andi	r24, 0xF7	; 247
    298a:	8c 93       	st	X, r24

			CLEAR_BIT ( TCCR1B, WGM13 );
    298c:	ae e4       	ldi	r26, 0x4E	; 78
    298e:	b0 e0       	ldi	r27, 0x00	; 0
    2990:	ee e4       	ldi	r30, 0x4E	; 78
    2992:	f0 e0       	ldi	r31, 0x00	; 0
    2994:	80 81       	ld	r24, Z
    2996:	8f 7e       	andi	r24, 0xEF	; 239
    2998:	8c 93       	st	X, r24


			SET_BIT ( TIMSK, TOIE1 );
    299a:	a9 e5       	ldi	r26, 0x59	; 89
    299c:	b0 e0       	ldi	r27, 0x00	; 0
    299e:	e9 e5       	ldi	r30, 0x59	; 89
    29a0:	f0 e0       	ldi	r31, 0x00	; 0
    29a2:	80 81       	ld	r24, Z
    29a4:	84 60       	ori	r24, 0x04	; 4
    29a6:	8c 93       	st	X, r24
    29a8:	d7 c0       	rjmp	.+430    	; 0x2b58 <Timer_Init+0x380>
		}
		else if ((config_Ptr ->mode) == CTC)
    29aa:	ea 81       	ldd	r30, Y+2	; 0x02
    29ac:	fb 81       	ldd	r31, Y+3	; 0x03
    29ae:	80 81       	ld	r24, Z
    29b0:	82 30       	cpi	r24, 0x02	; 2
    29b2:	09 f0       	breq	.+2      	; 0x29b6 <Timer_Init+0x1de>
    29b4:	d1 c0       	rjmp	.+418    	; 0x2b58 <Timer_Init+0x380>
		{
			TCCR1A = ( TCCR1A & 0xF8) | ((config_Ptr -> CompareMode)<<4);
    29b6:	af e4       	ldi	r26, 0x4F	; 79
    29b8:	b0 e0       	ldi	r27, 0x00	; 0
    29ba:	ef e4       	ldi	r30, 0x4F	; 79
    29bc:	f0 e0       	ldi	r31, 0x00	; 0
    29be:	80 81       	ld	r24, Z
    29c0:	28 2f       	mov	r18, r24
    29c2:	28 7f       	andi	r18, 0xF8	; 248
    29c4:	ea 81       	ldd	r30, Y+2	; 0x02
    29c6:	fb 81       	ldd	r31, Y+3	; 0x03
    29c8:	82 81       	ldd	r24, Z+2	; 0x02
    29ca:	88 2f       	mov	r24, r24
    29cc:	90 e0       	ldi	r25, 0x00	; 0
    29ce:	82 95       	swap	r24
    29d0:	92 95       	swap	r25
    29d2:	90 7f       	andi	r25, 0xF0	; 240
    29d4:	98 27       	eor	r25, r24
    29d6:	80 7f       	andi	r24, 0xF0	; 240
    29d8:	98 27       	eor	r25, r24
    29da:	82 2b       	or	r24, r18
    29dc:	8c 93       	st	X, r24

			CLEAR_BIT ( TCCR1A, WGM10);
    29de:	af e4       	ldi	r26, 0x4F	; 79
    29e0:	b0 e0       	ldi	r27, 0x00	; 0
    29e2:	ef e4       	ldi	r30, 0x4F	; 79
    29e4:	f0 e0       	ldi	r31, 0x00	; 0
    29e6:	80 81       	ld	r24, Z
    29e8:	8e 7f       	andi	r24, 0xFE	; 254
    29ea:	8c 93       	st	X, r24

			CLEAR_BIT ( TCCR1A, WGM11);
    29ec:	af e4       	ldi	r26, 0x4F	; 79
    29ee:	b0 e0       	ldi	r27, 0x00	; 0
    29f0:	ef e4       	ldi	r30, 0x4F	; 79
    29f2:	f0 e0       	ldi	r31, 0x00	; 0
    29f4:	80 81       	ld	r24, Z
    29f6:	8d 7f       	andi	r24, 0xFD	; 253
    29f8:	8c 93       	st	X, r24

			SET_BIT ( TCCR1B, WGM12);
    29fa:	ae e4       	ldi	r26, 0x4E	; 78
    29fc:	b0 e0       	ldi	r27, 0x00	; 0
    29fe:	ee e4       	ldi	r30, 0x4E	; 78
    2a00:	f0 e0       	ldi	r31, 0x00	; 0
    2a02:	80 81       	ld	r24, Z
    2a04:	88 60       	ori	r24, 0x08	; 8
    2a06:	8c 93       	st	X, r24

			CLEAR_BIT ( TCCR1B, WGM13);
    2a08:	ae e4       	ldi	r26, 0x4E	; 78
    2a0a:	b0 e0       	ldi	r27, 0x00	; 0
    2a0c:	ee e4       	ldi	r30, 0x4E	; 78
    2a0e:	f0 e0       	ldi	r31, 0x00	; 0
    2a10:	80 81       	ld	r24, Z
    2a12:	8f 7e       	andi	r24, 0xEF	; 239
    2a14:	8c 93       	st	X, r24

			if ((config_Ptr -> Channel) == 'A')
    2a16:	ea 81       	ldd	r30, Y+2	; 0x02
    2a18:	fb 81       	ldd	r31, Y+3	; 0x03
    2a1a:	83 81       	ldd	r24, Z+3	; 0x03
    2a1c:	81 34       	cpi	r24, 0x41	; 65
    2a1e:	99 f4       	brne	.+38     	; 0x2a46 <Timer_Init+0x26e>
			{
				OCR1A = config_Ptr -> Final_Timer_Value;
    2a20:	2a e4       	ldi	r18, 0x4A	; 74
    2a22:	30 e0       	ldi	r19, 0x00	; 0
    2a24:	ea 81       	ldd	r30, Y+2	; 0x02
    2a26:	fb 81       	ldd	r31, Y+3	; 0x03
    2a28:	85 81       	ldd	r24, Z+5	; 0x05
    2a2a:	96 81       	ldd	r25, Z+6	; 0x06
    2a2c:	a7 81       	ldd	r26, Z+7	; 0x07
    2a2e:	b0 85       	ldd	r27, Z+8	; 0x08
    2a30:	f9 01       	movw	r30, r18
    2a32:	91 83       	std	Z+1, r25	; 0x01
    2a34:	80 83       	st	Z, r24

				SET_BIT ( TIMSK, OCIE1A);
    2a36:	a9 e5       	ldi	r26, 0x59	; 89
    2a38:	b0 e0       	ldi	r27, 0x00	; 0
    2a3a:	e9 e5       	ldi	r30, 0x59	; 89
    2a3c:	f0 e0       	ldi	r31, 0x00	; 0
    2a3e:	80 81       	ld	r24, Z
    2a40:	80 61       	ori	r24, 0x10	; 16
    2a42:	8c 93       	st	X, r24
    2a44:	89 c0       	rjmp	.+274    	; 0x2b58 <Timer_Init+0x380>
			}
			else if ((config_Ptr -> Channel) == 'B')
    2a46:	ea 81       	ldd	r30, Y+2	; 0x02
    2a48:	fb 81       	ldd	r31, Y+3	; 0x03
    2a4a:	83 81       	ldd	r24, Z+3	; 0x03
    2a4c:	82 34       	cpi	r24, 0x42	; 66
    2a4e:	09 f0       	breq	.+2      	; 0x2a52 <Timer_Init+0x27a>
    2a50:	83 c0       	rjmp	.+262    	; 0x2b58 <Timer_Init+0x380>
			{
				OCR1B = config_Ptr -> Final_Timer_Value;
    2a52:	28 e4       	ldi	r18, 0x48	; 72
    2a54:	30 e0       	ldi	r19, 0x00	; 0
    2a56:	ea 81       	ldd	r30, Y+2	; 0x02
    2a58:	fb 81       	ldd	r31, Y+3	; 0x03
    2a5a:	85 81       	ldd	r24, Z+5	; 0x05
    2a5c:	96 81       	ldd	r25, Z+6	; 0x06
    2a5e:	a7 81       	ldd	r26, Z+7	; 0x07
    2a60:	b0 85       	ldd	r27, Z+8	; 0x08
    2a62:	f9 01       	movw	r30, r18
    2a64:	91 83       	std	Z+1, r25	; 0x01
    2a66:	80 83       	st	Z, r24

				SET_BIT ( TIMSK, OCIE1B);
    2a68:	a9 e5       	ldi	r26, 0x59	; 89
    2a6a:	b0 e0       	ldi	r27, 0x00	; 0
    2a6c:	e9 e5       	ldi	r30, 0x59	; 89
    2a6e:	f0 e0       	ldi	r31, 0x00	; 0
    2a70:	80 81       	ld	r24, Z
    2a72:	88 60       	ori	r24, 0x08	; 8
    2a74:	8c 93       	st	X, r24
    2a76:	70 c0       	rjmp	.+224    	; 0x2b58 <Timer_Init+0x380>
			}
		}
	}
	else if (TimerNumber == Timer2)
    2a78:	89 81       	ldd	r24, Y+1	; 0x01
    2a7a:	82 30       	cpi	r24, 0x02	; 2
    2a7c:	09 f0       	breq	.+2      	; 0x2a80 <Timer_Init+0x2a8>
    2a7e:	6c c0       	rjmp	.+216    	; 0x2b58 <Timer_Init+0x380>
	{

			TCNT2 = config_Ptr ->Init_Timer_Value;
    2a80:	a4 e4       	ldi	r26, 0x44	; 68
    2a82:	b0 e0       	ldi	r27, 0x00	; 0
    2a84:	ea 81       	ldd	r30, Y+2	; 0x02
    2a86:	fb 81       	ldd	r31, Y+3	; 0x03
    2a88:	84 81       	ldd	r24, Z+4	; 0x04
    2a8a:	8c 93       	st	X, r24

			TCCR2 =  (TCCR2 & 0xF8) | (config_Ptr ->prescaler);
    2a8c:	a5 e4       	ldi	r26, 0x45	; 69
    2a8e:	b0 e0       	ldi	r27, 0x00	; 0
    2a90:	e5 e4       	ldi	r30, 0x45	; 69
    2a92:	f0 e0       	ldi	r31, 0x00	; 0
    2a94:	80 81       	ld	r24, Z
    2a96:	98 2f       	mov	r25, r24
    2a98:	98 7f       	andi	r25, 0xF8	; 248
    2a9a:	ea 81       	ldd	r30, Y+2	; 0x02
    2a9c:	fb 81       	ldd	r31, Y+3	; 0x03
    2a9e:	81 81       	ldd	r24, Z+1	; 0x01
    2aa0:	89 2b       	or	r24, r25
    2aa2:	8c 93       	st	X, r24

			SET_BIT( TCCR2, FOC2);
    2aa4:	a5 e4       	ldi	r26, 0x45	; 69
    2aa6:	b0 e0       	ldi	r27, 0x00	; 0
    2aa8:	e5 e4       	ldi	r30, 0x45	; 69
    2aaa:	f0 e0       	ldi	r31, 0x00	; 0
    2aac:	80 81       	ld	r24, Z
    2aae:	80 68       	ori	r24, 0x80	; 128
    2ab0:	8c 93       	st	X, r24

			if ((config_Ptr ->mode) == Normal)
    2ab2:	ea 81       	ldd	r30, Y+2	; 0x02
    2ab4:	fb 81       	ldd	r31, Y+3	; 0x03
    2ab6:	80 81       	ld	r24, Z
    2ab8:	88 23       	and	r24, r24
    2aba:	b1 f4       	brne	.+44     	; 0x2ae8 <Timer_Init+0x310>
			{
				CLEAR_BIT( TCCR2, WGM20);
    2abc:	a5 e4       	ldi	r26, 0x45	; 69
    2abe:	b0 e0       	ldi	r27, 0x00	; 0
    2ac0:	e5 e4       	ldi	r30, 0x45	; 69
    2ac2:	f0 e0       	ldi	r31, 0x00	; 0
    2ac4:	80 81       	ld	r24, Z
    2ac6:	8f 7b       	andi	r24, 0xBF	; 191
    2ac8:	8c 93       	st	X, r24

				CLEAR_BIT( TCCR2, WGM21);
    2aca:	a5 e4       	ldi	r26, 0x45	; 69
    2acc:	b0 e0       	ldi	r27, 0x00	; 0
    2ace:	e5 e4       	ldi	r30, 0x45	; 69
    2ad0:	f0 e0       	ldi	r31, 0x00	; 0
    2ad2:	80 81       	ld	r24, Z
    2ad4:	87 7f       	andi	r24, 0xF7	; 247
    2ad6:	8c 93       	st	X, r24

				SET_BIT ( TIMSK, TOIE0);
    2ad8:	a9 e5       	ldi	r26, 0x59	; 89
    2ada:	b0 e0       	ldi	r27, 0x00	; 0
    2adc:	e9 e5       	ldi	r30, 0x59	; 89
    2ade:	f0 e0       	ldi	r31, 0x00	; 0
    2ae0:	80 81       	ld	r24, Z
    2ae2:	81 60       	ori	r24, 0x01	; 1
    2ae4:	8c 93       	st	X, r24
    2ae6:	38 c0       	rjmp	.+112    	; 0x2b58 <Timer_Init+0x380>
			}
			else if ((config_Ptr ->mode) == CTC)
    2ae8:	ea 81       	ldd	r30, Y+2	; 0x02
    2aea:	fb 81       	ldd	r31, Y+3	; 0x03
    2aec:	80 81       	ld	r24, Z
    2aee:	82 30       	cpi	r24, 0x02	; 2
    2af0:	99 f5       	brne	.+102    	; 0x2b58 <Timer_Init+0x380>
			{
				CLEAR_BIT( TCCR2, WGM20);
    2af2:	a5 e4       	ldi	r26, 0x45	; 69
    2af4:	b0 e0       	ldi	r27, 0x00	; 0
    2af6:	e5 e4       	ldi	r30, 0x45	; 69
    2af8:	f0 e0       	ldi	r31, 0x00	; 0
    2afa:	80 81       	ld	r24, Z
    2afc:	8f 7b       	andi	r24, 0xBF	; 191
    2afe:	8c 93       	st	X, r24

				SET_BIT( TCCR2, WGM21);
    2b00:	a5 e4       	ldi	r26, 0x45	; 69
    2b02:	b0 e0       	ldi	r27, 0x00	; 0
    2b04:	e5 e4       	ldi	r30, 0x45	; 69
    2b06:	f0 e0       	ldi	r31, 0x00	; 0
    2b08:	80 81       	ld	r24, Z
    2b0a:	88 60       	ori	r24, 0x08	; 8
    2b0c:	8c 93       	st	X, r24

				OCR2 = config_Ptr ->Final_Timer_Value;
    2b0e:	23 e4       	ldi	r18, 0x43	; 67
    2b10:	30 e0       	ldi	r19, 0x00	; 0
    2b12:	ea 81       	ldd	r30, Y+2	; 0x02
    2b14:	fb 81       	ldd	r31, Y+3	; 0x03
    2b16:	85 81       	ldd	r24, Z+5	; 0x05
    2b18:	96 81       	ldd	r25, Z+6	; 0x06
    2b1a:	a7 81       	ldd	r26, Z+7	; 0x07
    2b1c:	b0 85       	ldd	r27, Z+8	; 0x08
    2b1e:	f9 01       	movw	r30, r18
    2b20:	80 83       	st	Z, r24

				TCCR2 = (TCCR2 & 0XCF) | ((config_Ptr->CompareMode)<<4);
    2b22:	a5 e4       	ldi	r26, 0x45	; 69
    2b24:	b0 e0       	ldi	r27, 0x00	; 0
    2b26:	e5 e4       	ldi	r30, 0x45	; 69
    2b28:	f0 e0       	ldi	r31, 0x00	; 0
    2b2a:	80 81       	ld	r24, Z
    2b2c:	28 2f       	mov	r18, r24
    2b2e:	2f 7c       	andi	r18, 0xCF	; 207
    2b30:	ea 81       	ldd	r30, Y+2	; 0x02
    2b32:	fb 81       	ldd	r31, Y+3	; 0x03
    2b34:	82 81       	ldd	r24, Z+2	; 0x02
    2b36:	88 2f       	mov	r24, r24
    2b38:	90 e0       	ldi	r25, 0x00	; 0
    2b3a:	82 95       	swap	r24
    2b3c:	92 95       	swap	r25
    2b3e:	90 7f       	andi	r25, 0xF0	; 240
    2b40:	98 27       	eor	r25, r24
    2b42:	80 7f       	andi	r24, 0xF0	; 240
    2b44:	98 27       	eor	r25, r24
    2b46:	82 2b       	or	r24, r18
    2b48:	8c 93       	st	X, r24

				SET_BIT( TIMSK, OCIE2);
    2b4a:	a9 e5       	ldi	r26, 0x59	; 89
    2b4c:	b0 e0       	ldi	r27, 0x00	; 0
    2b4e:	e9 e5       	ldi	r30, 0x59	; 89
    2b50:	f0 e0       	ldi	r31, 0x00	; 0
    2b52:	80 81       	ld	r24, Z
    2b54:	80 68       	ori	r24, 0x80	; 128
    2b56:	8c 93       	st	X, r24
			}
	}
}
    2b58:	0f 90       	pop	r0
    2b5a:	0f 90       	pop	r0
    2b5c:	0f 90       	pop	r0
    2b5e:	cf 91       	pop	r28
    2b60:	df 91       	pop	r29
    2b62:	08 95       	ret

00002b64 <Timer0_setCallBack>:

void Timer0_setCallBack(void(*a_ptr)(void))
{
    2b64:	df 93       	push	r29
    2b66:	cf 93       	push	r28
    2b68:	00 d0       	rcall	.+0      	; 0x2b6a <Timer0_setCallBack+0x6>
    2b6a:	cd b7       	in	r28, 0x3d	; 61
    2b6c:	de b7       	in	r29, 0x3e	; 62
    2b6e:	9a 83       	std	Y+2, r25	; 0x02
    2b70:	89 83       	std	Y+1, r24	; 0x01
	g_callBackPtr0 = a_ptr;
    2b72:	89 81       	ldd	r24, Y+1	; 0x01
    2b74:	9a 81       	ldd	r25, Y+2	; 0x02
    2b76:	90 93 8d 01 	sts	0x018D, r25
    2b7a:	80 93 8c 01 	sts	0x018C, r24
}
    2b7e:	0f 90       	pop	r0
    2b80:	0f 90       	pop	r0
    2b82:	cf 91       	pop	r28
    2b84:	df 91       	pop	r29
    2b86:	08 95       	ret

00002b88 <Timer1_setCallBack>:

void Timer1_setCallBack(void(*a_ptr)(void))
{
    2b88:	df 93       	push	r29
    2b8a:	cf 93       	push	r28
    2b8c:	00 d0       	rcall	.+0      	; 0x2b8e <Timer1_setCallBack+0x6>
    2b8e:	cd b7       	in	r28, 0x3d	; 61
    2b90:	de b7       	in	r29, 0x3e	; 62
    2b92:	9a 83       	std	Y+2, r25	; 0x02
    2b94:	89 83       	std	Y+1, r24	; 0x01
	g_callBackPtr1 = a_ptr;
    2b96:	89 81       	ldd	r24, Y+1	; 0x01
    2b98:	9a 81       	ldd	r25, Y+2	; 0x02
    2b9a:	90 93 8f 01 	sts	0x018F, r25
    2b9e:	80 93 8e 01 	sts	0x018E, r24
}
    2ba2:	0f 90       	pop	r0
    2ba4:	0f 90       	pop	r0
    2ba6:	cf 91       	pop	r28
    2ba8:	df 91       	pop	r29
    2baa:	08 95       	ret

00002bac <Timer2_setCallBack>:

void Timer2_setCallBack(void(*a_ptr)(void))
{
    2bac:	df 93       	push	r29
    2bae:	cf 93       	push	r28
    2bb0:	00 d0       	rcall	.+0      	; 0x2bb2 <Timer2_setCallBack+0x6>
    2bb2:	cd b7       	in	r28, 0x3d	; 61
    2bb4:	de b7       	in	r29, 0x3e	; 62
    2bb6:	9a 83       	std	Y+2, r25	; 0x02
    2bb8:	89 83       	std	Y+1, r24	; 0x01
	g_callBackPtr2 = a_ptr;
    2bba:	89 81       	ldd	r24, Y+1	; 0x01
    2bbc:	9a 81       	ldd	r25, Y+2	; 0x02
    2bbe:	90 93 91 01 	sts	0x0191, r25
    2bc2:	80 93 90 01 	sts	0x0190, r24
}
    2bc6:	0f 90       	pop	r0
    2bc8:	0f 90       	pop	r0
    2bca:	cf 91       	pop	r28
    2bcc:	df 91       	pop	r29
    2bce:	08 95       	ret

00002bd0 <Timer_DeInit>:

void Timer_DeInit (uint8 TimerType)
{
    2bd0:	df 93       	push	r29
    2bd2:	cf 93       	push	r28
    2bd4:	0f 92       	push	r0
    2bd6:	cd b7       	in	r28, 0x3d	; 61
    2bd8:	de b7       	in	r29, 0x3e	; 62
    2bda:	89 83       	std	Y+1, r24	; 0x01
	if (TimerType == Timer0)
    2bdc:	89 81       	ldd	r24, Y+1	; 0x01
    2bde:	88 23       	and	r24, r24
    2be0:	71 f4       	brne	.+28     	; 0x2bfe <Timer_DeInit+0x2e>
	{
		TCNT0 = 0;
    2be2:	e2 e5       	ldi	r30, 0x52	; 82
    2be4:	f0 e0       	ldi	r31, 0x00	; 0
    2be6:	10 82       	st	Z, r1

		TCCR0 = 0;
    2be8:	e3 e5       	ldi	r30, 0x53	; 83
    2bea:	f0 e0       	ldi	r31, 0x00	; 0
    2bec:	10 82       	st	Z, r1

		CLEAR_BIT (TIMSK , TOIE0);
    2bee:	a9 e5       	ldi	r26, 0x59	; 89
    2bf0:	b0 e0       	ldi	r27, 0x00	; 0
    2bf2:	e9 e5       	ldi	r30, 0x59	; 89
    2bf4:	f0 e0       	ldi	r31, 0x00	; 0
    2bf6:	80 81       	ld	r24, Z
    2bf8:	8e 7f       	andi	r24, 0xFE	; 254
    2bfa:	8c 93       	st	X, r24
    2bfc:	21 c0       	rjmp	.+66     	; 0x2c40 <Timer_DeInit+0x70>
	}
	else if (TimerType == Timer1)
    2bfe:	89 81       	ldd	r24, Y+1	; 0x01
    2c00:	81 30       	cpi	r24, 0x01	; 1
    2c02:	71 f4       	brne	.+28     	; 0x2c20 <Timer_DeInit+0x50>
	{
		TCCR1A = 0;
    2c04:	ef e4       	ldi	r30, 0x4F	; 79
    2c06:	f0 e0       	ldi	r31, 0x00	; 0
    2c08:	10 82       	st	Z, r1
		TCCR1B = 0;
    2c0a:	ee e4       	ldi	r30, 0x4E	; 78
    2c0c:	f0 e0       	ldi	r31, 0x00	; 0
    2c0e:	10 82       	st	Z, r1
		OCR1A = 0;
    2c10:	ea e4       	ldi	r30, 0x4A	; 74
    2c12:	f0 e0       	ldi	r31, 0x00	; 0
    2c14:	11 82       	std	Z+1, r1	; 0x01
    2c16:	10 82       	st	Z, r1
		TIMSK = 0;
    2c18:	e9 e5       	ldi	r30, 0x59	; 89
    2c1a:	f0 e0       	ldi	r31, 0x00	; 0
    2c1c:	10 82       	st	Z, r1
    2c1e:	10 c0       	rjmp	.+32     	; 0x2c40 <Timer_DeInit+0x70>
	}
	else if (TimerType == Timer2)
    2c20:	89 81       	ldd	r24, Y+1	; 0x01
    2c22:	82 30       	cpi	r24, 0x02	; 2
    2c24:	69 f4       	brne	.+26     	; 0x2c40 <Timer_DeInit+0x70>
	{
		TCNT2 = 0;
    2c26:	e4 e4       	ldi	r30, 0x44	; 68
    2c28:	f0 e0       	ldi	r31, 0x00	; 0
    2c2a:	10 82       	st	Z, r1

		TCCR2 = 0;
    2c2c:	e5 e4       	ldi	r30, 0x45	; 69
    2c2e:	f0 e0       	ldi	r31, 0x00	; 0
    2c30:	10 82       	st	Z, r1

		CLEAR_BIT (TIMSK , TOIE2);
    2c32:	a9 e5       	ldi	r26, 0x59	; 89
    2c34:	b0 e0       	ldi	r27, 0x00	; 0
    2c36:	e9 e5       	ldi	r30, 0x59	; 89
    2c38:	f0 e0       	ldi	r31, 0x00	; 0
    2c3a:	80 81       	ld	r24, Z
    2c3c:	8f 7b       	andi	r24, 0xBF	; 191
    2c3e:	8c 93       	st	X, r24
	}
}
    2c40:	0f 90       	pop	r0
    2c42:	cf 91       	pop	r28
    2c44:	df 91       	pop	r29
    2c46:	08 95       	ret

00002c48 <UART_init>:
 * 1. Setup the Frame format like number of data bits, parity bit type and number of stop bits.
 * 2. Enable the UART.
 * 3. Setup the UART baud rate.
 */
void UART_init(const UART_ConfigType * Config_Ptr)
{
    2c48:	df 93       	push	r29
    2c4a:	cf 93       	push	r28
    2c4c:	00 d0       	rcall	.+0      	; 0x2c4e <UART_init+0x6>
    2c4e:	00 d0       	rcall	.+0      	; 0x2c50 <UART_init+0x8>
    2c50:	cd b7       	in	r28, 0x3d	; 61
    2c52:	de b7       	in	r29, 0x3e	; 62
    2c54:	9c 83       	std	Y+4, r25	; 0x04
    2c56:	8b 83       	std	Y+3, r24	; 0x03
	uint16 ubrr_value = 0;
    2c58:	1a 82       	std	Y+2, r1	; 0x02
    2c5a:	19 82       	std	Y+1, r1	; 0x01

	/* U2X = 1 for double transmission speed */

	SET_BIT(UCSRA,U2X);
    2c5c:	ab e2       	ldi	r26, 0x2B	; 43
    2c5e:	b0 e0       	ldi	r27, 0x00	; 0
    2c60:	eb e2       	ldi	r30, 0x2B	; 43
    2c62:	f0 e0       	ldi	r31, 0x00	; 0
    2c64:	80 81       	ld	r24, Z
    2c66:	82 60       	ori	r24, 0x02	; 2
    2c68:	8c 93       	st	X, r24
	 * RXEN  = 1 Receiver Enable
	 * RXEN  = 1 Transmitter Enable
	 * UCSZ2 = 0 For 8-bit data mode
	 * RXB8 & TXB8 not used for 8-bit data mode
	 ***********************************************************************/ 
	SET_BIT(UCSRB, RXEN);
    2c6a:	aa e2       	ldi	r26, 0x2A	; 42
    2c6c:	b0 e0       	ldi	r27, 0x00	; 0
    2c6e:	ea e2       	ldi	r30, 0x2A	; 42
    2c70:	f0 e0       	ldi	r31, 0x00	; 0
    2c72:	80 81       	ld	r24, Z
    2c74:	80 61       	ori	r24, 0x10	; 16
    2c76:	8c 93       	st	X, r24
	SET_BIT(UCSRB, TXEN);
    2c78:	aa e2       	ldi	r26, 0x2A	; 42
    2c7a:	b0 e0       	ldi	r27, 0x00	; 0
    2c7c:	ea e2       	ldi	r30, 0x2A	; 42
    2c7e:	f0 e0       	ldi	r31, 0x00	; 0
    2c80:	80 81       	ld	r24, Z
    2c82:	88 60       	ori	r24, 0x08	; 8
    2c84:	8c 93       	st	X, r24
	
	UCSRB = (UCSRB & 0xFB) | (((Config_Ptr ->Data_Bit)&0X04)<<2);
    2c86:	aa e2       	ldi	r26, 0x2A	; 42
    2c88:	b0 e0       	ldi	r27, 0x00	; 0
    2c8a:	ea e2       	ldi	r30, 0x2A	; 42
    2c8c:	f0 e0       	ldi	r31, 0x00	; 0
    2c8e:	80 81       	ld	r24, Z
    2c90:	28 2f       	mov	r18, r24
    2c92:	2b 7f       	andi	r18, 0xFB	; 251
    2c94:	eb 81       	ldd	r30, Y+3	; 0x03
    2c96:	fc 81       	ldd	r31, Y+4	; 0x04
    2c98:	84 81       	ldd	r24, Z+4	; 0x04
    2c9a:	88 2f       	mov	r24, r24
    2c9c:	90 e0       	ldi	r25, 0x00	; 0
    2c9e:	84 70       	andi	r24, 0x04	; 4
    2ca0:	90 70       	andi	r25, 0x00	; 0
    2ca2:	88 0f       	add	r24, r24
    2ca4:	99 1f       	adc	r25, r25
    2ca6:	88 0f       	add	r24, r24
    2ca8:	99 1f       	adc	r25, r25
    2caa:	82 2b       	or	r24, r18
    2cac:	8c 93       	st	X, r24
	 * USBS    = 0 One stop bit
	 * UCSZ1:0 = 11 For 8-bit data mode
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/ 	
	
	UCSRC = (UCSRC & 0xCF) | ((Config_Ptr ->Parity)<<4) ;
    2cae:	a0 e4       	ldi	r26, 0x40	; 64
    2cb0:	b0 e0       	ldi	r27, 0x00	; 0
    2cb2:	e0 e4       	ldi	r30, 0x40	; 64
    2cb4:	f0 e0       	ldi	r31, 0x00	; 0
    2cb6:	80 81       	ld	r24, Z
    2cb8:	28 2f       	mov	r18, r24
    2cba:	2f 7c       	andi	r18, 0xCF	; 207
    2cbc:	eb 81       	ldd	r30, Y+3	; 0x03
    2cbe:	fc 81       	ldd	r31, Y+4	; 0x04
    2cc0:	85 81       	ldd	r24, Z+5	; 0x05
    2cc2:	88 2f       	mov	r24, r24
    2cc4:	90 e0       	ldi	r25, 0x00	; 0
    2cc6:	82 95       	swap	r24
    2cc8:	92 95       	swap	r25
    2cca:	90 7f       	andi	r25, 0xF0	; 240
    2ccc:	98 27       	eor	r25, r24
    2cce:	80 7f       	andi	r24, 0xF0	; 240
    2cd0:	98 27       	eor	r25, r24
    2cd2:	82 2b       	or	r24, r18
    2cd4:	8c 93       	st	X, r24
	UCSRC = (UCSRC & 0xF7) | ((Config_Ptr ->Stop_BIT)<<3) ;
    2cd6:	a0 e4       	ldi	r26, 0x40	; 64
    2cd8:	b0 e0       	ldi	r27, 0x00	; 0
    2cda:	e0 e4       	ldi	r30, 0x40	; 64
    2cdc:	f0 e0       	ldi	r31, 0x00	; 0
    2cde:	80 81       	ld	r24, Z
    2ce0:	28 2f       	mov	r18, r24
    2ce2:	27 7f       	andi	r18, 0xF7	; 247
    2ce4:	eb 81       	ldd	r30, Y+3	; 0x03
    2ce6:	fc 81       	ldd	r31, Y+4	; 0x04
    2ce8:	86 81       	ldd	r24, Z+6	; 0x06
    2cea:	88 2f       	mov	r24, r24
    2cec:	90 e0       	ldi	r25, 0x00	; 0
    2cee:	88 0f       	add	r24, r24
    2cf0:	99 1f       	adc	r25, r25
    2cf2:	88 0f       	add	r24, r24
    2cf4:	99 1f       	adc	r25, r25
    2cf6:	88 0f       	add	r24, r24
    2cf8:	99 1f       	adc	r25, r25
    2cfa:	82 2b       	or	r24, r18
    2cfc:	8c 93       	st	X, r24
	UCSRC = (UCSRC & 0xF9) | (((Config_Ptr ->Data_Bit)&0x03)<<1) ;
    2cfe:	a0 e4       	ldi	r26, 0x40	; 64
    2d00:	b0 e0       	ldi	r27, 0x00	; 0
    2d02:	e0 e4       	ldi	r30, 0x40	; 64
    2d04:	f0 e0       	ldi	r31, 0x00	; 0
    2d06:	80 81       	ld	r24, Z
    2d08:	28 2f       	mov	r18, r24
    2d0a:	29 7f       	andi	r18, 0xF9	; 249
    2d0c:	eb 81       	ldd	r30, Y+3	; 0x03
    2d0e:	fc 81       	ldd	r31, Y+4	; 0x04
    2d10:	84 81       	ldd	r24, Z+4	; 0x04
    2d12:	88 2f       	mov	r24, r24
    2d14:	90 e0       	ldi	r25, 0x00	; 0
    2d16:	83 70       	andi	r24, 0x03	; 3
    2d18:	90 70       	andi	r25, 0x00	; 0
    2d1a:	88 0f       	add	r24, r24
    2d1c:	99 1f       	adc	r25, r25
    2d1e:	82 2b       	or	r24, r18
    2d20:	8c 93       	st	X, r24
	SET_BIT(UCSRC, RXEN);
    2d22:	a0 e4       	ldi	r26, 0x40	; 64
    2d24:	b0 e0       	ldi	r27, 0x00	; 0
    2d26:	e0 e4       	ldi	r30, 0x40	; 64
    2d28:	f0 e0       	ldi	r31, 0x00	; 0
    2d2a:	80 81       	ld	r24, Z
    2d2c:	80 61       	ori	r24, 0x10	; 16
    2d2e:	8c 93       	st	X, r24

	/* Calculate the UBRR register value */

	ubrr_value = (uint16)(((F_CPU / ( (Config_Ptr ->Baud_Rate) * 8UL))) - 1);
    2d30:	eb 81       	ldd	r30, Y+3	; 0x03
    2d32:	fc 81       	ldd	r31, Y+4	; 0x04
    2d34:	80 81       	ld	r24, Z
    2d36:	91 81       	ldd	r25, Z+1	; 0x01
    2d38:	a2 81       	ldd	r26, Z+2	; 0x02
    2d3a:	b3 81       	ldd	r27, Z+3	; 0x03
    2d3c:	88 0f       	add	r24, r24
    2d3e:	99 1f       	adc	r25, r25
    2d40:	aa 1f       	adc	r26, r26
    2d42:	bb 1f       	adc	r27, r27
    2d44:	88 0f       	add	r24, r24
    2d46:	99 1f       	adc	r25, r25
    2d48:	aa 1f       	adc	r26, r26
    2d4a:	bb 1f       	adc	r27, r27
    2d4c:	88 0f       	add	r24, r24
    2d4e:	99 1f       	adc	r25, r25
    2d50:	aa 1f       	adc	r26, r26
    2d52:	bb 1f       	adc	r27, r27
    2d54:	9c 01       	movw	r18, r24
    2d56:	ad 01       	movw	r20, r26
    2d58:	80 e0       	ldi	r24, 0x00	; 0
    2d5a:	92 e1       	ldi	r25, 0x12	; 18
    2d5c:	aa e7       	ldi	r26, 0x7A	; 122
    2d5e:	b0 e0       	ldi	r27, 0x00	; 0
    2d60:	bc 01       	movw	r22, r24
    2d62:	cd 01       	movw	r24, r26
    2d64:	0e 94 5d 17 	call	0x2eba	; 0x2eba <__udivmodsi4>
    2d68:	da 01       	movw	r26, r20
    2d6a:	c9 01       	movw	r24, r18
    2d6c:	01 97       	sbiw	r24, 0x01	; 1
    2d6e:	9a 83       	std	Y+2, r25	; 0x02
    2d70:	89 83       	std	Y+1, r24	; 0x01

	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/

	UBRRH = ubrr_value>>8;
    2d72:	e0 e4       	ldi	r30, 0x40	; 64
    2d74:	f0 e0       	ldi	r31, 0x00	; 0
    2d76:	89 81       	ldd	r24, Y+1	; 0x01
    2d78:	9a 81       	ldd	r25, Y+2	; 0x02
    2d7a:	89 2f       	mov	r24, r25
    2d7c:	99 27       	eor	r25, r25
    2d7e:	80 83       	st	Z, r24
	UBRRL = ubrr_value;
    2d80:	e9 e2       	ldi	r30, 0x29	; 41
    2d82:	f0 e0       	ldi	r31, 0x00	; 0
    2d84:	89 81       	ldd	r24, Y+1	; 0x01
    2d86:	80 83       	st	Z, r24
	return;
}
    2d88:	0f 90       	pop	r0
    2d8a:	0f 90       	pop	r0
    2d8c:	0f 90       	pop	r0
    2d8e:	0f 90       	pop	r0
    2d90:	cf 91       	pop	r28
    2d92:	df 91       	pop	r29
    2d94:	08 95       	ret

00002d96 <UART_sendByte>:
/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void UART_sendByte(const uint8 data)
{
    2d96:	df 93       	push	r29
    2d98:	cf 93       	push	r28
    2d9a:	0f 92       	push	r0
    2d9c:	cd b7       	in	r28, 0x3d	; 61
    2d9e:	de b7       	in	r29, 0x3e	; 62
    2da0:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    2da2:	eb e2       	ldi	r30, 0x2B	; 43
    2da4:	f0 e0       	ldi	r31, 0x00	; 0
    2da6:	80 81       	ld	r24, Z
    2da8:	88 2f       	mov	r24, r24
    2daa:	90 e0       	ldi	r25, 0x00	; 0
    2dac:	80 72       	andi	r24, 0x20	; 32
    2dae:	90 70       	andi	r25, 0x00	; 0
    2db0:	00 97       	sbiw	r24, 0x00	; 0
    2db2:	b9 f3       	breq	.-18     	; 0x2da2 <UART_sendByte+0xc>

	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UDR = data;
    2db4:	ec e2       	ldi	r30, 0x2C	; 44
    2db6:	f0 e0       	ldi	r31, 0x00	; 0
    2db8:	89 81       	ldd	r24, Y+1	; 0x01
    2dba:	80 83       	st	Z, r24
	/************************* Another Method *************************
	UDR = data;
	while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transmission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	*******************************************************************/
}
    2dbc:	0f 90       	pop	r0
    2dbe:	cf 91       	pop	r28
    2dc0:	df 91       	pop	r29
    2dc2:	08 95       	ret

00002dc4 <UART_recieveByte>:
/*
 * Description :
 * Functional responsible for receive byte from another UART device.
 */
uint8 UART_recieveByte(void)
{
    2dc4:	df 93       	push	r29
    2dc6:	cf 93       	push	r28
    2dc8:	cd b7       	in	r28, 0x3d	; 61
    2dca:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    2dcc:	eb e2       	ldi	r30, 0x2B	; 43
    2dce:	f0 e0       	ldi	r31, 0x00	; 0
    2dd0:	80 81       	ld	r24, Z
    2dd2:	88 23       	and	r24, r24
    2dd4:	dc f7       	brge	.-10     	; 0x2dcc <UART_recieveByte+0x8>

	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
    return UDR;		
    2dd6:	ec e2       	ldi	r30, 0x2C	; 44
    2dd8:	f0 e0       	ldi	r31, 0x00	; 0
    2dda:	80 81       	ld	r24, Z
}
    2ddc:	cf 91       	pop	r28
    2dde:	df 91       	pop	r29
    2de0:	08 95       	ret

00002de2 <UART_sendString>:
/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str)
{
    2de2:	df 93       	push	r29
    2de4:	cf 93       	push	r28
    2de6:	00 d0       	rcall	.+0      	; 0x2de8 <UART_sendString+0x6>
    2de8:	0f 92       	push	r0
    2dea:	cd b7       	in	r28, 0x3d	; 61
    2dec:	de b7       	in	r29, 0x3e	; 62
    2dee:	9b 83       	std	Y+3, r25	; 0x03
    2df0:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2df2:	19 82       	std	Y+1, r1	; 0x01
    2df4:	0e c0       	rjmp	.+28     	; 0x2e12 <UART_sendString+0x30>

	/* Send the whole string */
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    2df6:	89 81       	ldd	r24, Y+1	; 0x01
    2df8:	28 2f       	mov	r18, r24
    2dfa:	30 e0       	ldi	r19, 0x00	; 0
    2dfc:	8a 81       	ldd	r24, Y+2	; 0x02
    2dfe:	9b 81       	ldd	r25, Y+3	; 0x03
    2e00:	fc 01       	movw	r30, r24
    2e02:	e2 0f       	add	r30, r18
    2e04:	f3 1f       	adc	r31, r19
    2e06:	80 81       	ld	r24, Z
    2e08:	0e 94 cb 16 	call	0x2d96	; 0x2d96 <UART_sendByte>
		i++;
    2e0c:	89 81       	ldd	r24, Y+1	; 0x01
    2e0e:	8f 5f       	subi	r24, 0xFF	; 255
    2e10:	89 83       	std	Y+1, r24	; 0x01
void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;

	/* Send the whole string */
	while(Str[i] != '\0')
    2e12:	89 81       	ldd	r24, Y+1	; 0x01
    2e14:	28 2f       	mov	r18, r24
    2e16:	30 e0       	ldi	r19, 0x00	; 0
    2e18:	8a 81       	ldd	r24, Y+2	; 0x02
    2e1a:	9b 81       	ldd	r25, Y+3	; 0x03
    2e1c:	fc 01       	movw	r30, r24
    2e1e:	e2 0f       	add	r30, r18
    2e20:	f3 1f       	adc	r31, r19
    2e22:	80 81       	ld	r24, Z
    2e24:	88 23       	and	r24, r24
    2e26:	39 f7       	brne	.-50     	; 0x2df6 <UART_sendString+0x14>
	{
		UART_sendByte(*Str);
		Str++;
	}		
	*******************************************************************/
}
    2e28:	0f 90       	pop	r0
    2e2a:	0f 90       	pop	r0
    2e2c:	0f 90       	pop	r0
    2e2e:	cf 91       	pop	r28
    2e30:	df 91       	pop	r29
    2e32:	08 95       	ret

00002e34 <UART_receiveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_receiveString(uint8 *Str)
{
    2e34:	0f 93       	push	r16
    2e36:	1f 93       	push	r17
    2e38:	df 93       	push	r29
    2e3a:	cf 93       	push	r28
    2e3c:	00 d0       	rcall	.+0      	; 0x2e3e <UART_receiveString+0xa>
    2e3e:	0f 92       	push	r0
    2e40:	cd b7       	in	r28, 0x3d	; 61
    2e42:	de b7       	in	r29, 0x3e	; 62
    2e44:	9b 83       	std	Y+3, r25	; 0x03
    2e46:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2e48:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	Str[i] = UART_recieveByte();
    2e4a:	89 81       	ldd	r24, Y+1	; 0x01
    2e4c:	28 2f       	mov	r18, r24
    2e4e:	30 e0       	ldi	r19, 0x00	; 0
    2e50:	8a 81       	ldd	r24, Y+2	; 0x02
    2e52:	9b 81       	ldd	r25, Y+3	; 0x03
    2e54:	8c 01       	movw	r16, r24
    2e56:	02 0f       	add	r16, r18
    2e58:	13 1f       	adc	r17, r19
    2e5a:	0e 94 e2 16 	call	0x2dc4	; 0x2dc4 <UART_recieveByte>
    2e5e:	f8 01       	movw	r30, r16
    2e60:	80 83       	st	Z, r24
    2e62:	0f c0       	rjmp	.+30     	; 0x2e82 <UART_receiveString+0x4e>

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
	{
		i++;
    2e64:	89 81       	ldd	r24, Y+1	; 0x01
    2e66:	8f 5f       	subi	r24, 0xFF	; 255
    2e68:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
    2e6a:	89 81       	ldd	r24, Y+1	; 0x01
    2e6c:	28 2f       	mov	r18, r24
    2e6e:	30 e0       	ldi	r19, 0x00	; 0
    2e70:	8a 81       	ldd	r24, Y+2	; 0x02
    2e72:	9b 81       	ldd	r25, Y+3	; 0x03
    2e74:	8c 01       	movw	r16, r24
    2e76:	02 0f       	add	r16, r18
    2e78:	13 1f       	adc	r17, r19
    2e7a:	0e 94 e2 16 	call	0x2dc4	; 0x2dc4 <UART_recieveByte>
    2e7e:	f8 01       	movw	r30, r16
    2e80:	80 83       	st	Z, r24

	/* Receive the first byte */
	Str[i] = UART_recieveByte();

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
    2e82:	89 81       	ldd	r24, Y+1	; 0x01
    2e84:	28 2f       	mov	r18, r24
    2e86:	30 e0       	ldi	r19, 0x00	; 0
    2e88:	8a 81       	ldd	r24, Y+2	; 0x02
    2e8a:	9b 81       	ldd	r25, Y+3	; 0x03
    2e8c:	fc 01       	movw	r30, r24
    2e8e:	e2 0f       	add	r30, r18
    2e90:	f3 1f       	adc	r31, r19
    2e92:	80 81       	ld	r24, Z
    2e94:	83 32       	cpi	r24, 0x23	; 35
    2e96:	31 f7       	brne	.-52     	; 0x2e64 <UART_receiveString+0x30>
		i++;
		Str[i] = UART_recieveByte();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
    2e98:	89 81       	ldd	r24, Y+1	; 0x01
    2e9a:	28 2f       	mov	r18, r24
    2e9c:	30 e0       	ldi	r19, 0x00	; 0
    2e9e:	8a 81       	ldd	r24, Y+2	; 0x02
    2ea0:	9b 81       	ldd	r25, Y+3	; 0x03
    2ea2:	fc 01       	movw	r30, r24
    2ea4:	e2 0f       	add	r30, r18
    2ea6:	f3 1f       	adc	r31, r19
    2ea8:	10 82       	st	Z, r1
}
    2eaa:	0f 90       	pop	r0
    2eac:	0f 90       	pop	r0
    2eae:	0f 90       	pop	r0
    2eb0:	cf 91       	pop	r28
    2eb2:	df 91       	pop	r29
    2eb4:	1f 91       	pop	r17
    2eb6:	0f 91       	pop	r16
    2eb8:	08 95       	ret

00002eba <__udivmodsi4>:
    2eba:	a1 e2       	ldi	r26, 0x21	; 33
    2ebc:	1a 2e       	mov	r1, r26
    2ebe:	aa 1b       	sub	r26, r26
    2ec0:	bb 1b       	sub	r27, r27
    2ec2:	fd 01       	movw	r30, r26
    2ec4:	0d c0       	rjmp	.+26     	; 0x2ee0 <__udivmodsi4_ep>

00002ec6 <__udivmodsi4_loop>:
    2ec6:	aa 1f       	adc	r26, r26
    2ec8:	bb 1f       	adc	r27, r27
    2eca:	ee 1f       	adc	r30, r30
    2ecc:	ff 1f       	adc	r31, r31
    2ece:	a2 17       	cp	r26, r18
    2ed0:	b3 07       	cpc	r27, r19
    2ed2:	e4 07       	cpc	r30, r20
    2ed4:	f5 07       	cpc	r31, r21
    2ed6:	20 f0       	brcs	.+8      	; 0x2ee0 <__udivmodsi4_ep>
    2ed8:	a2 1b       	sub	r26, r18
    2eda:	b3 0b       	sbc	r27, r19
    2edc:	e4 0b       	sbc	r30, r20
    2ede:	f5 0b       	sbc	r31, r21

00002ee0 <__udivmodsi4_ep>:
    2ee0:	66 1f       	adc	r22, r22
    2ee2:	77 1f       	adc	r23, r23
    2ee4:	88 1f       	adc	r24, r24
    2ee6:	99 1f       	adc	r25, r25
    2ee8:	1a 94       	dec	r1
    2eea:	69 f7       	brne	.-38     	; 0x2ec6 <__udivmodsi4_loop>
    2eec:	60 95       	com	r22
    2eee:	70 95       	com	r23
    2ef0:	80 95       	com	r24
    2ef2:	90 95       	com	r25
    2ef4:	9b 01       	movw	r18, r22
    2ef6:	ac 01       	movw	r20, r24
    2ef8:	bd 01       	movw	r22, r26
    2efa:	cf 01       	movw	r24, r30
    2efc:	08 95       	ret

00002efe <__prologue_saves__>:
    2efe:	2f 92       	push	r2
    2f00:	3f 92       	push	r3
    2f02:	4f 92       	push	r4
    2f04:	5f 92       	push	r5
    2f06:	6f 92       	push	r6
    2f08:	7f 92       	push	r7
    2f0a:	8f 92       	push	r8
    2f0c:	9f 92       	push	r9
    2f0e:	af 92       	push	r10
    2f10:	bf 92       	push	r11
    2f12:	cf 92       	push	r12
    2f14:	df 92       	push	r13
    2f16:	ef 92       	push	r14
    2f18:	ff 92       	push	r15
    2f1a:	0f 93       	push	r16
    2f1c:	1f 93       	push	r17
    2f1e:	cf 93       	push	r28
    2f20:	df 93       	push	r29
    2f22:	cd b7       	in	r28, 0x3d	; 61
    2f24:	de b7       	in	r29, 0x3e	; 62
    2f26:	ca 1b       	sub	r28, r26
    2f28:	db 0b       	sbc	r29, r27
    2f2a:	0f b6       	in	r0, 0x3f	; 63
    2f2c:	f8 94       	cli
    2f2e:	de bf       	out	0x3e, r29	; 62
    2f30:	0f be       	out	0x3f, r0	; 63
    2f32:	cd bf       	out	0x3d, r28	; 61
    2f34:	09 94       	ijmp

00002f36 <__epilogue_restores__>:
    2f36:	2a 88       	ldd	r2, Y+18	; 0x12
    2f38:	39 88       	ldd	r3, Y+17	; 0x11
    2f3a:	48 88       	ldd	r4, Y+16	; 0x10
    2f3c:	5f 84       	ldd	r5, Y+15	; 0x0f
    2f3e:	6e 84       	ldd	r6, Y+14	; 0x0e
    2f40:	7d 84       	ldd	r7, Y+13	; 0x0d
    2f42:	8c 84       	ldd	r8, Y+12	; 0x0c
    2f44:	9b 84       	ldd	r9, Y+11	; 0x0b
    2f46:	aa 84       	ldd	r10, Y+10	; 0x0a
    2f48:	b9 84       	ldd	r11, Y+9	; 0x09
    2f4a:	c8 84       	ldd	r12, Y+8	; 0x08
    2f4c:	df 80       	ldd	r13, Y+7	; 0x07
    2f4e:	ee 80       	ldd	r14, Y+6	; 0x06
    2f50:	fd 80       	ldd	r15, Y+5	; 0x05
    2f52:	0c 81       	ldd	r16, Y+4	; 0x04
    2f54:	1b 81       	ldd	r17, Y+3	; 0x03
    2f56:	aa 81       	ldd	r26, Y+2	; 0x02
    2f58:	b9 81       	ldd	r27, Y+1	; 0x01
    2f5a:	ce 0f       	add	r28, r30
    2f5c:	d1 1d       	adc	r29, r1
    2f5e:	0f b6       	in	r0, 0x3f	; 63
    2f60:	f8 94       	cli
    2f62:	de bf       	out	0x3e, r29	; 62
    2f64:	0f be       	out	0x3f, r0	; 63
    2f66:	cd bf       	out	0x3d, r28	; 61
    2f68:	ed 01       	movw	r28, r26
    2f6a:	08 95       	ret

00002f6c <itoa>:
    2f6c:	fb 01       	movw	r30, r22
    2f6e:	9f 01       	movw	r18, r30
    2f70:	e8 94       	clt
    2f72:	42 30       	cpi	r20, 0x02	; 2
    2f74:	c4 f0       	brlt	.+48     	; 0x2fa6 <itoa+0x3a>
    2f76:	45 32       	cpi	r20, 0x25	; 37
    2f78:	b4 f4       	brge	.+44     	; 0x2fa6 <itoa+0x3a>
    2f7a:	4a 30       	cpi	r20, 0x0A	; 10
    2f7c:	29 f4       	brne	.+10     	; 0x2f88 <itoa+0x1c>
    2f7e:	97 fb       	bst	r25, 7
    2f80:	1e f4       	brtc	.+6      	; 0x2f88 <itoa+0x1c>
    2f82:	90 95       	com	r25
    2f84:	81 95       	neg	r24
    2f86:	9f 4f       	sbci	r25, 0xFF	; 255
    2f88:	64 2f       	mov	r22, r20
    2f8a:	77 27       	eor	r23, r23
    2f8c:	0e 94 e7 17 	call	0x2fce	; 0x2fce <__udivmodhi4>
    2f90:	80 5d       	subi	r24, 0xD0	; 208
    2f92:	8a 33       	cpi	r24, 0x3A	; 58
    2f94:	0c f0       	brlt	.+2      	; 0x2f98 <itoa+0x2c>
    2f96:	89 5d       	subi	r24, 0xD9	; 217
    2f98:	81 93       	st	Z+, r24
    2f9a:	cb 01       	movw	r24, r22
    2f9c:	00 97       	sbiw	r24, 0x00	; 0
    2f9e:	a1 f7       	brne	.-24     	; 0x2f88 <itoa+0x1c>
    2fa0:	16 f4       	brtc	.+4      	; 0x2fa6 <itoa+0x3a>
    2fa2:	5d e2       	ldi	r21, 0x2D	; 45
    2fa4:	51 93       	st	Z+, r21
    2fa6:	10 82       	st	Z, r1
    2fa8:	c9 01       	movw	r24, r18
    2faa:	0c 94 d7 17 	jmp	0x2fae	; 0x2fae <strrev>

00002fae <strrev>:
    2fae:	dc 01       	movw	r26, r24
    2fb0:	fc 01       	movw	r30, r24
    2fb2:	67 2f       	mov	r22, r23
    2fb4:	71 91       	ld	r23, Z+
    2fb6:	77 23       	and	r23, r23
    2fb8:	e1 f7       	brne	.-8      	; 0x2fb2 <strrev+0x4>
    2fba:	32 97       	sbiw	r30, 0x02	; 2
    2fbc:	04 c0       	rjmp	.+8      	; 0x2fc6 <strrev+0x18>
    2fbe:	7c 91       	ld	r23, X
    2fc0:	6d 93       	st	X+, r22
    2fc2:	70 83       	st	Z, r23
    2fc4:	62 91       	ld	r22, -Z
    2fc6:	ae 17       	cp	r26, r30
    2fc8:	bf 07       	cpc	r27, r31
    2fca:	c8 f3       	brcs	.-14     	; 0x2fbe <strrev+0x10>
    2fcc:	08 95       	ret

00002fce <__udivmodhi4>:
    2fce:	aa 1b       	sub	r26, r26
    2fd0:	bb 1b       	sub	r27, r27
    2fd2:	51 e1       	ldi	r21, 0x11	; 17
    2fd4:	07 c0       	rjmp	.+14     	; 0x2fe4 <__udivmodhi4_ep>

00002fd6 <__udivmodhi4_loop>:
    2fd6:	aa 1f       	adc	r26, r26
    2fd8:	bb 1f       	adc	r27, r27
    2fda:	a6 17       	cp	r26, r22
    2fdc:	b7 07       	cpc	r27, r23
    2fde:	10 f0       	brcs	.+4      	; 0x2fe4 <__udivmodhi4_ep>
    2fe0:	a6 1b       	sub	r26, r22
    2fe2:	b7 0b       	sbc	r27, r23

00002fe4 <__udivmodhi4_ep>:
    2fe4:	88 1f       	adc	r24, r24
    2fe6:	99 1f       	adc	r25, r25
    2fe8:	5a 95       	dec	r21
    2fea:	a9 f7       	brne	.-22     	; 0x2fd6 <__udivmodhi4_loop>
    2fec:	80 95       	com	r24
    2fee:	90 95       	com	r25
    2ff0:	bc 01       	movw	r22, r24
    2ff2:	cd 01       	movw	r24, r26
    2ff4:	08 95       	ret

00002ff6 <_exit>:
    2ff6:	f8 94       	cli

00002ff8 <__stop_program>:
    2ff8:	ff cf       	rjmp	.-2      	; 0x2ff8 <__stop_program>
